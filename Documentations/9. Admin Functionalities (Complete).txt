9. Admin Functionalities (Complete)
9.1 User Management
┌─────────────────────────────────────────────────────────────┐
│              ADMIN USER MANAGEMENT SYSTEM                    │
└─────────────────────────────────────────────────────────────┘

File: pages/Admin.js
Route: /admin
Access: Admin role only

══════════════════════════════════════════════════════════════
ADMIN PAGE STRUCTURE
══════════════════════════════════════════════════════════════

┌────────────────────────────────────────────────────────────┐
│ Administration Panel                                        │
│ Manage users and platform settings                         │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ STATISTICS (Top Row - 4 Cards)                             │
│ ┌──────────┬──────────┬──────────┬──────────┐             │
│ │ Total    │ Active   │ Pending  │ Admins   │             │
│ │ Users    │ Users    │ Setup    │          │             │
│ │   👥     │   ✓      │   ⏰     │   🛡️    │             │
│ │   52     │   45     │    7     │    3     │             │
│ └──────────┴──────────┴──────────┴──────────┘             │
│                                                             │
│ USER INVITATION PROCESS (Info Card)                        │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ℹ️ How to Add New Users                               │  │
│ │                                                        │  │
│ │ This platform uses Google authentication for security.│  │
│ │ To invite new users, share the platform URL with them │  │
│ │ directly. Once they sign in with Google, their account│  │
│ │ will be automatically created and appear here.        │  │
│ │                                                        │  │
│ │ Platform URL to Share:                                │  │
│ │ [https://uniconnect.base44.com] [Copy Link]          │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ USER MANAGEMENT                                            │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ View and manage all registered users                  │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │                                                        │  │
│ │ [User Card 1]                                         │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ [JD] John Doe              [user] [✓ Active]   │   │  │
│ │ │ john.doe@state.gov                             │   │  │
│ │ │ 🏢 U.S. Department of State                    │   │  │
│ │ │ 🌍 United States                                │   │  │
│ │ │ Joined Jan 15, 2025                            │   │  │
│ │ │                                                 │   │  │
│ │ │ [Edit] [Make Admin]                            │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ │                                                        │  │
│ │ [User Card 2]                                         │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ [MD] Maria Dubois          [user] [✓ Active]   │   │  │
│ │ │ maria.dubois@environment.fr                    │   │  │
│ │ │ 🏢 French Ministry of Environment              │   │  │
│ │ │ 🌍 France                                       │   │  │
│ │ │ Joined Jan 14, 2025                            │   │  │
│ │ │                                                 │   │  │
│ │ │ [Edit] [Make Admin]                            │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ │                                                        │  │
│ │ [User Card 3]                                         │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ [PK] Peter Kim             [user] [⚠️ Pending] │   │  │
│ │ │ peter.kim@korea.gov                            │   │  │
│ │ │ (No organization data)                         │   │  │
│ │ │ (No country data)                              │   │  │
│ │ │ Joined Jan 16, 2025                            │   │  │
│ │ │                                                 │   │  │
│ │ │ [Edit] [Make Admin]                            │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ │                                                        │  │
│ │ [... more user cards ...]                             │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
USER MANAGEMENT FUNCTIONS
══════════════════════════════════════════════════════════════

1. VIEW ALL USERS
┌────────────────────────────────────────────────────────────┐
│ loadData() function:                                        │
│                                                             │
│ const user = await User.me();                              │
│ if (user.role !== 'admin') {                               │
│   // Show access denied error                              │
│   return;                                                   │
│ }                                                           │
│                                                             │
│ const delegates = await User.list('-created_date');         │
│ setAllDelegates(delegates);                                │
│                                                             │
│ // Calculate statistics                                    │
│ const activeCount = delegates.filter(d =>                  │
│   d.consent_given && d.profile_completed                   │
│ ).length;                                                   │
│                                                             │
│ const pendingCount = delegates.filter(d =>                 │
│   !d.consent_given || !d.profile_completed                 │
│ ).length;                                                   │
│                                                             │
│ const adminCount = delegates.filter(d =>                   │
│   d.role === 'admin'                                       │
│ ).length;                                                   │
└────────────────────────────────────────────────────────────┘

2. EDIT USER PROFILE (ADMIN CAN EDIT ANY USER)
┌────────────────────────────────────────────────────────────┐
│ When admin clicks [Edit] button:                           │
│                                                             │
│ handleEditDelegate(delegate) {                             │
│   setEditingDelegate(delegate);                            │
│   setEditForm({                                            │
│     full_name: delegate.full_name || '',                   │
│     organization: delegate.organization || '',             │
│     country: delegate.country || '',                       │
│     job_title: delegate.job_title || '',                   │
│     representation_type: delegate.representation_type || '',│
│     industry_sector: delegate.industry_sector || '',       │
│     biography: delegate.biography || '',                   │
│     linkedin_profile: delegate.linkedin_profile || ''      │
│   });                                                       │
│   setIsEditDialogOpen(true);                               │
│ }                                                           │
│                                                             │
│ Dialog shows:                                              │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Edit User Profile                                     │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ ℹ️ Password Management:                               │  │
│ │ This platform uses Google for authentication. Users   │  │
│ │ must manage their passwords through their Google      │  │
│ │ account settings.                                     │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │                                                        │  │
│ │ Full Name: [___________________]                      │  │
│ │ Job Title: [___________________]                      │  │
│ │ Organization: [________________]                      │  │
│ │ Country: [_____________________]                      │  │
│ │ Representation Type: [Government ▼]                   │  │
│ │ Industry Sector: [______________]                     │  │
│ │ LinkedIn: [_____________________]                     │  │
│ │ Biography: [____________________]                     │  │
│ │           [____________________]                     │  │
│ │                                                        │  │
│ │ [Cancel] [Save Changes]                               │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ handleSaveEdit() {                                         │
│   await User.update(editingDelegate.id, editForm);        │
│   setIsEditDialogOpen(false);                             │
│   await loadData(); // Refresh list                       │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

3. CHANGE USER ROLE
┌────────────────────────────────────────────────────────────┐
│ Make User Admin:                                           │
│                                                             │
│ updateDelegateRole(delegateId, 'admin') {                 │
│   await User.update(delegateId, { role: 'admin' });       │
│   await loadData();                                        │
│ }                                                           │
│                                                             │
│ After update:                                              │
│ - User now has admin privileges                            │
│ - Can access /admin page                                   │
│ - Can manage rooms and bookings                            │
│ - Can edit other users                                     │
│ - "Admin Settings" appears in their sidebar                │
│                                                             │
│ Remove Admin Role:                                         │
│                                                             │
│ updateDelegateRole(delegateId, 'user') {                  │
│   await User.update(delegateId, { role: 'user' });        │
│   await loadData();                                        │
│ }                                                           │
│                                                             │
│ After update:                                              │
│ - User loses admin privileges                              │
│ - Cannot access /admin page                                │
│ - Cannot manage rooms                                      │
│ - "Admin Settings" removed from sidebar                    │
│                                                             │
│ PROTECTION:                                                │
│ - Admins cannot remove their own admin role                │
│ - At least one admin must always exist                     │
└────────────────────────────────────────────────────────────┘

4. USER STATUS INDICATORS
┌────────────────────────────────────────────────────────────┐
│ getStatusColor(delegate) {                                 │
│   if (!delegate.consent_given)                             │
│     return 'bg-red-100 text-red-800';  // ❌ Critical      │
│   if (!delegate.profile_completed)                         │
│     return 'bg-orange-100 text-orange-800';  // ⚠️ Warning │
│   return 'bg-green-100 text-green-800';  // ✓ Active      │
│ }                                                           │
│                                                             │
│ getStatusText(delegate) {                                  │
│   if (!delegate.consent_given)                             │
│     return 'Pending Consent';                              │
│   if (!delegate.profile_completed)                         │
│     return 'Profile Incomplete';                           │
│   return 'Active';                                         │
│ }                                                           │
│                                                             │
│ Status Meanings:                                            │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ❌ Pending Consent                                    │  │
│ │ - User has not agreed to data processing terms        │  │
│ │ - Cannot use platform features                        │  │
│ │ - Must complete on profile page                       │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ ⚠️ Profile Incomplete                                 │  │
│ │ - Consent given but profile not filled               │  │
│ │ - Limited platform access                             │  │
│ │ - Cannot appear in directory                          │  │
│ │ - Cannot send/receive meeting requests                │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ ✓ Active                                              │  │
│ │ - Consent given and profile complete                  │  │
│ │ - Full platform access                                │  │
│ │ - Visible in directory (unless hidden)                │  │
│ │ - Can send/receive meeting requests                   │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘
9.2 Room Management (Complete Details)
┌─────────────────────────────────────────────────────────────┐
│            ROOM MANAGEMENT SYSTEM (ADMIN ONLY)               │
└─────────────────────────────────────────────────────────────┘

File: pages/Rooms.js
Route: /rooms
Access: Admin role only

══════════════════════════════════════════════════════════════
ROOMS PAGE STRUCTURE
══════════════════════════════════════════════════════════════

┌────────────────────────────────────────────────────────────┐
│ Venue Room Management                                       │
│ Manage conference rooms and meeting spaces                 │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ Header Actions:                                            │
│ [+ Add New Room]  [📊 View Analytics]  [🗓️ View Schedule] │
│                                                             │
│ Statistics Bar:                                            │
│ ┌──────────┬──────────┬──────────┬──────────┐             │
│ │ Total    │ Active   │ Small    │ Large    │             │
│ │ Rooms    │ Rooms    │ Rooms    │ Rooms    │             │
│ │   🏢     │   ✓      │   👥     │   👥👥   │             │
│ │    6     │    5     │    4     │    2     │             │
│ └──────────┴──────────┴──────────┴──────────┘             │
│                                                             │
│ Room List (Detailed Cards):                                │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Board Room                              [✓ Active]    │  │
│ │ ────────────────────────────────────────────────────  │  │
│ │ Type: Small | Capacity: 8 people                     │  │
│ │ Floor: 5 | Location: North Wing                      │  │
│ │                                                        │  │
│ │ Equipment:                                            │  │
│ │ [📶 WiFi] [📽️ Projector] [🖥️ Monitor]                │  │
│ │                                                        │  │
│ │ Contact: Facilities Dept ext. 1234                    │  │
│ │                                                        │  │
│ │ Description:                                          │  │
│ │ Executive board room with mahogany table and premium  │  │
│ │ AV equipment. Perfect for high-level meetings.        │  │
│ │                                                        │  │
│ │ Statistics:                                           │  │
│ │ • Total Bookings: 12                                  │  │
│ │ • Utilization Rate: 85%                               │  │
│ │ • Most Popular Time: 10:00-12:00                      │  │
│ │                                                        │  │
│ │ [Edit Room] [View Bookings] [Deactivate]             │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Conference Room A                       [✓ Active]    │  │
│ │ ────────────────────────────────────────────────────  │  │
│ │ Type: Small | Capacity: 8 people                     │  │
│ │ Floor: 2 | Location: East Wing                       │  │
│ │                                                        │  │
│ │ Equipment:                                            │  │
│ │ [📶 WiFi] [📽️ Projector] [☕ Coffee]                  │  │
│ │                                                        │  │
│ │ Statistics:                                           │  │
│ │ • Total Bookings: 9                                   │  │
│ │ • Utilization Rate: 72%                               │  │
│ │                                                        │  │
│ │ [Edit Room] [View Bookings] [Deactivate]             │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ [... more room cards ...]                                  │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
ADD NEW ROOM DIALOG
══════════════════════════════════════════════════════════════

Component: components/venues/RoomFormDialog.jsx

When admin clicks [+ Add New Room]:
┌────────────────────────────────────────────────────────────┐
│ Add New Room                                          [X]   │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ Basic Information                                          │
│ ──────────────────                                         │
│                                                             │
│ Room Name: *                                               │
│ [________________________________]                         │
│ Example: "Conference Room A", "Board Room"                 │
│                                                             │
│ Room Type: *                                               │
│ ┌─────────────┬─────────────┐                             │
│ │ ● Small     │ ○ Large     │                             │
│ │ (<10 people)│ (≥10 people)│                             │
│ └─────────────┴─────────────┘                             │
│                                                             │
│ Capacity: *                                                │
│ [____] people                                              │
│ Hint: Small rooms: 2-9, Large rooms: 10+                  │
│                                                             │
│ Floor Level: *                                             │
│ [____]                                                     │
│ Example: 1, 2, 3, etc.                                     │
│                                                             │
│ Location Details (Optional)                                │
│ ──────────────────────────                                 │
│                                                             │
│ Location/Wing:                                             │
│ [________________________________]                         │
│ Example: "North Wing", "East Tower"                        │
│                                                             │
│ Contact Information:                                       │
│ [________________________________]                         │
│ Example: "ext. 1234", "facilities@company.com"             │
│                                                             │
│ Room Description:                                          │
│ [________________________________]                         │
│ [________________________________]                         │
│ [________________________________]                         │
│ Describe the room's features, ambiance, special uses       │
│                                                             │
│ Equipment & Amenities                                      │
│ ──────────────────────                                     │
│                                                             │
│ Available Equipment:                                       │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Current: [WiFi] [×]  [Projector] [×]                 │  │
│ │                                                        │  │
│ │ Add equipment:                                        │  │
│ │ Quick Add:                                            │  │
│ │ [+ WiFi] [+ Projector] [+ Monitor] [+ Coffee]        │  │
│ │ [+ Whiteboard] [+ Video Conference]                   │  │
│ │                                                        │  │
│ │ Custom: [______________] [Add]                        │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Room Status                                                │
│ ──────────                                                 │
│                                                             │
│ [✓] Active (Available for booking)                         │
│ [ ] Inactive (Not available)                               │
│                                                             │
├────────────────────────────────────────────────────────────┤
│                              [Cancel] [Save Room]          │
└────────────────────────────────────────────────────────────┘

FORM VALIDATION:
┌────────────────────────────────────────────────────────────┐
│ Required Fields:                                           │
│ • Room Name (min 3 characters)                             │
│ • Room Type (Small or Large)                               │
│ • Capacity (min 1, max 100)                                │
│ • Floor (must be number)                                   │
│                                                             │
│ Validation Rules:                                          │
│ • If Type = Small, Capacity must be < 10                   │
│ • If Type = Large, Capacity must be ≥ 10                   │
│ • Capacity must match selected type                        │
│ • Room name must be unique                                 │
│ • Floor must be positive number                            │
│                                                             │
│ Save Function:                                             │
│ const handleSave = async () => {                           │
│   // Validate                                              │
│   if (!formData.name || !formData.capacity || !formData.floor) {│
│     setError("Please fill all required fields");           │
│     return;                                                 │
│   }                                                         │
│                                                             │
│   // Type-capacity validation                              │
│   if (formData.type === 'small' && formData.capacity >= 10) {│
│     setError("Small rooms must have capacity < 10");       │
│     return;                                                 │
│   }                                                         │
│   if (formData.type === 'large' && formData.capacity < 10) {│
│     setError("Large rooms must have capacity ≥ 10");       │
│     return;                                                 │
│   }                                                         │
│                                                             │
│   // Create room                                           │
│   await VenueRoom.create({                                 │
│     name: formData.name,                                   │
│     type: formData.type,                                   │
│     capacity: formData.capacity,                           │
│     floor: formData.floor,                                 │
│     location: formData.location || '',                     │
│     contact: formData.contact || '',                       │
│     description: formData.description || '',               │
│     equipment: formData.equipment || [],                   │
│     is_active: formData.is_active                          │
│   });                                                       │
│                                                             │
│   // Success                                               │
│   onSuccess();                                             │
│   closeDialog();                                           │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
EDIT ROOM
══════════════════════════════════════════════════════════════

When admin clicks [Edit Room]:
┌────────────────────────────────────────────────────────────┐
│ Same dialog as "Add New Room" but:                         │
│ • Title changes to "Edit Room"                             │
│ • Form pre-populated with existing data                    │
│ • Save button text: "Update Room"                          │
│                                                             │
│ Update Function:                                           │
│ await VenueRoom.update(room.id, {                          │
│   name: formData.name,                                     │
│   type: formData.type,                                     │
│   capacity: formData.capacity,                             │
│   floor: formData.floor,                                   │
│   location: formData.location,                             │
│   contact: formData.contact,                               │
│   description: formData.description,                       │
│   equipment: formData.equipment,                           │
│   is_active: formData.is_active                            │
│ });                                                         │
│                                                             │
│ IMPORTANT: Editing room details does NOT affect existing   │
│ bookings. Bookings store a snapshot of room data.          │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
DEACTIVATE ROOM
══════════════════════════════════════════════════════════════

When admin clicks [Deactivate]:
┌────────────────────────────────────────────────────────────┐
│ Deactivate Room?                                      [X]   │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ ⚠️ You are about to deactivate:                            │
│                                                             │
│ Room: Board Room                                           │
│ Floor: 5                                                   │
│ Capacity: 8 people                                         │
│                                                             │
│ Effects of deactivation:                                   │
│ • Room will no longer appear in booking options            │
│ • Users cannot create new bookings for this room           │
│ • Existing active bookings will remain valid               │
│ • You can reactivate the room at any time                  │
│                                                             │
│ Active Bookings Check:                                     │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ This room has 3 upcoming bookings:                   │  │
│ │ • Jan 22, 14:00-16:00 (VIP Visit)                    │  │
│ │ • Jan 23, 10:30-11:30 (John & Maria meeting)         │  │
│ │ • Jan 24, 15:00-16:00 (Strategy Session)             │  │
│ │                                                        │  │
│ │ These bookings will NOT be affected.                  │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Are you sure you want to continue?                         │
│                                                             │
├────────────────────────────────────────────────────────────┤
│                             [Cancel] [Deactivate Room]     │
└────────────────────────────────────────────────────────────┘

Function:
┌────────────────────────────────────────────────────────────┐
│ handleDeactivate = async (roomId) => {                     │
│   // Get upcoming bookings for this room                   │
│   const upcomingBookings = allBookings.filter(b =>         │
│     b.room_id === roomId &&                                │
│     b.status === 'active' &&                               │
│     new Date(b.start_time) > new Date()                    │
│   );                                                        │
│                                                             │
│   // Show confirmation with booking info                   │
│   setConfirmDialog({                                       │
│     open: true,                                            │
│     room: selectedRoom,                                    │
│     upcomingBookings: upcomingBookings                     │
│   });                                                       │
│ };                                                          │
│                                                             │
│ onConfirm = async () => {                                  │
│   await VenueRoom.update(roomId, {                         │
│     is_active: false                                       │
│   });                                                       │
│   await loadData();                                        │
│   closeDialog();                                           │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
REACTIVATE ROOM
══════════════════════════════════════════════════════════════

Inactive rooms show different actions:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Private Office                          [❌ Inactive] │  │
│ │ ────────────────────────────────────────────────────  │  │
│ │ Type: Small | Capacity: 2 people                     │  │
│ │ Floor: 4                                              │  │
│ │                                                        │  │
│ │ ⚠️ This room is currently inactive and not available  │  │
│ │    for booking.                                       │  │
│ │                                                        │  │
│ │ [Edit Room] [✓ Reactivate]                            │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ When admin clicks [Reactivate]:                            │
│ await VenueRoom.update(roomId, { is_active: true });      │
│                                                             │
│ Room immediately available for booking again.              │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
VIEW ROOM BOOKINGS
══════════════════════════════════════════════════════════════

When admin clicks [View Bookings] on a room:
┌────────────────────────────────────────────────────────────┐
│ Bookings for Board Room                               [X]   │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ [All Bookings ▼] [This Week] [This Month] [Future]         │
│                                                             │
│ Total Bookings: 15                                         │
│ Upcoming: 3 | Completed: 10 | Cancelled: 2                 │
│                                                             │
│ Upcoming Bookings:                                         │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Jan 22, 2025 | 14:00 - 16:00                         │  │
│ │ [Private] VIP Director Visit - Conference Prep       │  │
│ │ Booked by: Sarah Admin                               │  │
│ │ Status: Active                                        │  │
│ │ [View Details] [Cancel Booking]                      │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ Jan 23, 2025 | 10:30 - 11:30                         │  │
│ │ [Meeting] U.S.-France Climate Cooperation Framework  │  │
│ │ Participants: John Doe, Maria Dubois                 │  │
│ │ Booked by: John Doe                                  │  │
│ │ Status: Active                                        │  │
│ │ [View Details] [Cancel Booking]                      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Completed Bookings:                                        │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Jan 15, 2025 | 09:00 - 10:00                         │  │
│ │ [Meeting] Trade Agreement Discussion                 │  │
│ │ Participants: Sarah Smith, Tom Brown                 │  │
│ │ Status: Completed                                     │  │
│ │ [View Details]                                        │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
├────────────────────────────────────────────────────────────┤
│ [Export Report] [Print] [Close]                            │
└────────────────────────────────────────────────────────────┘
9.3 Analytics & Reporting
┌─────────────────────────────────────────────────────────────┐
│              ANALYTICS DASHBOARD (ADMIN)                     │
└─────────────────────────────────────────────────────────────┘

Access: Admin page → Analytics tab

══════════════════════════════════════════════════════════════
VENUE USAGE ANALYTICS
══════════════════════════════════════════════════════════════

┌────────────────────────────────────────────────────────────┐
│ Venue Usage Statistics                                      │
│ [This Month ▼] [Export CSV] [Print Report]                 │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ Overview Metrics                                           │
│ ┌──────────┬──────────┬──────────┬──────────┐             │
│ │ Total    │ Average  │ Peak     │ Total    │             │
│ │ Bookings │ Duration │ Time     │ Hours    │             │
│ │   45     │ 52 min   │ 10-12 AM │  37.5h   │             │
│ └──────────┴──────────┴──────────┴──────────┘             │
│                                                             │
│ Room Utilization                                           │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Board Room                                            │  │
│ │ ██████████████████████████████████████ 85% (12)      │  │
│ │                                                        │  │
│ │ Conference Room A                                     │  │
│ │ ███████████████████████████████ 72% (9)              │  │
│ │                                                        │  │
│ │ Conference Room B                                     │  │
│ │ ███████████████████████ 58% (8)                      │  │
│ │                                                        │  │
│ │ Meeting Room C                                        │  │
│ │ ████████████████ 45% (6)                             │  │
│ │                                                        │  │
│ │ Auditorium                                            │  │
│ │ ██████████ 30% (4)                                   │  │
│ │                                                        │  │
│ │ Private Office                                        │  │
│ │ ██████ 20% (3)                                       │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Booking Types Distribution                                 │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ 🔵 Meeting Bookings: 42 (93%)                         │  │
│ │ 🟡 Private Bookings: 3 (7%)                           │  │
│ │                                                        │  │
│ │ [View Breakdown]                                      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Peak Usage Times (Heatmap)                                 │
│ ┌──────────────────────────────────────────────────────┐  │
│ │        Mon  Tue  Wed  Thu  Fri                        │  │
│ │ 08:00  ██   ██   ███  ██   █                          │  │
│ │ 09:00  ███  ████ ████ ███  ██                         │  │
│ │ 10:00  █████████████████████████ (Peak)              │  │
│ │ 11:00  ████████████████████████                       │  │
│ │ 12:00  ██   ███  ██   ███  ██                         │  │
│ │ 13:00  ███  ██   ███  ██   ███                        │  │
│ │ 14:00  ████ ████ ████ ████ ███                        │  │
│ │ 15:00  ███  ███  ████ ███  ██                         │  │
│ │ 16:00  ██   ██   ███  ██   █                          │  │
│ │ 17:00  █    ██   ██   █    █                          │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Equipment Usage                                            │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ WiFi: Used in 45/45 bookings (100%)                   │  │
│ │ Projector: Used in 35/45 bookings (78%)               │  │
│ │ Monitor: Used in 28/45 bookings (62%)                 │  │
│ │ Coffee: Used in 20/45 bookings (44%)                  │  │
│ │ Whiteboard: Used in 15/45 bookings (33%)              │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
USER ENGAGEMENT ANALYTICS
══════════════════════════════════════════════════════════════

┌────────────────────────────────────────────────────────────┐
│ Platform Engagement Metrics                                │
├────────────────────────────────────────────────────────────┤
│                                                             │
│ Active Users                                               │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Daily Active Users (DAU): 38                          │  │
│ │ Weekly Active Users (WAU): 52                         │  │
│ │ Monthly Active Users (MAU): 52                        │  │
│ │                                                        │  │
│ │ Engagement Rate: 73%                                  │  │
│ │ (Users who logged in this week / Total users)        │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Meeting Requests                                           │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Total Sent: 87                                        │  │
│ │ Accepted: 65 (75%)                                    │  │
│ │ Declined: 15 (17%)                                    │  │
│ │ Pending: 7 (8%)                                       │  │
│ │                                                        │  │
│ │ Average Response Time: 4.2 hours                      │  │
│ │ Acceptance Rate Trend: ↗️ +5% vs last month           │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Most Active Users (Top 10)                                 │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ 1. John Doe - 12 meetings, 45 messages               │  │
│ │ 2. Maria Dubois - 10 meetings, 38 messages           │  │
│ │ 3. Peter Kim - 9 meetings, 32 messages               │  │
│ │ ...                                                   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Popular Connection Patterns                                │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Government ←→ NGO: 25 connections                     │  │
│ │ Government ←→ Private Sector: 18 connections          │  │
│ │ Academic ←→ International Org: 15 connections         │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
EXPORT FUNCTIONALITY
══════════════════════════════════════════════════════════════

Export Options:
┌────────────────────────────────────────────────────────────┐
│ When admin clicks [Export CSV]:                            │
│                                                             │
│ export UserBookings() {                                    │
│   const csvData = bookings.map(b => ({                     │
│     'Date': format(new Date(b.start_time), 'yyyy-MM-dd'),  │
│     'Start Time': format(new Date(b.start_time), 'HH:mm'), │
│     'End Time': format(new Date(b.end_time), 'HH:mm'),     │
│     'Room': b.room_name,                                   │
│     'Floor': b.floor_level,                                │
│     'Capacity': b.capacity,                                │
│     'Type': b.booking_type,                                │
│     'Booked By': users[b.booked_by]?.full_name,            │
│     'Status': b.status,                                    │
│     'Equipment': b.equipment.join(', ')                    │
│   }));                                                      │
│                                                             │
│   // Convert to CSV                                        │
│   const csv = convertToCSV(csvData);                       │
│                                                             │
│   // Download                                              │
│   const blob = new Blob([csv], { type: 'text/csv' });     │
│   const url = window.URL.createObjectURL(blob);            │
│   const a = document.createElement('a');                   │
│   a.href = url;                                            │
│   a.download = `bookings-${Date.now()}.csv`;               │
│   a.click();                                               │
│ }                                                           │
│                                                             │
│ Generated CSV Example:                                     │
│ ─────────────────────────────────────────────────────────  │
│ Date,Start Time,End Time,Room,Floor,Capacity,Type,...     │
│ 2025-01-22,14:00,16:00,Board Room,5,8,private,...         │
│ 2025-01-23,10:30,11:30,Board Room,5,8,meeting,...         │
│ ...                                                         │
└────────────────────────────────────────────────────────────┘

Print Report:
┌────────────────────────────────────────────────────────────┐
│ When admin clicks [Print Report]:                          │
│ • Opens print preview                                      │
│ • Formats data in printer-friendly layout                  │
│ • Includes:                                                │
│   - Date range                                             │
│   - All statistics                                         │
│   - Charts/graphs                                          │
│   - Detailed tables                                        │
│ • Can save as PDF                                          │
└────────────────────────────────────────────────────────────┘
10. Notification System (Complete Details)
┌─────────────────────────────────────────────────────────────┐
│          NOTIFICATION SYSTEM ARCHITECTURE                    │
└─────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
NOTIFICATION TYPES & TRIGGERS
══════════════════════════════════════════════════════════════

1. NEW_MEETING_REQUEST
┌────────────────────────────────────────────────────────────┐
│ Trigger: User sends meeting request                        │
│                                                             │
│ When: After MeetingRequest.create()                        │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: recipientId,                                    │
│   type: "new_meeting_request",                             │
│   title: "New Meeting Request",                            │
│   body: `You have received a new meeting request from ${   │
│     requester.full_name}. Meeting Code: ${meetingCode}`,   │
│   link: "/meetings",                                       │
│   related_entity_id: meetingRequestId                      │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ 📅 New Meeting Request                                     │
│ You have received a new meeting request from John Doe.     │
│ Meeting Code: A7K9M2N4                                     │
│ Jan 15, 10:05 AM                                           │
│                                                             │
│ Preference Key: new_meeting_request                        │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

2. REQUEST_ACCEPTED
┌────────────────────────────────────────────────────────────┐
│ Trigger: Recipient accepts meeting request                 │
│                                                             │
│ When: After status changed to 'accepted'                   │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: requesterId,                                    │
│   type: "request_accepted",                                │
│   title: "Meeting Request Accepted",                       │
│   body: `${recipient.full_name} has accepted your meeting` │
│         + ` request regarding "${topic}".`,                │
│   link: "/meetings",                                       │
│   related_entity_id: meetingRequestId                      │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ ✅ Meeting Request Accepted                                │
│ Maria Dubois has accepted your meeting request regarding   │
│ "U.S.-France Climate Cooperation Framework".               │
│ Jan 15, 10:10 AM                                           │
│                                                             │
│ Preference Key: request_status_update                      │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

3. REQUEST_DECLINED
┌────────────────────────────────────────────────────────────┐
│ Trigger: Recipient declines meeting request                │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: requesterId,                                    │
│   type: "request_declined",                                │
│   title: "Meeting Request Declined",                       │
│   body: `${recipient.full_name} has declined your meeting` │
│         + ` request regarding "${topic}".`,                │
│   link: "/meetings",                                       │
│   related_entity_id: meetingRequestId                      │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ ❌ Meeting Request Declined                                │
│ Maria Dubois has declined your meeting request regarding   │
│ "Trade Agreement Discussion".                              │
│ Jan 15, 11:00 AM                                           │
│                                                             │
│ Preference Key: request_status_update                      │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

4. MEETING_UPDATED
┌────────────────────────────────────────────────────────────┐
│ Trigger: Meeting details modified (topic, duration, etc.)  │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: otherParticipantId,                             │
│   type: "meeting_updated",                                 │
│   title: "Meeting Details Updated",                        │
│   body: `${editor.full_name} has updated the details for ` │
│         + `your meeting "${newTopic}".`,                   │
│   link: "/meetings",                                       │
│   related_entity_id: meetingRequestId                      │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ ✏️ Meeting Details Updated                                 │
│ John Doe has updated the details for your meeting          │
│ "U.S.-France Climate Policy Summit".                       │
│ Jan 16, 09:00 AM                                           │
│                                                             │
│ Preference Key: request_status_update                      │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

5. NEW_MESSAGE
┌────────────────────────────────────────────────────────────┐
│ Trigger: User sends chat message                           │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: recipientId,                                    │
│   type: "new_message",                                     │
│   title: "New Message",                                    │
│   body: `You have a new message from ${sender.full_name}.`,│
│   link: `/chat?request=${meetingRequestId}`,               │
│   related_entity_id: messageId                             │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ 💬 New Message                                             │
│ You have a new message from John Doe.                      │
│ Jan 20, 09:30 AM                                           │
│                                                             │
│ Preference Key: new_message                                │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

6. BOOKING_CONFIRMED
┌────────────────────────────────────────────────────────────┐
│ Trigger: Venue booked for meeting                          │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: participantId,                                  │
│   type: "booking_confirmed",                               │
│   title: "Venue Confirmed",                                │
│   body: `${roomName} has been booked for your meeting "${  │
│     topic}" at ${formattedTime}`,                          │
│   link: "/schedule",                                       │
│   related_entity_id: bookingId                             │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ 📍 Venue Confirmed                                         │
│ Board Room has been booked for your meeting                │
│ "U.S.-France Climate Cooperation Framework"                │
│ at Jan 20, 10:30 AM                                        │
│ Jan 15, 10:15 AM                                           │
│                                                             │
│ Preference Key: booking_confirmed                          │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

7. BOOKING_CANCELLED
┌────────────────────────────────────────────────────────────┐
│ Trigger: Admin cancels booking or meeting cancelled        │
│                                                             │
│ Code:                                                       │
│ await Notification.create({                                │
│   user_id: participantId,                                  │
│   type: "booking_cancelled",                               │
│   title: "Booking Cancelled",                              │
│   body: `The venue booking for "${roomName}" on ${date} ` │
│         + `has been cancelled.`,                           │
│   link: "/meetings",                                       │
│   related_entity_id: bookingId                             │
│ });                                                         │
│                                                             │
│ Display:                                                    │
│ ⚠️ Booking Cancelled                                       │
│ The venue booking for "Board Room" on Jan 22               │
│ has been cancelled.                                        │
│ Jan 16, 14:00 PM                                           │
│                                                             │
│ Preference Key: booking_confirmed                          │
│ Default: ON                                                │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
NOTIFICATION BELL COMPONENT
══════════════════════════════════════════════════════════════

File: components/notifications/NotificationBell.jsx

Component Logic:
┌────────────────────────────────────────────────────────────┐
│ export default function NotificationBell() {               │
│   const [notifications, setNotifications] = useState([]);  │
│   const [currentUser, setCurrentUser] = useState(null);    │
│   const [isOpen, setIsOpen] = useState(false);             │
│   const [unreadCount, setUnreadCount] = useState(0);       │
│                                                             │
│   // Initialize                                            │
│   useEffect(() => {                                        │
│     const fetchUser = async () => {                        │
│       const user = await User.me();                        │
│       setCurrentUser(user);                                │
│     };                                                      │
│     fetchUser();                                           │
│   }, []);                                                   │
│                                                             │
│   // Poll for notifications                                │
│   useEffect(() => {                                        │
│     if (!currentUser) return;                              │
│                                                             │
│     const fetchNotifications = async () => {               │
│       const fetched = await Notification.filter(           │
│         { user_id: currentUser.id },                       │
│         '-created_date',                                   │
│         20                                                  │
│       );                                                    │
│       setNotifications(fetched);                           │
│                                                             │
│       const unread = fetched.filter(n => !n.is_read);      │
│       setUnreadCount(unread.length);                       │
│     };                                                      │
│                                                             │
│     fetchNotifications();                                  │
│     const interval = setInterval(fetchNotifications, 15000);│
│     // Poll every 15 seconds                               │
│                                                             │
│     return () => clearInterval(interval);                  │
│   }, [currentUser, isOpen]);                               │
│                                                             │
│   // Mark as read                                          │
│   const handleMarkAsRead = async (id) => {                 │
│     await Notification.update(id, { is_read: true });      │
│     setNotifications(                                      │
│       notifications.map((n) =>                             │
│         n.id === id ? { ...n, is_read: true } : n          │
│       )                                                     │
│     );                                                      │
│     setUnreadCount(prev => Math.max(0, prev - 1));         │
│   };                                                        │
│                                                             │
│   // Mark all as read                                      │
│   const handleMarkAllAsRead = async () => {                │
│     const unreadIds = notifications                        │
│       .filter((n) => !n.is_read)                           │
│       .map((n) => n.id);                                   │
│                                                             │
│     await Promise.all(                                     │
│       unreadIds.map((id) =>                                │
│         Notification.update(id, { is_read: true })         │
│       )                                                     │
│     );                                                      │
│                                                             │
│     setNotifications(                                      │
│       notifications.map((n) => ({ ...n, is_read: true }))  │
│     );                                                      │
│     setUnreadCount(0);                                     │
│   };                                                        │
│                                                             │
│   return (                                                  │
│     <Popover open={isOpen} onOpenChange={setIsOpen}>       │
│       <PopoverTrigger asChild>                             │
│         <Button variant="ghost" size="icon" className="relative">│
│           <Bell className="h-5 w-5" />                     │
│           {unreadCount > 0 && (                            │
│             <Badge className="absolute -top-1 -right-1">   │
│               {unreadCount > 9 ? '9+' : unreadCount}       │
│             </Badge>                                        │
│           )}                                                │
│         </Button>                                           │
│       </PopoverTrigger>                                     │
│       <PopoverContent>                                     │
│         {/* Notification list */}                          │
│       </PopoverContent>                                    │
│     </Popover>                                             │
│   );                                                        │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Visual States:
┌────────────────────────────────────────────────────────────┐
│ No Unread Notifications:                                   │
│ 🔔 (gray bell, no badge)                                   │
│                                                             │
│ 1-9 Unread:                                                │
│ 🔔 [3] (red badge with count)                              │
│                                                             │
│ 10+ Unread:                                                │
│ 🔔 [9+] (red badge shows 9+)                               │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
NOTIFICATION PREFERENCES
══════════════════════════════════════════════════════════════

Managed in: pages/Profile.js

Default Preferences:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   new_meeting_request: true,                               │
│   request_status_update: true,                             │
│   new_message: true,                                       │
│   booking_confirmed: true                                  │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

User Interface:
┌────────────────────────────────────────────────────────────┐
│ Notification Preferences                                   │
│ Choose which platform notifications you want to receive    │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ [ON]  New Meeting Request                             │  │
│ │       Notify me when a user sends me a meeting request│  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ [ON]  Request Status Update                           │  │
│ │       Notify me when a user accepts or declines my    │  │
│ │       request                                         │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ [ON]  New Chat Message                                │  │
│ │       Notify me when I receive a new chat message     │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │ [ON]  Booking Confirmed                               │  │
│ │       Notify me when a venue is booked for my meeting │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ [Save Preferences]                                         │
└────────────────────────────────────────────────────────────┘

Preference Checking Logic:
┌────────────────────────────────────────────────────────────┐
│ Before creating notification:                              │
│                                                             │
│ const recipient = await User.get(recipientId);             │
│                                                             │
│ if (recipient.notification_preferences?.new_meeting_request│
│     !== false) {                                           │
│   // Create notification                                   │
│   await Notification.create({...});                        │
│ }                                                           │
│                                                             │
│ Logic:                                                      │
│ • If preference is true → Send notification                │
│ • If preference is false → Don't send                      │
│ • If preference not set → Send (default: true)             │
│ • If notification_preferences is null → Send all           │
└────────────────────────────────────────────────────────────┘
11. Security Features
┌─────────────────────────────────────────────────────────────┐
│              SECURITY ARCHITECTURE                           │
└─────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
AUTHENTICATION
══════════════════════════════════════════════════════════════

Google OAuth 2.0:
┌────────────────────────────────────────────────────────────┐
│ • Managed by Base44 platform                               │
│ • No password storage in application                        │
│ • Secure token-based authentication                         │
│ • Automatic session management                              │
│                                                             │
│ Flow:                                                       │
│ 1. User clicks "Sign in with Google"                       │
│ 2. Redirected to Google OAuth consent screen               │
│ 3. User grants permissions                                 │
│ 4. Google returns authorization code                        │
│ 5. Base44 exchanges code for access token                   │
│ 6. Base44 creates/updates user record                       │
│ 7. Base44 creates session cookie                           │
│ 8. User redirected to app with active session               │
│                                                             │
│ Session Management:                                         │
│ • HTTP-only cookies (XSS protection)                        │
│ • Secure flag (HTTPS only)                                  │
│ • SameSite=Strict (CSRF protection)                         │
│ • Auto-renewal on activity                                  │
│ • 7-day expiration on inactivity                            │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
AUTHORIZATION (ROW-LEVEL SECURITY)
══════════════════════════════════════════════════════════════

Every database entity has RLS policies that restrict access:

User Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": {                                              │
│       "$or": [                                             │
│         { "id": "{{user.id}}" },        // Own profile     │
│         {                                                   │
│           "profile_completed": true,   // Completed profiles│
│           "consent_given": true,       // With consent      │
│           "is_profile_hidden": false   // Not hidden        │
│         },                                                  │
│         { "user_condition": { "role": "admin" } } // Admins │
│       ]                                                     │
│     },                                                      │
│     "write": {                                             │
│       "$or": [                                             │
│         { "id": "{{user.id}}" },        // Own profile     │
│         { "user_condition": { "role": "admin" } } // Admins │
│       ]                                                     │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • Users can read their own profile                          │
│ • Users can read complete, consented, visible profiles      │
│ • Users can only write their own profile                    │
│ • Admins can read/write all profiles                        │
└────────────────────────────────────────────────────────────┘

MeetingRequest Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": {                                              │
│       "$or": [                                             │
│         { "requester_id": "{{user.id}}" },                 │
│         { "recipient_ids": { "$in": ["{{user.id}}"] } },   │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     },                                                      │
│     "write": {                                             │
│       "$or": [                                             │
│         { "requester_id": "{{user.id}}" },                 │
│         { "recipient_ids": { "$in": ["{{user.id}}"] } },   │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • Users can only see their own meeting requests             │
│ • Users can only modify meetings they're part of            │
│ • Admins can see/modify all meetings                        │
└────────────────────────────────────────────────────────────┘

ChatMessage Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": {                                              │
│       "$or": [                                             │
│         { "sender_id": "{{user.id}}" },                    │
│         { "recipient_id": "{{user.id}}" },                 │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     },                                                      │
│     "write": {                                             │
│       "$or": [                                             │
│         { "sender_id": "{{user.id}}" },                    │
│         { "recipient_id": "{{user.id}}" },                 │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • Users can only see their own messages                     │
│ • Cannot see messages between other users                   │
│ • Only conversation participants can modify messages        │
└────────────────────────────────────────────────────────────┘

VenueBooking Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": {                                              │
│       "$or": [                                             │
│         { "booked_by": "{{user.id}}" },                    │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     },                                                      │
│     "write": {                                             │
│       "$or": [                                             │
│         { "booked_by": "{{user.id}}" },                    │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • Users can only see their own bookings                     │
│ • Users can only cancel their own bookings                  │
│ • Admins can see/manage all bookings                        │
└────────────────────────────────────────────────────────────┘

Notification Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": {                                              │
│       "$or": [                                             │
│         { "user_id": "{{user.id}}" },                      │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     },                                                      │
│     "write": {                                             │
│       "$or": [                                             │
│         { "user_id": "{{user.id}}" },                      │
│         { "user_condition": { "role": "admin" } }          │
│       ]                                                     │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • Users can only see their own notifications                │
│ • Users can only mark their own notifications as read       │
│ • Cannot access other users' notifications                  │
└────────────────────────────────────────────────────────────┘

VenueRoom Entity RLS:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "rls": {                                                  │
│     "read": "*",  // Anyone can read rooms                 │
│     "write": {                                             │
│       "user_condition": { "role": "admin" }                │
│     }                                                       │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Effect:                                                     │
│ • All authenticated users can view rooms                    │
│ • Only admins can create/edit/delete rooms                  │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
DATA PROTECTION & PRIVACY
══════════════════════════════════════════════════════════════

GDPR Compliance:
┌────────────────────────────────────────────────────────────┐
│ 1. Consent Management                                       │
│    • Explicit consent required before platform use          │
│    • Clear privacy notice explaining data usage             │
│    • Consent tracked in database (consent_given field)      │
│    • Users can withdraw consent (contact admin)             │
│                                                             │
│ 2. Data Minimization                                       │
│    • Only collect necessary data for platform function      │
│    • No sensitive personal data collected                   │
│    • Optional fields marked clearly                         │
│                                                             │
│ 3. Right to Access                                         │
│    • Users can view all their data in profile               │
│    • Export functionality for admin reports                 │
│                                                             │
│ 4. Right to Rectification                                  │
│    • Users can edit their profile anytime                   │
│    • Admins can correct data on behalf of users             │
│                                                             │
│ 5. Right to Erasure                                        │
│    • Users can request account deletion via admin           │
│    • Admin can delete user records                          │
│    • Related data (meetings, messages) handled              │
│                                                             │
│ 6. Data Portability                                        │
│    • Export functionality available                         │
│    • Standard JSON/CSV formats                              │
│                                                             │
│ 7. Privacy by Design                                       │
│    • RLS enforced at database level                         │
│    • Encrypted communications                               │
│    • Secure authentication via Google OAuth                 │
│    • Profile hiding option available                        │
└────────────────────────────────────────────────────────────┘

Profile Privacy Controls:
┌────────────────────────────────────────────────────────────┐
│ is_profile_hidden Feature:                                 │
│                                                             │
│ When enabled:                                              │
│ • User profile not visible in directory (Delegates page)    │
│ • Cannot be found via search                                │
│ • Name not shown in "Browse Users" section                  │
│ • Still can send meeting requests if they have IDs          │
│ • Still can receive meeting requests                        │
│ • Still visible to meeting participants                     │
│ • Profile visible in accepted meetings                      │
│                                                             │
│ Implementation:                                             │
│ const visibleUsers = allUsers.filter(u =>                  │
│   u.profile_completed &&                                   │
│   u.consent_given &&                                       │
│   !u.is_profile_hidden   // ← Filter condition            │
│ );                                                          │
└────────────────────────────────────────────────────────────┘

══════════════════════════════════════════════════════════════
SECURITY BEST PRACTICES IMPLEMENTED
══════════════════════════════════════════════════════════════

1. Input Validation:
┌────────────────────────────────────────────────────────────┐
│ • All forms validate input before submission                │
│ • Required fields enforced                                  │
│ • Data type validation (email, date, numbers)               │
│ • Maximum length restrictions                               │
│ • No SQL injection possible (parameterized queries)         │
│ • No XSS attacks (React auto-escapes)                       │
└────────────────────────────────────────────────────────────┘

2. API Security:
┌────────────────────────────────────────────────────────────┐
│ • All API calls require authentication                      │
│ • Session token in HTTP-only cookie                         │
│ • HTTPS enforced (no HTTP allowed)                          │
│ • CORS properly configured                                  │
│ • Rate limiting on API endpoints                            │
└────────────────────────────────────────────────────────────┘

3. Frontend Security:
┌────────────────────────────────────────────────────────────┐
│ • No sensitive data stored in localStorage                  │
│ • No sensitive data in URL parameters                       │
│ • Auto-logout on session expiry                             │
│ • No inline scripts (CSP-compliant)                         │
│ • Dependencies regularly updated                            │
└────────────────────────────────────────────────────────────┘

4. Database Security:
┌────────────────────────────────────────────────────────────┐
│ • RLS enforced on all entities                              │
│ • No direct database access from frontend                   │
│ • All queries through Base44 SDK                            │
│ • Automatic SQL injection protection                        │
│ • Encrypted at rest                                         │
│ • Encrypted in transit (TLS 1.3)                            │
└────────────────────────────────────────────────────────────┘

5. Access Control:
┌────────────────────────────────────────────────────────────┐
│ • Role-based access (admin vs user)                         │
│ • Admin-only pages protected:                               │
│   if (currentUser?.role !== 'admin') {                     │
│     return <AccessDenied />;                               │
│   }                                                         │
│ • UI elements hidden based on role                          │
│ • Backend validates role on every request                   │
└────────────────────────────────────────────────────────────┘