7. Core Functionalities
7.1 User Profile Management
┌─────────────────────────────────────────────────────────────┐
│              PROFILE MANAGEMENT FUNCTIONALITY                │
└─────────────────────────────────────────────────────────────┘

File: pages/Profile.js

Component Structure:
┌────────────────────────────────────────────────────────────┐
│ Profile Page                                                │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Header                                              │   │
│ │ - Title: "User Profile"                            │   │
│ │ - Status Badge (if profile complete)               │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 1. Data Protection & Consent Section                │   │
│ │    - Privacy notice                                 │   │
│ │    - Consent checkbox ⚠️ Required                   │   │
│ │    - Warning if not given                           │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 2. Basic Information Section                        │   │
│ │    Fields:                                          │   │
│ │    - Full Name (read-only, from Google)            │   │
│ │    - Email (read-only, from Google)                │   │
│ │    - Representation Type ⚠️ Required                │   │
│ │      (dropdown: gov, ngo, private, academic, etc.)  │   │
│ │    - Country/Entity ⚠️ Required                     │   │
│ │    - Job Title ⚠️ Required                          │   │
│ │    - Organization ⚠️ Required                       │   │
│ │    - Industry Sector ⚠️ Required                    │   │
│ │    - LinkedIn Profile (optional)                    │   │
│ │    - Biography ⚠️ Required (textarea, 500 chars)    │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 3. Topical Interests Section                        │   │
│ │    - Description text                               │   │
│ │    - Quick-add buttons (12 sample topics)           │   │
│ │    - Added interests list with:                     │   │
│ │      * Topic name                                   │   │
│ │      * Priority dropdown (High/Medium/Low)          │   │
│ │      * Delete button                                │   │
│ │    ⚠️ At least 1 required                           │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 4. Geographical Interests Section                   │   │
│ │    - Description text                               │   │
│ │    - Quick-add buttons (10 sample regions)          │   │
│ │    - Added interests list with:                     │   │
│ │      * Region name                                  │   │
│ │      * Priority dropdown (High/Medium/Low)          │   │
│ │      * Delete button                                │   │
│ │    ⚠️ At least 1 required                           │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 5. Notification Preferences Section                 │   │
│ │    Toggles for:                                     │   │
│ │    - New Meeting Request (default: ON)             │   │
│ │    - Request Status Update (default: ON)           │   │
│ │    - New Chat Message (default: ON)                │   │
│ │    - Booking Confirmed (default: ON)               │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ 6. Privacy Preferences Section                      │   │
│ │    - Hide Profile Toggle                            │   │
│ │      * Description of effect                        │   │
│ │      * Warning message when enabled                 │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Save Button (bottom right)                          │   │
│ │ - Disabled if consent not given                     │   │
│ │ - Shows loading state when saving                   │   │
│ └─────────────────────────────────────────────────────┘   │
└────────────────────────────────────────────────────────────┘

Profile Completion Logic:
┌────────────────────────────────────────────────────────────┐
│ A profile is considered "complete" when:                    │
│                                                             │
│ 1. consent_given = true                                    │
│ 2. representation_type is set                              │
│ 3. country is set                                          │
│ 4. job_title is set                                        │
│ 5. organization is set                                     │
│ 6. industry_sector is set                                  │
│ 7. biography is set (not empty)                            │
│ 8. topical_interests has at least 1 item                   │
│ 9. geographical_interests has at least 1 item              │
│                                                             │
│ profile_completed is auto-calculated on save               │
└────────────────────────────────────────────────────────────┘

Sample Topics (Quick Add):
┌────────────────────────────────────────────────────────────┐
│ ["Climate Policy", "Trade Relations", "Digital Governance",│
│  "Human Rights", "Economic Development", "Security",       │
│  "Health Policy", "Education", "Energy Transition",        │
│  "Migration", "Technology Transfer", "Cultural Exchange"]  │
└────────────────────────────────────────────────────────────┘

Sample Regions (Quick Add):
┌────────────────────────────────────────────────────────────┐
│ ["North America", "South America", "Europe", "Africa",     │
│  "Asia-Pacific", "Middle East", "Central Asia",            │
│  "Caribbean", "Nordic Countries", "ASEAN"]                 │
└────────────────────────────────────────────────────────────┘

State Management:
┌────────────────────────────────────────────────────────────┐
│ const [currentUser, setCurrentUser] = useState(null);      │
│ const [formData, setFormData] = useState({});              │
│ const [consentGiven, setConsentGiven] = useState(false);   │
│ const [saving, setSaving] = useState(false);               │
│ const [loading, setLoading] = useState(true);              │
│                                                             │
│ // Form update handlers                                    │
│ const handleInputChange = (field, value) => {              │
│   setFormData(prev => ({ ...prev, [field]: value }));     │
│ };                                                          │
│                                                             │
│ // Interest management                                     │
│ const addInterest = (type, item) => {                      │
│   const interests = formData[type] || [];                  │
│   if (!interests.find(i => i.topic === item)) {           │
│     const newInterest = type === 'topical_interests'       │
│       ? { topic: item, priority: 'medium' }               │
│       : { region: item, priority: 'medium' };             │
│     setFormData(prev => ({                                 │
│       ...prev,                                             │
│       [type]: [...interests, newInterest]                  │
│     }));                                                    │
│   }                                                         │
│ };                                                          │
│                                                             │
│ const removeInterest = (type, index) => {                  │
│   const interests = formData[type] || [];                  │
│   setFormData(prev => ({                                   │
│     ...prev,                                               │
│     [type]: interests.filter((_, i) => i !== index)        │
│   }));                                                      │
│ };                                                          │
│                                                             │
│ const updateInterestPriority = (type, index, priority) => {│
│   const interests = [...(formData[type] || [])];          │
│   interests[index].priority = priority;                    │
│   setFormData(prev => ({ ...prev, [type]: interests }));  │
│ };                                                          │
│                                                             │
│ // Notification preference handler                         │
│ const handleNotificationChange = (key, value) => {         │
│   setFormData(prev => ({                                   │
│     ...prev,                                               │
│     notification_preferences: {                            │
│       ...prev.notification_preferences,                    │
│       [key]: value                                         │
│     }                                                       │
│   }));                                                      │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Save Process:
┌────────────────────────────────────────────────────────────┐
│ const handleSave = async () => {                           │
│   setSaving(true);                                         │
│   try {                                                     │
│     // Calculate if profile is complete                    │
│     const profileComplete = !!(                            │
│       formData.representation_type &&                      │
│       formData.country &&                                  │
│       formData.job_title &&                                │
│       formData.organization &&                             │
│       formData.industry_sector &&                          │
│       formData.biography &&                                │
│       formData.topical_interests?.length > 0 &&            │
│       formData.geographical_interests?.length > 0          │
│     );                                                      │
│                                                             │
│     // Update user data                                    │
│     await User.updateMyUserData({                          │
│       ...formData,                                         │
│       consent_given: consentGiven,                         │
│       profile_completed: profileComplete                   │
│     });                                                     │
│                                                             │
│     // Reload to reflect changes                           │
│     await loadUserData();                                  │
│                                                             │
│     // Show success message (future: toast notification)   │
│   } catch (error) {                                        │
│     console.error("Error saving profile:", error);         │
│     // Show error message                                  │
│   }                                                         │
│   setSaving(false);                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Effects of Profile States:
┌────────────────────────────────────────────────────────────┐
│ State: consent_given = false                               │
│   Effect: User cannot access:                              │
│     - Delegates directory                                  │
│     - Meeting request features                             │
│     - Chat                                                 │
│   Shows: Red warning banner on Dashboard                   │
│                                                             │
│ State: profile_completed = false                           │
│   Effect: User profile not visible in Delegates directory  │
│   Shows: Orange warning banner on Dashboard                │
│                                                             │
│ State: is_profile_hidden = true                            │
│   Effect: User profile not visible in Delegates directory  │
│   Shows: Blue info banner on Dashboard                     │
│   Note: User can still send/receive meeting requests       │
│                                                             │
│ State: Both consent + profile complete + not hidden        │
│   Effect: Full access to all features                      │
│   Shows: Green "Profile Complete" badge                    │
└────────────────────────────────────────────────────────────┘
7.2 Delegate Directory & Discovery
┌─────────────────────────────────────────────────────────────┐
│            DELEGATE DIRECTORY FUNCTIONALITY                  │
└─────────────────────────────────────────────────────────────┘

File: pages/Delegates.js

Page Structure:
┌────────────────────────────────────────────────────────────┐
│ Delegates Directory Page                                    │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Header                                              │   │
│ │ - Title: "User Directory"                          │   │
│ │ - Subtitle: "Connect with verified professionals"  │   │
│ │ - User count badge                                 │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Search & Filter Bar                                 │   │
│ │ ┌─────────────────────────┬─────────────────────┐  │   │
│ │ │ [🔍] Search box         │ [Filter] Dropdown  │  │   │
│ │ │ "Search by name, org..."│ Representation Type │  │   │
│ │ └─────────────────────────┴─────────────────────┘  │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ User Cards Grid (3 columns on desktop)              │   │
│ │                                                      │   │
│ │ ┌─────────┐ ┌─────────┐ ┌─────────┐               │   │
│ │ │ User 1  │ │ User 2  │ │ User 3  │               │   │
│ │ │ Card    │ │ Card    │ │ Card    │               │   │
│ │ └─────────┘ └─────────┘ └─────────┘               │   │
│ │ ┌─────────┐ ┌─────────┐ ┌─────────┐               │   │
│ │ │ User 4  │ │ User 5  │ │ User 6  │               │   │
│ │ └─────────┘ └─────────┘ └─────────┘               │   │
│ │ ...                                                 │   │
│ └─────────────────────────────────────────────────────┘   │
└────────────────────────────────────────────────────────────┘

User Card Design:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌────┐                            [LinkedIn Icon]    │  │
│ │ │ JS │  John Smith                                    │  │
│ │ └────┘  Director of Climate Policy                   │  │
│ │                                                        │  │
│ │ 🏢 Department of State                                │  │
│ │ 🌍 United States                                      │  │
│ │                                                        │  │
│ │ [government] [Environmental Policy]                   │  │
│ │                                                        │  │
│ │ Professional with 15 years experience in climate...  │  │
│ │                                                        │  │
│ │ Key Interests:                                        │  │
│ │ [Climate Finance] [Carbon Markets] [+2 more]         │  │
│ │                                                        │  │
│ │ ┌──────────────────────────────────────────────────┐ │  │
│ │ │        [✉️ Request Meeting]                      │ │  │
│ │ └──────────────────────────────────────────────────┘ │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

User Filtering Logic:
┌────────────────────────────────────────────────────────────┐
│ Step 1: Load all users                                     │
│   const allUsers = await User.list();                      │
│                                                             │
│ Step 2: Filter for visibility                              │
│   const availableUsers = allUsers.filter(u =>              │
│     u.id !== currentUser.id &&              // Not self    │
│     u.profile_completed &&                  // Complete    │
│     u.consent_given &&                      // Consented   │
│     !u.is_profile_hidden                    // Not hidden  │
│   );                                                        │
│                                                             │
│ Step 3: Apply search term                                  │
│   if (searchTerm) {                                        │
│     filtered = filtered.filter(user =>                     │
│       user.full_name?.toLowerCase().includes(searchTerm) ||│
│       user.organization?.toLowerCase().includes(search) || │
│       user.country?.toLowerCase().includes(searchTerm) ||  │
│       user.job_title?.toLowerCase().includes(searchTerm)   │
│     );                                                      │
│   }                                                         │
│                                                             │
│ Step 4: Apply type filter                                  │
│   if (typeFilter !== 'all') {                              │
│     filtered = filtered.filter(user =>                     │
│       user.representation_type === typeFilter              │
│     );                                                      │
│   }                                                         │
│                                                             │
│ Step 5: Sort (optional - alphabetical by name)             │
│   filtered.sort((a, b) =>                                  │
│     a.full_name.localeCompare(b.full_name)                 │
│   );                                                        │
└────────────────────────────────────────────────────────────┘

Meeting Request Dialog:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  Request Meeting with John Smith                     │  │
│ │                                                        │  │
│ │  Proposed Topic *                                     │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ e.g., Climate Policy Coordination              │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Duration (minutes)                                   │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [v] 45 minutes                                 │  │  │
│ │  │     30 minutes                                 │  │  │
│ │  │     60 minutes                                 │  │  │
│ │  │     90 minutes                                 │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Personal Message                                     │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Introduce yourself and explain why you'd      │  │  │
│ │  │ like to meet...                                │  │  │
│ │  │                                                │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  [Cancel]                        [Send Request]       │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Send Meeting Request Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User clicks "Request Meeting" on a card                 │
│    ↓                                                        │
│ 2. Dialog opens with pre-filled recipient                  │
│    - selectedUser is set                                   │
│    ↓                                                        │
│ 3. User fills form:                                        │
│    - proposed_topic (required)                             │
│    - proposed_duration (default: 45)                       │
│    - personal_message (optional)                           │
│    ↓                                                        │
│ 4. User clicks "Send Request"                              │
│    ↓                                                        │
│ 5. Frontend validation:                                    │
│    - Topic not empty                                       │
│    - Duration selected                                     │
│    ↓                                                        │
│ 6. Generate unique meeting code:                           │
│    const meetingCode =                                     │
│      Math.random().toString(36)                            │
│        .substring(2, 10).toUpperCase();                    │
│    // Example: "X7K9M2N4"                                  │
│    ↓                                                        │
│ 7. Create meeting request:                                 │
│    const newRequest = await MeetingRequest.create({       │
│      requester_id: currentUser.id,                         │
│      recipient_ids: [selectedUser.id],                     │
│      meeting_type: 'single',                               │
│      personal_message: formData.personal_message,          │
│      proposed_topic: formData.proposed_topic,              │
│      proposed_duration: formData.proposed_duration,        │
│      meeting_code: meetingCode,                            │
│      status: 'pending'                                     │
│    });                                                      │
│    ↓                                                        │
│ 8. Create notification for recipient:                      │
│    const recipient = await User.get(selectedUser.id);      │
│    if (recipient.notification_preferences                  │
│         ?.new_meeting_request !== false) {                 │
│      await Notification.create({                           │
│        user_id: selectedUser.id,                           │
│        type: 'new_meeting_request',                        │
│        title: 'New Meeting Request',                       │
│        body: `You have received a new meeting request     │
│               from ${currentUser.full_name}.               │
│               Meeting Code: ${meetingCode}`,               │
│        link: '/meetings',                                  │
│        related_entity_id: newRequest.id                    │
│      });                                                    │
│    }                                                        │
│    ↓                                                        │
│ 9. Close dialog and show success message                   │
│    ↓                                                        │
│ 10. Reset form state                                       │
└────────────────────────────────────────────────────────────┘

Access Control:
┌────────────────────────────────────────────────────────────┐
│ Can Access Delegates Directory:                            │
│   ✅ User with consent_given = true                        │
│   ✅ User with profile_completed = true                    │
│   ✅ Admin users (always)                                  │
│                                                             │
│ Cannot Access:                                              │
│   ❌ User without consent                                  │
│   ❌ User with incomplete profile                          │
│                                                             │
│ If user tries to access without permission:                │
│   - Show orange alert banner                               │
│   - Message: "Please complete your consent process         │
│              and profile to browse users"                  │
│   - Link to Profile page                                   │
└────────────────────────────────────────────────────────────┘

Empty States:
┌────────────────────────────────────────────────────────────┐
│ No Users Found (after filtering):                          │
│   ┌──────────────────────────────────────────────────┐    │
│   │              [👥 Icon]                           │    │
│   │                                                   │    │
│   │         No users found                           │    │
│   │                                                   │    │
│   │  Try adjusting your search filters or           │    │
│   │  check back later                                │    │
│   └──────────────────────────────────────────────────┘    │
│                                                             │
│ Access Restricted:                                         │
│   ┌──────────────────────────────────────────────────┐    │
│   │              [🔒 Icon]                           │    │
│   │                                                   │    │
│   │      Access Restricted                           │    │
│   │                                                   │    │
│   │  Please complete your consent process and        │    │
│   │  profile to browse users.                        │    │
│   │                                                   │    │
│   │  [Complete Profile →]                            │    │
│   └──────────────────────────────────────────────────┘    │
└────────────────────────────────────────────────────────────┘
7.3 Meeting Management System
┌─────────────────────────────────────────────────────────────┐
│             MEETING MANAGEMENT FUNCTIONALITY                 │
└─────────────────────────────────────────────────────────────┘

File: pages/Meetings.js

Page Structure with Tabs:
┌────────────────────────────────────────────────────────────┐
│ Meetings Page                                               │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Header                                              │   │
│ │ - Title: "Meeting Management"                      │   │
│ │ - Pending badge (if any pending)                   │   │
│ │ - [+ Request Meeting] button                       │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Tabs Navigation                                     │   │
│ │ [Pending Approval (3)] [Request History] [Accepted] │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ Tab Content Area (changes based on selected tab)          │
└────────────────────────────────────────────────────────────┘

TAB 1: Pending Approval
┌────────────────────────────────────────────────────────────┐
│ Purpose: Show meeting requests awaiting user's response    │
│ Filter: recipient_ids includes currentUser.id AND          │
│         status = 'pending'                                 │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ⚠️ Action Required Banner                            │  │
│ │ "You have 3 meeting requests awaiting your response" │  │
│ │ "Please review and approve or decline each request"  │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Meeting Request Card (Detailed):                           │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌────┐                                                │  │
│ │ │ JS │  Meeting Request from John Smith              │  │
│ │ └────┘  Director at Department of State              │  │
│ │         United States                                 │  │
│ │                                                        │  │
│ │  Received: January 15, 2025 at 10:30 AM              │  │
│ │                                                        │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ 📅 Proposed Topic                              │  │  │
│ │  │ Bilateral Trade Agreement Discussion           │  │  │
│ │  │                                                 │  │  │
│ │  │ ⏱️ Duration: 45 minutes                         │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ 💬 Personal Message                            │  │  │
│ │  │ "I'd like to discuss potential cooperation on  │  │  │
│ │  │ renewable energy trade..."                     │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  [Decline Request]        [Accept Meeting ✓]         │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Empty State (if no pending):                               │
│   [✓ Icon] All caught up!                                 │
│   You don't have any pending meeting requests             │
└────────────────────────────────────────────────────────────┘

Accept Meeting Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User clicks "Accept Meeting" button                     │
│    ↓                                                        │
│ 2. Update meeting request status:                          │
│    await MeetingRequest.update(requestId, {                │
│      status: 'accepted'                                    │
│    });                                                      │
│    ↓                                                        │
│ 3. Create notification for requester:                      │
│    const request = await MeetingRequest.get(requestId);    │
│    const requester = await User.get(request.requester_id); │
│    if (requester.notification_preferences                  │
│         ?.request_status_update !== false) {               │
│      await Notification.create({                           │
│        user_id: request.requester_id,                      │
│        type: 'request_accepted',                           │
│        title: 'Meeting Request Accepted',                  │
│        body: `${currentUser.full_name} accepted your      │
│               meeting request regarding                    │
│               "${request.proposed_topic}".`,               │
│        link: '/meetings',                                  │
│        related_entity_id: requestId                        │
│      });                                                    │
│    }                                                        │
│    ↓                                                        │
│ 4. Reload page data to reflect changes                     │
│    ↓                                                        │
│ 5. Request moves from "Pending" to "Accepted" tab          │
│    ↓                                                        │
│ 6. Show success message (future: toast)                    │
└────────────────────────────────────────────────────────────┘

Decline Meeting Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User clicks "Decline Request" button                    │
│    ↓                                                        │
│ 2. Update meeting request status:                          │
│    await MeetingRequest.update(requestId, {                │
│      status: 'declined'                                    │
│    });                                                      │
│    ↓                                                        │
│ 3. Create notification for requester:                      │
│    await Notification.create({                             │
│      user_id: request.requester_id,                        │
│      type: 'request_declined',                             │
│      title: 'Meeting Request Declined',                    │
│      body: `${currentUser.full_name} declined your        │
│             meeting request.`,                             │
│      link: '/meetings'                                     │
│    });                                                      │
│    ↓                                                        │
│ 4. Reload page data                                        │
│    ↓                                                        │
│ 5. Request moves to "Request History" tab                  │
└────────────────────────────────────────────────────────────┘

TAB 2: Request History
┌────────────────────────────────────────────────────────────┐
│ Purpose: Show all non-accepted requests (sent/received)    │
│ Filter: (requester_id = currentUser.id OR                  │
│          recipient_ids includes currentUser.id) AND        │
│         status NOT IN ('accepted', 'pending-incoming')     │
│                                                             │
│ Includes:                                                   │
│   - Sent requests (any status except accepted)             │
│   - Declined requests (received)                           │
│   - Cancelled requests                                     │
│                                                             │
│ Card Design (Compact):                                     │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌────┐                                                │  │
│ │ │ MS │  To: Maria Silva                   [declined] │  │
│ │ └────┘  Climate Policy Analyst                       │  │
│ │                                                        │  │
│ │  📅 Bilateral Trade Agreement Discussion             │  │
│ │  ⏱️ 45 minutes • Sent Jan 15, 2025                   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Status Badge Colors:                                       │
│   - pending: Orange                                        │
│   - declined: Red                                          │
│   - cancelled: Gray                                        │
│                                                             │
│ Empty State:                                               │
│   [📅 Icon] No request history                            │
│   Sent, declined, and cancelled requests will appear here │
└────────────────────────────────────────────────────────────┘

TAB 3: Accepted Meetings
┌────────────────────────────────────────────────────────────┐
│ Purpose: Show confirmed meetings with action buttons        │
│ Filter: (requester_id = currentUser.id OR                  │
│          recipient_ids includes currentUser.id) AND        │
│         status = 'accepted'                                │
│                                                             │
│ Card Design (With Actions):                                │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌────┐                                                │  │
│ │ │ MS │  Meeting with Maria Silva                     │  │
│ │ └────┘  Climate Policy Analyst at UN                 │  │
│ │                                                        │  │
│ │  📅 Bilateral Trade Agreement Discussion             │  │
│ │      Code: X7K9M2N4                                   │  │
│ │  ⏱️ 45 minutes • Confirmed Jan 15, 2025              │  │
│ │  📍 Booked: Conference Room A at 10:00 AM            │  │
│ │                                                        │  │
│ │  [Modify] [💬 Chat] [📍 Book Venue] [Cancel]         │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Action Buttons:                                            │
│   1. Modify - Opens dialog to change details              │
│   2. Chat - Opens 1-on-1 chat (single meetings only)      │
│   3. Book Venue - Opens booking dialog                    │
│   4. Cancel - Opens cancellation confirmation             │
│                                                             │
│ Empty State:                                               │
│   [✓ Icon] No accepted meetings                           │
│   Accepted meeting requests will appear here              │
└────────────────────────────────────────────────────────────┘

Modify Meeting Dialog:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  Modify Meeting Details                              │  │
│ │                                                        │  │
│ │  Meeting Code: X7K9M2N4                              │  │
│ │                                                        │  │
│ │  ⚠️ Note: Changing duration will clear venue booking │  │
│ │                                                        │  │
│ │  Proposed Topic *                                     │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Bilateral Trade Agreement Discussion          │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Duration (minutes)                                   │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [v] 45 minutes                                 │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Personal Message (Optional)                          │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Additional notes...                            │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  [Cancel]                        [Save Changes]       │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Modify Meeting Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User clicks "Modify" button                             │
│    ↓                                                        │
│ 2. Dialog opens with current values                        │
│    - proposed_topic                                        │
│    - proposed_duration                                     │
│    - personal_message                                      │
│    ↓                                                        │
│ 3. User makes changes                                      │
│    ↓                                                        │
│ 4. User clicks "Save Changes"                              │
│    ↓                                                        │
│ 5. Check if duration changed:                              │
│    const durationChanged =                                 │
│      originalDuration !== newDuration;                     │
│    ↓                                                        │
│ 6. If duration changed, find and cancel venue booking:     │
│    if (durationChanged) {                                  │
│      const booking = bookings.find(b =>                    │
│        b.meeting_request_id === meetingId &&               │
│        b.status === 'active'                               │
│      );                                                     │
│      if (booking) {                                        │
│        await VenueBooking.update(booking.id, {             │
│          status: 'cancelled'                               │
│        });                                                  │
│      }                                                      │
│    }                                                        │
│    ↓                                                        │
│ 7. Update meeting request:                                 │
│    await MeetingRequest.update(meetingId, {                │
│      proposed_topic: newTopic,                             │
│      proposed_duration: newDuration,                       │
│      personal_message: newMessage,                         │
│      ...(durationChanged && { venue_booking_id: null })    │
│    });                                                      │
│    ↓                                                        │
│ 8. Notify other participants:                              │
│    const participants = [                                  │
│      meeting.requester_id,                                 │
│      ...meeting.recipient_ids                              │
│    ].filter(id => id !== currentUser.id);                  │
│                                                             │
│    for (const participantId of participants) {             │
│      await Notification.create({                           │
│        user_id: participantId,                             │
│        type: 'meeting_updated',                            │
│        title: 'Meeting Details Updated',                   │
│        body: `${currentUser.full_name} updated meeting    │
│               "${newTopic}".                               │
│               ${venueCleared ?                             │
│                 'Venue cleared, re-booking required.' : ''}│
│               `,                                            │
│        link: '/meetings'                                   │
│      });                                                    │
│    }                                                        │
│    ↓                                                        │
│ 9. Close dialog and reload data                            │
└────────────────────────────────────────────────────────────┘

Cancel Meeting Dialog:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  ⚠️ Cancel Meeting                                    │  │
│ │                                                        │  │
│ │  Are you sure you want to cancel this meeting?        │  │
│ │  This action cannot be undone.                        │  │
│ │                                                        │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Meeting: Bilateral Trade Agreement Discussion │  │  │
│ │  │ With: Maria Silva                             │  │  │
│ │  │ Code: X7K9M2N4                                │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  ⚠️ This will also cancel venue booking for           │  │
│ │     Conference Room A                                 │  │
│ │                                                        │  │
│ │  ℹ️ All participants will be notified                 │  │
│ │                                                        │  │
│ │  [Keep Meeting]              [Cancel Meeting]         │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Cancel Meeting Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User clicks "Cancel" button on meeting card             │
│    ↓                                                        │
│ 2. Confirmation dialog opens                               │
│    ↓                                                        │
│ 3. User confirms cancellation                              │
│    ↓                                                        │
│ 4. Update meeting status:                                  │
│    await MeetingRequest.update(meetingId, {                │
│      status: 'cancelled'                                   │
│    });                                                      │
│    ↓                                                        │
│ 5. Cancel associated venue booking (if exists):            │
│    const booking = bookings.find(b =>                      │
│      b.meeting_request_id === meetingId &&                 │
│      b.status === 'active'                                 │
│    );                                                       │
│    if (booking) {                                          │
│      await VenueBooking.update(booking.id, {               │
│        status: 'cancelled'                                 │
│      });                                                    │
│    }                                                        │
│    ↓                                                        │
│ 6. Notify other participants:                              │
│    for (const participantId of otherParticipants) {        │
│      await Notification.create({                           │
│        user_id: participantId,                             │
│        type: 'meeting_cancelled',                          │
│        title: 'Meeting Cancelled',                         │
│        body: `${currentUser.full_name} cancelled meeting  │
│               "${meeting.proposed_topic}"                  │
│               (Code: ${meeting.meeting_code})`,            │
│        link: '/meetings'                                   │
│      });                                                    │
│    }                                                        │
│    ↓                                                        │
│ 7. Close dialog and reload data                            │
│    ↓                                                        │
│ 8. Meeting moves to "Request History" tab                  │
└────────────────────────────────────────────────────────────┘

Request New Meeting Button (Header):
┌────────────────────────────────────────────────────────────┐
│ Opens: RequestMeetingDialog component                      │
│                                                             │
│ Component: components/meetings/RequestMeetingDialog.jsx    │
│                                                             │
│ Features:                                                   │
│   - Meeting type selector (Single / Multi-delegate)        │
│   - User selector (search & select delegates)              │
│   - Topic input                                            │
│   - Duration picker                                        │
│   - Personal message textarea                              │
│                                                             │
│ See detailed dialog structure in next section              │
└────────────────────────────────────────────────────────────┘
7.4 Venue Booking System
┌─────────────────────────────────────────────────────────────┐
│              VENUE BOOKING FUNCTIONALITY                     │
└─────────────────────────────────────────────────────────────┘

Components Involved:
1. pages/Venues.js - Public venue schedule view
2. components/meetings/BookingDialog.jsx - User booking dialog
3. components/venues/ScheduleView.jsx - Time-slot grid
4. components/venues/PrivateBookingDialog.jsx - Admin bookings

VENUE SCHEDULE PAGE (pages/Venues.js):
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header                                                │  │
│ │ [📅 Venue Schedule]         [◀ Jan 15] [▶] [Refresh] │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Time-Slot Grid (ScheduleView Component)              │  │
│ │                                                        │  │
│ │        08:00  09:00  10:00  11:00  12:00  13:00      │  │
│ │ Rm A   [    ][████████████][    ][████████]...       │  │
│ │ Rm B   [    ][    ][████████████████████]...         │  │
│ │ Rm C   [████████████████████][    ][    ]...         │  │
│ │ ...                                                   │  │
│ │                                                        │  │
│ │ Legend: [    ] = Available  [████] = Booked           │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

ScheduleView Component Structure:
┌────────────────────────────────────────────────────────────┐
│ File: components/venues/ScheduleView.jsx                    │
│                                                             │
│ Props:                                                      │
│   - rooms: Array of VenueRoom objects                      │
│   - bookings: Array of VenueBooking objects                │
│   - selectedDate: String (YYYY-MM-DD)                      │
│   - users: Object mapping user IDs to User objects         │
│   - currentUser: Current user object                       │
│   - acceptedMeetings: User's accepted meetings             │
│   - onTimeSlotClick: Function (for bookable version)       │
│   - isRoomAvailable: Function (for bookable version)       │
│                                                             │
│ Time Slots Configuration:                                  │
│   START_HOUR = 8 (8:00 AM)                                 │
│   END_HOUR = 20 (8:00 PM)                                  │
│   SLOT_DURATION = 30 (minutes)                             │
│   Total slots per day = 24 slots (12 hours × 2)           │
│                                                             │
│ Grid Layout:                                               │
│   - Vertical axis: Rooms                                   │
│   - Horizontal axis: Time slots                            │
│   - Each cell = 30-minute slot                             │
└────────────────────────────────────────────────────────────┘

Time Slot Calculation:
┌────────────────────────────────────────────────────────────┐
│ // Generate time slots                                     │
│ const timeSlots = [];                                      │
│ for (let hour = START_HOUR; hour < END_HOUR; hour++) {     │
│   for (let minute of [0, 30]) {                            │
│     const time = `${hour.toString().padStart(2, '0')}:     │
│                  ${minute.toString().padStart(2, '0')}`;   │
│     timeSlots.push(time);                                  │
│   }                                                         │
│ }                                                           │
│ // Result: ['08:00', '08:30', '09:00', ..., '19:30']      │
│                                                             │
│ // Check if time slot is booked                            │
│ const isSlotBooked = (room, slotTime) => {                 │
│   const slotStart = new Date(                              │
│     `${selectedDate}T${slotTime}:00`                       │
│   );                                                        │
│   const slotEnd = new Date(                                │
│     slotStart.getTime() + 30 * 60 * 1000                   │
│   );                                                        │
│                                                             │
│   return bookings.some(booking => {                        │
│     if (booking.room_id !== room.id) return false;         │
│     if (booking.status !== 'active') return false;         │
│                                                             │
│     const bookingStart = new Date(booking.start_time);     │
│     const bookingEnd = new Date(booking.end_time);         │
│                                                             │
│     // Check for overlap                                   │
│     return (                                               │
│       (slotStart >= bookingStart && slotStart < bookingEnd)│
│       || (slotEnd > bookingStart && slotEnd <= bookingEnd) │
│       || (slotStart <= bookingStart && slotEnd >= bookingEnd)│
│     );                                                      │
│   });                                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Booking Block Rendering:
┌────────────────────────────────────────────────────────────┐
│ // Find booking that spans multiple slots                  │
│ const getBookingForSlot = (room, slotTime) => {            │
│   const slotStart = new Date(`${selectedDate}T${slotTime}`);│
│   return bookings.find(booking => {                        │
│     if (booking.room_id !== room.id) return false;         │
│     const bookingStart = new Date(booking.start_time);     │
│     const bookingEnd = new Date(booking.end_time);         │
│     return slotStart >= bookingStart && slotStart < bookingEnd;│
│   });                                                       │
│ };                                                          │
│                                                             │
│ // Calculate booking span width                            │
│ const getBookingSpan = (booking) => {                      │
│   const start = new Date(booking.start_time);              │
│   const end = new Date(booking.end_time);                  │
│   const durationMinutes = (end - start) / (1000 * 60);     │
│   const slots = Math.ceil(durationMinutes / 30);           │
│   return slots;  // Number of 30-min slots to span         │
│ };                                                          │
│                                                             │
│ // Render booking block                                    │
│ <div                                                        │
│   className="booking-block"                                │
│   style={{                                                 │
│     gridColumn: `span ${getBookingSpan(booking)}`,         │
│     background: 'linear-gradient(135deg, #667eea, #764ba2)'│
│   }}                                                        │
│   onClick={() => showBookingDetails(booking)}              │
│ >                                                           │
│   <div className="booking-info">                           │
│     <span className="meeting-topic">                       │
│       {booking.private_meeting_topic ||                    │
│        getMeetingTopic(booking.meeting_request_id)}        │
│     </span>                                                 │
│     <span className="booked-by">                           │
│       {users[booking.booked_by]?.full_name}                │
│     </span>                                                 │
│     <span className="time-range">                          │
│       {format(new Date(booking.start_time), 'HH:mm')} -    │
│       {format(new Date(booking.end_time), 'HH:mm')}        │
│     </span>                                                 │
│   </div>                                                    │
│ </div>                                                      │
└────────────────────────────────────────────────────────────┘

USER BOOKING DIALOG (components/meetings/BookingDialog.jsx):
┌────────────────────────────────────────────────────────────┐
│ Triggered from: Accepted Meetings tab, "Book Venue" button │
│                                                             │
│ Dialog Structure:                                          │
│ ┌──────────────────────────────────────────────────────┐  │
│ │  Book Venue for Meeting                              │  │
│ │                                                        │  │
│ │  Meeting: Bilateral Trade Agreement Discussion       │  │
│ │  Duration: 45 minutes                                 │  │
│ │  Code: X7K9M2N4                                       │  │
│ │                                                        │  │
│ │  Select Date                                          │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [<] January 15, 2025 [>]                       │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Select Start Time                                    │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [v] 10:00 AM                                   │  │  │
│ │  │     10:30 AM                                   │  │  │
│ │  │     11:00 AM                                   │  │  │
│ │  │     ...                                        │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Available Rooms                                      │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [o] Conference Room A (Floor 2)                │  │  │
│ │  │     Capacity: 15 | Equipment: Wifi, Projector │  │  │
│ │  │                                                 │  │  │
│ │  │ [ ] Conference Room B (Floor 3)                │  │  │
│ │  │     ⚠️ Already booked at this time             │  │  │
│ │  │                                                 │  │  │
│ │  │ [o] Meeting Room C (Floor 2)                   │  │  │
│ │  │     Capacity: 8 | Equipment: Wifi             │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  [Cancel]                        [Confirm Booking]    │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Booking Availability Check:
┌────────────────────────────────────────────────────────────┐
│ const checkRoomAvailability = (                            │
│   room,                                                     │
│   date,                                                     │
│   startTime,                                               │
│   duration                                                  │
│ ) => {                                                      │
│   // Calculate time range                                  │
│   const bookingStart = new Date(`${date}T${startTime}`);   │
│   const bookingEnd = new Date(                             │
│     bookingStart.getTime() + duration * 60 * 1000          │
│   );                                                        │
│                                                             │
│   // Check for conflicts                                   │
│   const hasConflict = bookings.some(booking => {           │
│     if (booking.room_id !== room.id) return false;         │
│     if (booking.status !== 'active') return false;         │
│                                                             │
│     const existingStart = new Date(booking.start_time);    │
│     const existingEnd = new Date(booking.end_time);        │
│                                                             │
│     // Check for overlap                                   │
│     return (                                               │
│       (bookingStart >= existingStart &&                    │
│        bookingStart < existingEnd) ||                      │
│       (bookingEnd > existingStart &&                       │
│        bookingEnd <= existingEnd) ||                       │
│       (bookingStart <= existingStart &&                    │
│        bookingEnd >= existingEnd)                          │
│     );                                                      │
│   });                                                       │
│                                                             │
│   return !hasConflict;  // Available if no conflict        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Booking Creation Process:
┌────────────────────────────────────────────────────────────┐
│ 1. User opens BookingDialog from accepted meeting          │
│    ↓                                                        │
│ 2. Dialog shows meeting details (topic, duration, code)    │
│    ↓                                                        │
│ 3. User selects:                                           │
│    - Date (default: today)                                 │
│    - Start time (dropdown: 08:00 - 19:30 in 30min slots)  │
│    - Room (from available rooms list)                      │
│    ↓                                                        │
│ 4. System filters rooms by availability:                   │
│    const availableRooms = rooms.filter(room => {           │
│      return checkRoomAvailability(                         │
│        room,                                               │
│        selectedDate,                                       │
│        selectedTime,                                       │
│        meeting.proposed_duration                           │
│      );                                                     │
│    });                                                      │
│    ↓                                                        │
│ 5. Display rooms:                                          │
│    - Available: Selectable with green checkmark            │
│    - Unavailable: Grayed out with warning                  │
│    ↓                                                        │
│ 6. User selects a room and clicks "Confirm Booking"        │
│    ↓                                                        │
│ 7. Double-check availability (race condition protection):  │
│    if (!checkRoomAvailability(...)) {                      │
│      alert("Room no longer available");                    │
│      return;                                               │
│    }                                                        │
│    ↓                                                        │
│ 8. Calculate exact times:                                  │
│    const startDateTime = new Date(                         │
│      `${selectedDate}T${selectedTime}:00`                  │
│    );                                                       │
│    const endDateTime = new Date(                           │
│      startDateTime.getTime() +                             │
│      meeting.proposed_duration * 60 * 1000                 │
│    );                                                       │
│    ↓                                                        │
│ 9. Create booking:                                         │
│    const booking = await VenueBooking.create({             │
│      room_id: selectedRoom.id,                             │
│      room_name: selectedRoom.name,                         │
│      room_type: selectedRoom.type,                         │
│      capacity: selectedRoom.capacity,                      │
│      floor_level: selectedRoom.floor,                      │
│      equipment: selectedRoom.equipment,                    │
│      booked_by: currentUser.id,                            │
│      booking_type: 'meeting',                              │
│      meeting_request_id: meeting.id,                       │
│      start_time: startDateTime.toISOString(),              │
│      end_time: endDateTime.toISOString(),                  │
│      status: 'active'                                      │
│    });                                                      │
│    ↓                                                        │
│ 10. Update meeting with booking reference:                 │
│     await MeetingRequest.update(meeting.id, {              │
│       venue_booking_id: booking.id                         │
│     });                                                     │
│    ↓                                                        │
│ 11. Notify meeting participants:                           │
│     const participants = [                                 │
│       meeting.requester_id,                                │
│       ...meeting.recipient_ids                             │
│     ].filter(id => id !== currentUser.id);                 │
│                                                             │
│     for (const participantId of participants) {            │
│       const participant = await User.get(participantId);   │
│       if (participant.notification_preferences             │
│            ?.booking_confirmed !== false) {                │
│         await Notification.create({                        │
│           user_id: participantId,                          │
│           type: 'booking_confirmed',                       │
│           title: 'Venue Confirmed',                        │
│           body: `${selectedRoom.name} has been booked for │
│                  your meeting "${meeting.proposed_topic}" │
│                  at ${format(startDateTime, 'MMM d, HH:mm')}`,│
│           link: '/schedule',                               │
│           related_entity_id: booking.id                    │
│         });                                                 │
│       }                                                     │
│     }                                                       │
│    ↓                                                        │
│ 12. Close dialog and show success message                  │
│    ↓                                                        │
│ 13. Reload meeting data to show booking info               │
└────────────────────────────────────────────────────────────┘

ADMIN PRIVATE BOOKING (components/venues/PrivateBookingDialog):
┌────────────────────────────────────────────────────────────┐
│ Available only to admin users                              │
│ Accessed from: Rooms page or Venues page                   │
│                                                             │
│ Dialog Structure:                                          │
│ ┌──────────────────────────────────────────────────────┐  │
│ │  Create Private Booking (Admin)                      │  │
│ │                                                        │  │
│ │  Meeting Topic *                                      │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ VIP Bilateral Summit                           │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Room                                                 │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [v] Conference Room A                          │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Date                                                 │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [📅] 2025-01-15                                │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Start Time                    End Time               │  │
│ │  ┌──────────────────┐  ┌──────────────────────┐     │  │
│ │  │ [v] 10:00        │  │ [v] 11:30            │     │  │
│ │  └──────────────────┘  └──────────────────────┘     │  │
│ │                                                        │  │
│ │  [Cancel]                        [Create Booking]     │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Private Booking Process:                                   │
│   1. Admin enters meeting topic (freeform text)            │
│   2. Selects room from dropdown                            │
│   3. Picks date using date picker                          │
│   4. Selects start and end times                           │
│   5. System checks availability                            │
│   6. Creates booking with booking_type='private'           │
│   7. No MeetingRequest association                         │
│   8. No participant notifications                          │
│   9. Shows in venue schedule                               │
└────────────────────────────────────────────────────────────┘

Booking Display Rules:
┌────────────────────────────────────────────────────────────┐
│ Public Venue Schedule (all users):                         │
│   - Shows all active bookings                              │
│   - Meeting bookings display:                              │
│     * Meeting topic (from MeetingRequest)                  │
│     * Booked by name                                       │
│     * Time range                                           │
│   - Private bookings display:                              │
│     * Custom topic from admin                              │
│     * "Private Booking" label                              │
│     * Time range                                           │
│   - Click booking → Show details popover                   │
│                                                             │
│ User Schedule (My Schedule page):                          │
│   - Shows only user's own bookings                         │
│   - Bookings for meetings they're part of                  │
│   - Can click to view meeting details                      │
│   - Can modify or cancel (if booking owner)                │
│                                                             │
│ Admin View:                                                 │
│   - Can see all bookings (meeting + private)               │
│   - Can edit/cancel any booking                            │
│   - Can create private bookings                            │
│   - Access to booking analytics                            │
└────────────────────────────────────────────────────────────┘

Booking Modification/Cancellation:
┌────────────────────────────────────────────────────────────┐
│ Users can cancel their bookings through:                   │
│   1. Meeting page → Cancel meeting (cancels booking too)   │
│   2. Schedule page → Click booking → Cancel button         │
│                                                             │
│ When booking is cancelled:                                 │
│   - Status changed to 'cancelled'                          │
│   - Room becomes available                                 │
│   - Participants notified (if meeting booking)             │
│   - MeetingRequest.venue_booking_id cleared                │
│                                                             │
│ Admins can:                                                 │
│   - Cancel any booking                                     │
│   - Modify booking times (via cancel + recreate)           │
│   - Override availability checks                           │
└────────────────────────────────────────────────────────────┘
7.5 Chat & Messaging System
┌─────────────────────────────────────────────────────────────┐
│              CHAT & MESSAGING FUNCTIONALITY                  │
└─────────────────────────────────────────────────────────────┘

File: pages/Chat.js

Chat System Overview:
┌────────────────────────────────────────────────────────────┐
│ Features:                                                   │
│   - 1-on-1 messaging only (single-user meetings)           │
│   - Available for accepted meetings only                   │
│   - Real-time message delivery (3-second polling)          │
│   - Read status tracking                                   │
│   - Auto-scroll to new messages                            │
│   - Direct link support (URL parameter)                    │
└────────────────────────────────────────────────────────────┘

Page Layout:
┌────────────────────────────────────────────────────────────┐
│ Chat Page (Split View)                                      │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ Header                                              │   │
│ │ [← Back to Meetings] Secure Messaging               │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ ┌──────────┬───────────────────────────────────────────┐  │
│ │          │                                           │  │
│ │          │ ┌───────────────────────────────────┐   │  │
│ │          │ │ Chat Header                       │   │  │
│ │          │ │ [Avatar] John Smith               │   │  │
│ │ Conver-  │ │ Director • Bilateral Trade...    │   │  │
│ │ sation   │ └───────────────────────────────────┘   │  │
│ │ List     │                                           │  │
│ │          │ ┌───────────────────────────────────┐   │  │
│ │ Active   │ │                                   │   │  │
│ │ Meeting  │ │                                   │   │  │
│ │ 1        │ │   Message Thread Area             │   │  │
│ │          │ │                                   │   │  │
│ │ Active   │ │                                   │   │  │
│ │ Meeting  │ │                                   │   │  │
│ │ 2        │ │                                   │   │  │
│ │          │ └───────────────────────────────────┘   │  │
│ │ ...      │                                           │  │
│ │          │ ┌───────────────────────────────────┐   │  │
│ │          │ │ Message Input                     │   │  │
│ │          │ │ [Type message...] [Send]          │   │  │
│ │          │ └───────────────────────────────────┘   │  │
│ │          │                                           │  │
│ └──────────┴───────────────────────────────────────────┘  │
│   Sidebar          Main Chat Area                          │
└────────────────────────────────────────────────────────────┘

Conversation List (Sidebar):
┌────────────────────────────────────────────────────────────┐
│ Shows all accepted single-user meetings                    │
│                                                             │
│ Each conversation item displays:                           │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌────┐                                                │  │
│ │ │ JS │  John Smith                                    │  │
│ │ └────┘  Bilateral Trade Agreement...                  │  │
│ │         • unread indicator if has unread messages     │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Sorted by: Most recent activity                            │
│ Highlighted: Currently selected conversation               │
│ Click: Switch to that conversation                         │
│                                                             │
│ Empty State (if no conversations):                         │
│   [💬 Icon] No active conversations                        │
│   Accept 1-on-1 meeting requests to start chatting.       │
└────────────────────────────────────────────────────────────┘

Message Thread Area:
┌────────────────────────────────────────────────────────────┐
│ Displays all messages for selected meeting                 │
│                                                             │
│ Message Layout:                                            │
│                                                             │
│ Sender's messages (right-aligned):                         │
│                         ┌──────────────────────────┐       │
│                         │ Looking forward to our   │       │
│                         │ meeting tomorrow!        │       │
│                         │                  10:30 ──┘       │
│                         └──────────────────────────┘       │
│                                                             │
│ Recipient's messages (left-aligned):                       │
│ ┌──────────────────────────┐                               │
│ │ Me too! I've prepared    │                               │
│ │ the documents.           │                               │
│ │ 10:32 ────────────────── │                               │
│ └──────────────────────────┘                               │
│                                                             │
│ Message Colors:                                            │
│   - Current user: Blue (#3B82F6)                           │
│   - Other user: Gray (#F1F5F9)                             │
│                                                             │
│ Message Metadata:                                          │
│   - Timestamp (HH:mm format)                               │
│   - Read status (for sent messages)                        │
│                                                             │
│ Empty State (no messages yet):                             │
│   [💬 Icon] Start your conversation                        │
│   Send a message to begin chatting with [Name]            │
└────────────────────────────────────────────────────────────┘

Message Input Area:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ [Type your message...]              [Send Button →]  │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Features:                                                   │
│   - Multi-line textarea (expands as needed)                │
│   - Enter key to send (Shift+Enter for new line)          │
│   - Character limit: 2000 characters                       │
│   - Send button disabled if empty                          │
│   - Shows loading state when sending                       │
│   - Auto-clears after successful send                      │
└────────────────────────────────────────────────────────────┘

Loading Conversations:
┌────────────────────────────────────────────────────────────┐
│ const loadData = async () => {                             │
│   const user = await User.me();                            │
│   setCurrentUser(user);                                    │
│                                                             │
│   // Load all users for name lookup                        │
│   const allUsers = await User.list();                      │
│   const userLookup = {};                                   │
│   allUsers.forEach(u => userLookup[u.id] = u);             │
│   setUsers(userLookup);                                    │
│                                                             │
│   // Load accepted single meetings                         │
│   const allRequests = await MeetingRequest.list(           │
│     '-updated_date'                                        │
│   );                                                        │
│   const accepted = allRequests.filter(req =>               │
│     ((req.recipient_ids || []).includes(user.id) ||        │
│      req.requester_id === user.id) &&                      │
│     req.status === 'accepted' &&                           │
│     req.meeting_type === 'single'  // ← Only single       │
│   );                                                        │
│   setAcceptedMeetings(accepted);                           │
│                                                             │
│   // Check for direct link                                 │
│   const urlParams = new URLSearchParams(                   │
│     window.location.search                                 │
│   );                                                        │
│   const requestId = urlParams.get('request');              │
│   if (requestId) {                                         │
│     setSelectedMeetingId(requestId);                       │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Loading Messages (with Polling):
┌────────────────────────────────────────────────────────────┐
│ const loadMessages = async () => {                         │
│   if (!selectedMeetingId) return;                          │
│                                                             │
│   // Fetch messages for selected meeting                   │
│   const chatMessages = await ChatMessage.filter(           │
│     { meeting_request_id: selectedMeetingId },             │
│     'created_date'  // Oldest first                        │
│   );                                                        │
│   setMessages(chatMessages);                               │
│                                                             │
│   // Mark unread messages as read                          │
│   const unreadMessages = chatMessages.filter(              │
│     msg => msg.recipient_id === currentUser?.id &&         │
│            !msg.read_status                                │
│   );                                                        │
│                                                             │
│   for (const msg of unreadMessages) {                      │
│     await ChatMessage.update(msg.id, {                     │
│       read_status: true                                    │
│     });                                                     │
│   }                                                         │
│ };                                                          │
│                                                             │
│ // Auto-refresh every 3 seconds                            │
│ useEffect(() => {                                          │
│   if (selectedMeetingId) {                                 │
│     loadMessages();                                        │
│     const interval = setInterval(loadMessages, 3000);      │
│     return () => clearInterval(interval);                  │
│   }                                                         │
│ }, [selectedMeetingId, currentUser?.id]);                  │
└────────────────────────────────────────────────────────────┘

Sending Message:
┌────────────────────────────────────────────────────────────┐
│ const sendMessage = async () => {                          │
│   if (!newMessage.trim() || !selectedMeetingId) return;    │
│                                                             │
│   setSending(true);                                        │
│   try {                                                     │
│     // Find recipient                                      │
│     const selectedMeeting = acceptedMeetings.find(         │
│       m => m.id === selectedMeetingId                      │
│     );                                                      │
│     const recipientId =                                    │
│       selectedMeeting.requester_id === currentUser.id      │
│         ? (selectedMeeting.recipient_ids || [])[0]         │
│         : selectedMeeting.requester_id;                    │
│                                                             │
│     // Create message                                      │
│     const newMsg = await ChatMessage.create({              │
│       meeting_request_id: selectedMeetingId,               │
│       sender_id: currentUser.id,                           │
│       recipient_id: recipientId,                           │
│       message: newMessage,                                 │
│       message_type: 'text'                                 │
│     });                                                     │
│                                                             │
│     // Create notification for recipient                   │
│     const recipient = await User.get(recipientId);         │
│     if (recipient.notification_preferences                 │
│          ?.new_message !== false) {                        │
│       await Notification.create({                          │
│         user_id: recipientId,                              │
│         type: 'new_message',                               │
│         title: 'New Message',                              │
│         body: `You have a new message from                │
│                ${currentUser.full_name}.`,                 │
│         link: `/chat?request=${selectedMeetingId}`,        │
│         related_entity_id: newMsg.id                       │
│       });                                                   │
│     }                                                       │
│                                                             │
│     // Clear input and reload                              │
│     setNewMessage('');                                     │
│     loadMessages();                                        │
│   } catch (error) {                                        │
│     console.error("Error sending message:", error);        │
│   }                                                         │
│   setSending(false);                                       │
│ };                                                          │
│                                                             │
│ // Handle Enter key                                        │
│ const handleKeyPress = (e) => {                            │
│   if (e.key === 'Enter' && !e.shiftKey) {                  │
│     e.preventDefault();                                    │
│     sendMessage();                                         │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Auto-Scroll to Bottom:
┌────────────────────────────────────────────────────────────┐
│ const messagesEndRef = useRef(null);                       │
│                                                             │
│ const scrollToBottom = () => {                             │
│   messagesEndRef.current?.scrollIntoView({                 │
│     behavior: "smooth"                                     │
│   });                                                       │
│ };                                                          │
│                                                             │
│ // Scroll when messages change                             │
│ useEffect(() => {                                          │
│   scrollToBottom();                                        │
│ }, [messages]);                                            │
│                                                             │
│ // In message thread:                                      │
│ <div className="messages-container">                       │
│   {messages.map(message => (                               │
│     <MessageBubble key={message.id} message={message} />   │
│   ))}                                                       │
│   <div ref__={messagesEndRef} />  {/* Scroll anchor */}     │
│ </div>                                                      │
└────────────────────────────────────────────────────────────┘

Access Control:
┌────────────────────────────────────────────────────────────┐
│ Chat is available only when:                               │
│   ✅ Meeting status = 'accepted'                           │
│   ✅ Meeting type = 'single' (not multi-delegate)          │
│   ✅ User is a participant (requester or recipient)        │
│                                                             │
│ Multi-delegate meetings:                                   │
│   - No chat available                                      │
│   - Communication via email or external channels           │
│   - Future: Group chat feature                             │
│                                                             │
│ Security:                                                   │
│   - RLS ensures users only see their messages              │
│   - Messages encrypted in transit (HTTPS)                  │
│   - No message editing or deletion (immutable)             │
│   - Read-only for non-participants                         │
└────────────────────────────────────────────────────────────┘

Direct Link Support:
┌────────────────────────────────────────────────────────────┐
│ URL Format: /chat?request={meeting_request_id}            │
│                                                             │
│ Usage:                                                      │
│   - From meeting card "Chat" button                        │
│   - From notifications (new message)                       │
│   - From schedule view                                     │
│                                                             │
│ Behavior:                                                   │
│   1. Load chat page                                        │
│   2. Parse URL parameter                                   │
│   3. Auto-select that conversation                         │
│   4. Load messages for that meeting                        │
│   5. Mark messages as read                                 │
│   6. Scroll to bottom                                      │
└────────────────────────────────────────────────────────────┘

Empty States:
┌────────────────────────────────────────────────────────────┐
│ No Conversations:                                           │
│   [💬 Icon] No active conversations                        │
│   Accept 1-on-1 meeting requests to start chatting.       │
│                                                             │
│ No Conversation Selected:                                   │
│   [💬 Icon] Select a conversation                          │
│   Choose a meeting from the sidebar to start chatting     │
│                                                             │
│ No Messages Yet:                                            │
│   [💬 Icon] Start your conversation                        │
│   Send a message to begin chatting with [Name]            │
└────────────────────────────────────────────────────────────┘
Due to response length limits, I'll continue with the remaining sections. Would you like me to continue with:

Section 8: Complete User Flows (Step-by-step journeys) Section 9: Admin Functionalities Sections 10-16: Remaining sections

Let me know and I'll provide the next sections with the same comprehensive detail!

41 minutes ago
Base44 AI
Base44

Thought for 1s
UNIConnect - Complete Project Documentation (Continued)
7. Core Functionalities
7.1 User Profile Management
┌─────────────────────────────────────────────────────────────┐
│             PROFILE MANAGEMENT COMPLETE FLOW                 │
└─────────────────────────────────────────────────────────────┘

Page: /profile (Profile.js)

Initial State on Page Load:
┌────────────────────────────────────────────────────────────┐
│ 1. Component mounts                                         │
│         ↓                                                   │
│ 2. useEffect triggers loadUserData()                        │
│         ↓                                                   │
│ 3. Fetch current user:                                     │
│    const user = await User.me();                           │
│         ↓                                                   │
│ 4. Set state:                                              │
│    setCurrentUser(user);                                   │
│    setFormData(user);  // Pre-populate form                │
│    setConsentGiven(user.consent_given || false);           │
│         ↓                                                   │
│ 5. Display loading indicator while fetching                │
│         ↓                                                   │
│ 6. Render form with user data                              │
└────────────────────────────────────────────────────────────┘

Profile Sections:

Section 1: Consent & Data Protection
┌────────────────────────────────────────────────────────────┐
│ UI Elements:                                                │
│   - Privacy Notice (blue info box)                         │
│     * Explains data usage                                  │
│     * Lists what data is collected                         │
│     * Security measures                                    │
│   - Checkbox: "I consent to data processing"               │
│     * Required to use platform                             │
│     * Cannot save without consent                          │
│                                                             │
│ State:                                                      │
│   const [consentGiven, setConsentGiven] = useState(false); │
│                                                             │
│ Validation:                                                 │
│   - Must be checked before saving                          │
│   - Shows warning if unchecked                             │
│                                                             │
│ Alert Display:                                              │
│   {!consentGiven && (                                      │
│     <Alert variant="warning">                              │
│       Consent is required to access platform features      │
│     </Alert>                                               │
│   )}                                                        │
└────────────────────────────────────────────────────────────┘

Section 2: Basic Information
┌────────────────────────────────────────────────────────────┐
│ Fields (2-column grid):                                     │
│                                                             │
│ Row 1:                                                      │
│   [Full Name]                [Email Address]               │
│   (Read-only, grayed)       (Read-only, grayed)           │
│   ↑ From Google OAuth       ↑ From Google OAuth           │
│                                                             │
│ Row 2:                                                      │
│   [Representation Type ▼]   [Country/Entity]               │
│   Options:                   (Text input)                  │
│   - Government               Example: "United States"      │
│   - NGO                                                     │
│   - Private Sector                                         │
│   - Academic                                               │
│   - International Org                                      │
│   - Media                                                  │
│                                                             │
│ Row 3:                                                      │
│   [Job Title]               [Organization]                 │
│   Example:                   Example:                      │
│   "Director of Policy"      "Department of State"         │
│                                                             │
│ Row 4:                                                      │
│   [Industry Sector]         [LinkedIn Profile (Optional)]  │
│   Example:                   Format:                       │
│   "Climate Policy"          "https://linkedin.com/in/..."  │
│                                                             │
│ Row 5 (Full width):                                        │
│   [Professional Biography]                                 │
│   (Textarea, 500 chars max)                                │
│   Placeholder: "Brief description of your professional     │
│                 background and expertise..."               │
│                                                             │
│ State Management:                                           │
│   const [formData, setFormData] = useState({              │
│     representation_type: '',                               │
│     country: '',                                           │
│     job_title: '',                                         │
│     organization: '',                                      │
│     industry_sector: '',                                   │
│     biography: '',                                         │
│     linkedin_profile: ''                                   │
│   });                                                       │
│                                                             │
│   const handleInputChange = (field, value) => {            │
│     setFormData(prev => ({ ...prev, [field]: value }));   │
│   };                                                        │
│                                                             │
│ Validation Rules:                                           │
│   - All fields required except linkedin_profile            │
│   - biography max 500 characters                           │
│   - linkedin_profile must be valid URL format              │
└────────────────────────────────────────────────────────────┘

Section 3: Topical Interests
┌────────────────────────────────────────────────────────────┐
│ Description:                                                │
│   "Select areas of professional interest with priority     │
│    levels"                                                  │
│                                                             │
│ UI Layout:                                                  │
│   1. Quick Add Buttons (top):                              │
│      [+Climate Policy] [+Trade Relations] [+Digital Gov]   │
│      [+Human Rights] [+Economic Dev] [+Security Coop]      │
│      [+Health Policy] [+Education] [+Energy Transition]    │
│      ... (12 predefined topics shown as buttons)           │
│                                                             │
│   2. Selected Interests List:                              │
│      ┌──────────────────────────────────────────────┐     │
│      │ Climate Policy         [Priority ▼]  [🗑️]   │     │
│      │                        → High                │     │
│      ├──────────────────────────────────────────────┤     │
│      │ Trade Relations        [Priority ▼]  [🗑️]   │     │
│      │                        → Medium              │     │
│      ├──────────────────────────────────────────────┤     │
│      │ Energy Transition      [Priority ▼]  [🗑️]   │     │
│      │                        → Low                 │     │
│      └──────────────────────────────────────────────┘     │
│                                                             │
│ Data Structure:                                             │
│   topical_interests: [                                     │
│     {                                                       │
│       topic: "Climate Policy",                             │
│       priority: "high"                                     │
│     },                                                      │
│     {                                                       │
│       topic: "Trade Relations",                            │
│       priority: "medium"                                   │
│     }                                                       │
│   ]                                                         │
│                                                             │
│ Functions:                                                  │
│   const addInterest = (type, item) => {                    │
│     const interests = formData[type] || [];                │
│     if (!interests.find(i => i.topic === item)) {          │
│       const newInterest = {                                │
│         topic: item,                                       │
│         priority: 'medium' // default                      │
│       };                                                    │
│       setFormData(prev => ({                               │
│         ...prev,                                           │
│         [type]: [...interests, newInterest]                │
│       }));                                                  │
│     }                                                       │
│   };                                                        │
│                                                             │
│   const removeInterest = (type, index) => {                │
│     const interests = formData[type] || [];                │
│     setFormData(prev => ({                                 │
│       ...prev,                                             │
│       [type]: interests.filter((_, i) => i !== index)      │
│     }));                                                    │
│   };                                                        │
│                                                             │
│   const updateInterestPriority = (type, index, priority) =>│
│     const interests = [...(formData[type] || [])];         │
│     interests[index].priority = priority;                  │
│     setFormData(prev => ({ ...prev, [type]: interests }));│
│   };                                                        │
│                                                             │
│ Validation:                                                 │
│   - Minimum 1 interest required                            │
│   - No duplicate topics allowed                            │
└────────────────────────────────────────────────────────────┘

Section 4: Geographical Interests
┌────────────────────────────────────────────────────────────┐
│ Description:                                                │
│   "Select regions of professional focus"                   │
│                                                             │
│ UI Layout (Same as Topical):                               │
│   1. Quick Add Buttons:                                    │
│      [+North America] [+South America] [+Europe]           │
│      [+Africa] [+Asia-Pacific] [+Middle East]              │
│      [+Central Asia] [+Caribbean] [+Nordic Countries]      │
│      [+ASEAN] ... (12 predefined regions)                  │
│                                                             │
│   2. Selected Regions List:                                │
│      Same format as topical interests                      │
│                                                             │
│ Data Structure:                                             │
│   geographical_interests: [                                │
│     {                                                       │
│       region: "Europe",                                    │
│       priority: "high"                                     │
│     },                                                      │
│     {                                                       │
│       region: "Africa",                                    │
│       priority: "medium"                                   │
│     }                                                       │
│   ]                                                         │
│                                                             │
│ Functions: (Same as topical interests functions)           │
│                                                             │
│ Validation:                                                 │
│   - Minimum 1 region required                              │
│   - No duplicate regions allowed                           │
└────────────────────────────────────────────────────────────┘

Section 5: Notification Preferences
┌────────────────────────────────────────────────────────────┐
│ Title: "Notification Preferences"                          │
│ Description: "Choose which platform notifications you      │
│               want to receive"                              │
│                                                             │
│ Settings (Switch toggles):                                 │
│                                                             │
│ 1. ┌──────────────────────────────────────────┐           │
│    │ New Meeting Request                      │           │
│    │ Notify when user sends meeting request   │           │
│    │                              [Toggle ON] │           │
│    └──────────────────────────────────────────┘           │
│                                                             │
│ 2. ┌──────────────────────────────────────────┐           │
│    │ Request Status Update                    │           │
│    │ Notify when user accepts/declines        │           │
│    │                              [Toggle ON] │           │
│    └──────────────────────────────────────────┘           │
│                                                             │
│ 3. ┌──────────────────────────────────────────┐           │
│    │ New Chat Message                         │           │
│    │ Notify when receiving chat message       │           │
│    │                              [Toggle ON] │           │
│    └──────────────────────────────────────────┘           │
│                                                             │
│ 4. ┌──────────────────────────────────────────┐           │
│    │ Booking Confirmation                     │           │
│    │ Notify when venue is booked for meeting  │           │
│    │                              [Toggle ON] │           │
│    └──────────────────────────────────────────┘           │
│                                                             │
│ Data Structure:                                             │
│   notification_preferences: {                              │
│     new_meeting_request: true,                             │
│     request_status_update: true,                           │
│     new_message: true,                                     │
│     booking_confirmed: true                                │
│   }                                                         │
│                                                             │
│ Default Values:                                             │
│   All toggles default to ON (true) for new users          │
│                                                             │
│ Handler:                                                    │
│   const handleNotificationChange = (key, value) => {       │
│     setFormData(prev => ({                                 │
│       ...prev,                                             │
│       notification_preferences: {                          │
│         ...prev.notification_preferences,                  │
│         [key]: value                                       │
│       }                                                     │
│     }));                                                    │
│   };                                                        │
│                                                             │
│ Impact:                                                     │
│   - When creating notifications, system checks these       │
│     preferences before sending                             │
│   - If preference is OFF, notification is not created      │
└────────────────────────────────────────────────────────────┘

Section 6: Privacy Preferences
┌────────────────────────────────────────────────────────────┐
│ Title: "Privacy Preferences"                               │
│ Description: "Control how your profile appears to others"  │
│                                                             │
│ Setting:                                                    │
│   ┌──────────────────────────────────────────────┐        │
│   │ Hide Profile from Directory                  │        │
│   │ Make your profile invisible in directory     │        │
│   │ search                                        │        │
│   │                              [Toggle OFF]    │        │
│   └──────────────────────────────────────────────┘        │
│                                                             │
│ When Enabled (Toggle ON):                                  │
│   ⚠️ Alert shows:                                          │
│   "Note: While your profile is hidden, you can still      │
│    send meeting requests to others and receive requests   │
│    if someone has your direct information."               │
│                                                             │
│ Data Field:                                                 │
│   is_profile_hidden: boolean (default: false)              │
│                                                             │
│ Effect:                                                     │
│   - When TRUE: User does not appear in /delegates page    │
│   - User can still:                                        │
│     * Send meeting requests                               │
│     * Receive meeting requests                            │
│     * Use all other features                              │
│   - Other users cannot find them via search               │
│                                                             │
│ Handler:                                                    │
│   <Switch                                                  │
│     checked={formData.is_profile_hidden || false}          │
│     onCheckedChange={(checked) =>                          │
│       handleInputChange('is_profile_hidden', checked)      │
│     }                                                       │
│   />                                                        │
└────────────────────────────────────────────────────────────┘

Save Profile Function:
┌────────────────────────────────────────────────────────────┐
│ const handleSave = async () => {                           │
│   setSaving(true);                                         │
│   try {                                                     │
│     // Calculate profile completion                        │
│     const profileComplete = !!(                            │
│       formData.representation_type &&                      │
│       formData.country &&                                  │
│       formData.job_title &&                                │
│       formData.organization &&                             │
│       formData.industry_sector &&                          │
│       formData.biography &&                                │
│       formData.topical_interests?.length > 0 &&            │
│       formData.geographical_interests?.length > 0          │
│     );                                                      │
│                                                             │
│     // Update user data                                    │
│     await User.updateMyUserData({                          │
│       ...formData,                                         │
│       consent_given: consentGiven,                         │
│       profile_completed: profileComplete                   │
│     });                                                     │
│                                                             │
│     // Reload user data to get updated values              │
│     await loadUserData();                                  │
│                                                             │
│     // Show success message (optional)                     │
│     // toast.success("Profile updated successfully");      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error saving profile:", error);         │
│     // toast.error("Failed to update profile");            │
│   }                                                         │
│   setSaving(false);                                        │
│ };                                                          │
│                                                             │
│ Save Button:                                                │
│   <Button                                                  │
│     onClick={handleSave}                                   │
│     disabled={saving || !consentGiven}                     │
│     className="bg-blue-600 hover:bg-blue-700 px-8"         │
│   >                                                         │
│     {saving ? (                                            │
│       <>                                                    │
│         <div className="animate-spin ... mr-2"></div>      │
│         Saving...                                          │
│       </>                                                   │
│     ) : (                                                   │
│       <>                                                    │
│         <Save className="w-4 h-4 mr-2" />                  │
│         Save Profile                                       │
│       </>                                                   │
│     )}                                                      │
│   </Button>                                                │
└────────────────────────────────────────────────────────────┘

Profile Completion Logic:
┌────────────────────────────────────────────────────────────┐
│ Requirements for profile_completed = true:                 │
│   ✅ representation_type filled                            │
│   ✅ country filled                                         │
│   ✅ job_title filled                                       │
│   ✅ organization filled                                    │
│   ✅ industry_sector filled                                 │
│   ✅ biography filled                                       │
│   ✅ topical_interests has at least 1 item                 │
│   ✅ geographical_interests has at least 1 item            │
│                                                             │
│ Optional fields (not required for completion):             │
│   - linkedin_profile                                       │
│                                                             │
│ Effects of profile_completed = true:                       │
│   ✅ Full access to platform features                      │
│   ✅ Profile visible in Delegates directory (if not hidden)│
│   ✅ Can send/receive meeting requests                     │
│   ✅ Green "Profile Complete" badge shows on dashboard     │
│                                                             │
│ Effects of profile_completed = false:                      │
│   ❌ Limited platform access                               │
│   ❌ Profile NOT visible in directory                      │
│   ❌ Warning shown on dashboard                            │
└────────────────────────────────────────────────────────────┘

Profile Page States:
┌────────────────────────────────────────────────────────────┐
│ 1. Loading State:                                          │
│    - Shows skeleton loaders                                │
│    - Animated pulse effect                                 │
│    - Displayed while fetching user data                    │
│                                                             │
│ 2. Loaded State:                                           │
│    - All fields populated with user data                   │
│    - Interactive form elements                             │
│    - Save button enabled (if consent given)                │
│                                                             │
│ 3. Saving State:                                           │
│    - Save button shows spinner                             │
│    - Button disabled                                       │
│    - "Saving..." text                                      │
│                                                             │
│ 4. Error State:                                            │
│    - Error message displayed (if fetch fails)              │
│    - Retry option available                                │
└────────────────────────────────────────────────────────────┘
7.2 User Directory & Networking
┌─────────────────────────────────────────────────────────────┐
│           DELEGATES DIRECTORY COMPLETE FLOW                  │
└─────────────────────────────────────────────────────────────┘

Page: /delegates (Delegates.js)

Data Loading Process:
┌────────────────────────────────────────────────────────────┐
│ 1. Component mounts                                         │
│         ↓                                                   │
│ 2. useEffect triggers loadData()                            │
│         ↓                                                   │
│ 3. Parallel fetch:                                         │
│    const [user, allUsers] = await Promise.all([            │
│      User.me(),                                            │
│      User.list()                                           │
│    ]);                                                      │
│         ↓                                                   │
│ 4. Filter users:                                           │
│    const availableUsers = allUsers.filter(u =>             │
│      u.id !== user.id &&                                   │
│      u.profile_completed &&                                │
│      u.consent_given &&                                    │
│      !u.is_profile_hidden                                  │
│    );                                                       │
│         ↓                                                   │
│ 5. Set state:                                              │
│    setCurrentUser(user);                                   │
│    setUsers(availableUsers);                               │
│         ↓                                                   │
│ 6. Render user cards                                       │
└────────────────────────────────────────────────────────────┘

Access Control Check:
┌────────────────────────────────────────────────────────────┐
│ Before showing directory:                                   │
│   const canAccessUsers =                                    │
│     currentUser?.consent_given &&                           │
│     currentUser?.profile_completed;                         │
│                                                             │
│ If FALSE:                                                   │
│   Show Alert:                                              │
│   "Access Restricted: Please complete your consent         │
│    process and profile to browse users."                   │
│   [Link to Profile]                                        │
│                                                             │
│ If TRUE:                                                    │
│   Show full directory interface                            │
└────────────────────────────────────────────────────────────┘

Search & Filter UI:
┌────────────────────────────────────────────────────────────┐
│ Search Bar:                                                 │
│   ┌──────────────────────────────────────────────────┐    │
│   │ 🔍  Search by name, organization, country...      │    │
│   └──────────────────────────────────────────────────┘    │
│                                                             │
│ Filter Dropdown:                                            │
│   🎛️ [Filter by Type ▼]                                   │
│      Options:                                              │
│      - All Types                                           │
│      - Government                                          │
│      - NGO                                                 │
│      - Private Sector                                      │
│      - Academic                                            │
│      - International Org                                   │
│      - Media                                               │
│                                                             │
│ Results Counter:                                            │
│   👥 {filteredUsers.length} users available                │
└────────────────────────────────────────────────────────────┘

Filtering Logic:
┌────────────────────────────────────────────────────────────┐
│ const filterUsers = useCallback(() => {                    │
│   let filtered = users;                                    │
│                                                             │
│   // Search term filter                                    │
│   if (searchTerm) {                                        │
│     const term = searchTerm.toLowerCase();                 │
│     filtered = filtered.filter(user =>                     │
│       user.full_name?.toLowerCase().includes(term) ||      │
│       user.organization?.toLowerCase().includes(term) ||   │
│       user.country?.toLowerCase().includes(term) ||        │
│       user.job_title?.toLowerCase().includes(term)         │
│     );                                                      │
│   }                                                         │
│                                                             │
│   // Representation type filter                            │
│   if (typeFilter !== 'all') {                              │
│     filtered = filtered.filter(user =>                     │
│       user.representation_type === typeFilter              │
│     );                                                      │
│   }                                                         │
│                                                             │
│   setFilteredUsers(filtered);                              │
│ }, [users, searchTerm, typeFilter]);                       │
│                                                             │
│ useEffect(() => {                                          │
│   filterUsers();                                           │
│ }, [filterUsers]);                                         │
└────────────────────────────────────────────────────────────┘

User Card Layout:
┌────────────────────────────────────────────────────────────┐
│ Grid: 3 columns on large screens, responsive               │
│                                                             │
│ Single Card Structure:                                     │
│ ┌─────────────────────────────────────────────────────┐   │
│ │ ┌──┐                                          🔗    │   │
│ │ │JS│  John Smith                          LinkedIn │   │
│ │ └──┘  Director of Climate Policy                   │   │
│ │                                                     │   │
│ │ 🏢 Department of State                             │   │
│ │ 🌍 United States                                   │   │
│ │                                                     │   │
│ │ [Government]  [Environmental Policy]               │   │
│ │                                                     │   │
│ │ "Experienced policy director specializing in..."   │   │
│ │                                                     │   │
│ │ Key Interests:                                     │   │
│ │ [Climate Finance] [Carbon Markets] [+2 more]       │   │
│ │                                                     │   │
│ │          [📤 Request Meeting]                      │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ Card Components:                                            │
│   - Avatar circle with initials                            │
│   - LinkedIn icon (if profile provided)                    │
│   - Name (bold, 18px)                                      │
│   - Job title (gray, 14px)                                 │
│   - Organization icon + name                               │
│   - Country/region icon + name                             │
│   - Representation type badge                              │
│   - Industry sector badge                                  │
│   - Biography (truncated to 3 lines)                       │
│   - Interest tags (show first 3, +N more)                  │
│   - Request Meeting button (blue, full width)              │
│                                                             │
│ Hover Effects:                                              │
│   - Card lifts slightly (transform: translateY(-4px))      │
│   - Shadow increases                                       │
│   - Button darkens                                         │
│                                                             │
│ Click Behavior:                                             │
│   - Click anywhere except button: View full profile        │
│   - Click button: Open meeting request dialog              │
└────────────────────────────────────────────────────────────┘

Meeting Request Dialog:
┌────────────────────────────────────────────────────────────┐
│ Trigger: Click "Request Meeting" on user card              │
│                                                             │
│ Dialog Content:                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │  Request Meeting with John Smith                    │   │
│ ├─────────────────────────────────────────────────────┤   │
│ │                                                      │   │
│ │  Proposed Topic *                                   │   │
│ │  ┌────────────────────────────────────────────────┐ │   │
│ │  │ e.g., Climate Policy Coordination              │ │   │
│ │  └────────────────────────────────────────────────┘ │   │
│ │                                                      │   │
│ │  Duration (minutes)                                 │   │
│ │  [45 minutes ▼]                                     │   │
│ │   Options: 30, 45, 60, 90                          │   │
│ │                                                      │   │
│ │  Personal Message (Optional)                        │   │
│ │  ┌────────────────────────────────────────────────┐ │   │
│ │  │ Introduce yourself and explain why you'd       │ │   │
│ │  │ like to meet...                                 │ │   │
│ │  │                                                  │ │   │
│ │  └────────────────────────────────────────────────┘ │   │
│ │                                                      │   │
│ │              [Cancel]  [📤 Send Request]           │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ State Management:                                           │
│   const [selectedUser, setSelectedUser] = useState(null);  │
│   const [meetingRequest, setMeetingRequest] = useState({   │
│     personal_message: '',                                  │
│     proposed_topic: '',                                    │
│     proposed_duration: 45                                  │
│   });                                                       │
│   const [sending, setSending] = useState(false);           │
│                                                             │
│ Validation:                                                 │
│   - proposed_topic required (min 5 chars)                  │
│   - duration must be selected                              │
│   - personal_message optional (max 500 chars)              │
│   - Send button disabled if validation fails               │
└────────────────────────────────────────────────────────────┘

Send Meeting Request Process:
┌────────────────────────────────────────────────────────────┐
│ const sendMeetingRequest = async () => {                   │
│   if (!selectedUser || !meetingRequest.proposed_topic) {   │
│     return; // Validation failed                           │
│   }                                                         │
│                                                             │
│   setSending(true);                                        │
│   try {                                                     │
│     // 1. Generate unique meeting code                     │
│     const meetingCode =                                    │
│       Math.random()                                        │
│         .toString(36)                                      │
│         .substring(2, 10)                                  │
│         .toUpperCase();                                    │
│     // Example: "X7K9M2N4"                                 │
│                                                             │
│     // 2. Create meeting request                           │
│     const newRequest = await MeetingRequest.create({       │
│       requester_id: currentUser.id,                        │
│       recipient_ids: [selectedUser.id],                    │
│       meeting_type: 'single',                              │
│       personal_message: meetingRequest.personal_message,   │
│       proposed_topic: meetingRequest.proposed_topic,       │
│       proposed_duration: meetingRequest.proposed_duration, │
│       meeting_code: meetingCode,                           │
│       status: 'pending'                                    │
│     });                                                     │
│                                                             │
│     // 3. Create notification for recipient                │
│     const recipient = await User.get(selectedUser.id);     │
│                                                             │
│     // Check notification preferences                       │
│     if (recipient.notification_preferences                 │
│         ?.new_meeting_request !== false) {                 │
│                                                             │
│       await Notification.create({                          │
│         user_id: selectedUser.id,                          │
│         type: 'new_meeting_request',                       │
│         title: 'New Meeting Request',                      │
│         body: `You have received a new meeting request `+  │
│               `from ${currentUser.full_name}. `+           │
│               `Meeting Code: ${meetingCode}`,              │
│         link: createPageUrl("Meetings"),                   │
│         related_entity_id: newRequest.id,                  │
│         is_read: false                                     │
│       });                                                   │
│     }                                                       │
│                                                             │
│     // 4. Reset form and close dialog                      │
│     setSelectedUser(null);                                 │
│     setMeetingRequest({                                    │
│       personal_message: '',                                │
│       proposed_topic: '',                                  │
│       proposed_duration: 45                                │
│     });                                                     │
│                                                             │
│     // 5. Show success message (optional)                  │
│     // toast.success("Meeting request sent!");             │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error sending meeting request:", error);│
│     // toast.error("Failed to send request");              │
│   }                                                         │
│   setSending(false);                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Empty State:
┌────────────────────────────────────────────────────────────┐
│ When filteredUsers.length === 0:                           │
│                                                             │
│     ┌────────────────────────────────────┐                │
│     │                                     │                │
│     │          👥 (large icon)            │                │
│     │                                     │                │
│     │      No users found                 │                │
│     │                                     │                │
│     │  Try adjusting your search          │                │
│     │  filters or check back later        │                │
│     │                                     │                │
│     └────────────────────────────────────┘                │
└────────────────────────────────────────────────────────────┘

Performance Optimizations:
┌────────────────────────────────────────────────────────────┐
│ 1. Debounced Search:                                       │
│    - Wait 300ms after user stops typing before filtering  │
│    - Prevents excessive re-renders                         │
│                                                             │
│ 2. Memoized Filter Function:                               │
│    - useCallback for filterUsers                           │
│    - Only re-creates when dependencies change              │
│                                                             │
│ 3. Virtualized List (for large datasets):                 │
│    - Only render visible cards                             │
│    - Improves performance with 100+ users                  │
│                                                             │
│ 4. Image Lazy Loading:                                     │
│    - Profile images load only when in viewport            │
│    - Reduces initial page load time                        │
└────────────────────────────────────────────────────────────┘
7.3 Meeting Request Management
┌─────────────────────────────────────────────────────────────┐
│           MEETING MANAGEMENT COMPLETE FLOW                   │
└─────────────────────────────────────────────────────────────┘

Page: /meetings (Meetings.js)

Data Loading:
┌────────────────────────────────────────────────────────────┐
│ const loadData = async () => {                             │
│   setLoading(true);                                        │
│   try {                                                     │
│     // 1. Get current user                                 │
│     const user = await User.me();                          │
│     setCurrentUser(user);                                  │
│                                                             │
│     // 2. Fetch all data in parallel                       │
│     const [allUsers, allRequests, allBookings] =           │
│       await Promise.all([                                  │
│         User.list(),                                       │
│         MeetingRequest.list('-created_date'),              │
│         VenueBooking.list()                                │
│       ]);                                                   │
│                                                             │
│     // 3. Create user lookup map                           │
│     const userLookup = {};                                 │
│     allUsers.forEach(u => {                                │
│       userLookup[u.id] = u;                                │
│     });                                                     │
│     setUsers(userLookup);                                  │
│                                                             │
│     // 4. Categorize meeting requests                      │
│                                                             │
│     // Pending: Requests WHERE                             │
│     //   - I am a recipient                                │
│     //   - Status is 'pending'                             │
│     const pending = allRequests.filter(req =>              │
│       (req.recipient_ids || []).includes(user.id) &&       │
│       req.status === 'pending'                             │
│     );                                                      │
│     setPendingRequests(pending);                           │
│                                                             │
│     // History: Requests WHERE                             │
│     //   - I am involved (requester or recipient)          │
│     //   - Status is NOT 'accepted'                        │
│     //   - NOT a pending incoming request                  │
│     const history = allRequests.filter(req => {            │
│       const isMyRequest =                                  │
│         req.requester_id === user.id ||                    │
│         (req.recipient_ids || []).includes(user.id);       │
│       const isNotAccepted = req.status !== 'accepted';     │
│       const isNotPendingIncoming = !(                      │
│         (req.recipient_ids || []).includes(user.id) &&     │
│         req.status === 'pending'                           │
│       );                                                    │
│       return isMyRequest && isNotAccepted &&               │
│              isNotPendingIncoming;                         │
│     });                                                     │
│     setRequestHistory(history);                            │
│                                                             │
│     // Accepted: Requests WHERE                            │
│     //   - I am involved                                   │
│     //   - Status is 'accepted'                            │
│     const accepted = allRequests.filter(req =>             │
│       ((req.recipient_ids || []).includes(user.id) ||      │
│        req.requester_id === user.id) &&                    │
│       req.status === 'accepted'                            │
│     );                                                      │
│     setAcceptedMeetings(accepted);                         │
│                                                             │
│     setBookings(allBookings);                              │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading meetings:", error);       │
│   }                                                         │
│   setLoading(false);                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Tab Structure:
┌────────────────────────────────────────────────────────────┐
│ <Tabs defaultValue="pending">                              │
│   <TabsList>                                               │
│     <TabsTrigger value="pending">                          │
│       Pending Approval ({pendingRequests.length})          │
│       {pendingRequests.length > 0 && (                     │
│         <div className="animate-pulse red-dot" />          │
│       )}                                                    │
│     </TabsTrigger>                                         │
│                                                             │
│     <TabsTrigger value="history">                          │
│       Request History ({requestHistory.length})            │
│     </TabsTrigger>                                         │
│                                                             │
│     <TabsTrigger value="accepted">                         │
│       Accepted Meetings ({acceptedMeetings.length})        │
│     </TabsTrigger>                                         │
│   </TabsList>                                              │
│                                                             │
│   <TabsContent value="pending">                            │
│     {/* Pending requests content */}                       │
│   </TabsContent>                                           │
│                                                             │
│   <TabsContent value="history">                            │
│     {/* Request history content */}                        │
│   </TabsContent>                                           │
│                                                             │
│   <TabsContent value="accepted">                           │
│     {/* Accepted meetings content */}                      │
│   </TabsContent>                                           │
│ </Tabs>                                                     │
└────────────────────────────────────────────────────────────┘

TAB 1: Pending Approval
┌────────────────────────────────────────────────────────────┐
│ Header Alert (if requests exist):                          │
│   ⚠️ Action Required                                       │
│   You have {count} meeting request(s) awaiting your       │
│   response. Please review and approve or decline each     │
│   request below.                                           │
│                                                             │
│ Meeting Request Card Layout:                               │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌──┐                                                  │  │
│ │ │JS│  Meeting Request from John Smith                │  │
│ │ └──┘  Director of Policy at Department of State     │  │
│ │       🌍 United States                               │  │
│ │       📅 Received Jan 15, 2025 at 10:30 AM          │  │
│ │                                                      │  │
│ │ ┌────────────────────────────────────────────────┐  │  │
│ │ │ 📋 Proposed Topic                               │  │  │
│ │ │ Bilateral trade agreement discussion            │  │  │
│ │ ├────────────────────────────────────────────────┤  │  │
│ │ │ ⏱️ Duration: 45 minutes                         │  │  │
│ │ └────────────────────────────────────────────────┘  │  │
│ │                                                      │  │
│ │ 💬 Personal Message                                 │  │
│ │ ┌────────────────────────────────────────────────┐  │  │
│ │ │ "I'd like to discuss potential collaboration    │  │  │
│ │ │  on renewable energy trade..."                  │  │  │
│ │ └────────────────────────────────────────────────┘  │  │
│ │                                                      │  │
│ │              [✖️ Decline]  [✅ Accept Meeting]      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Empty State (no pending requests):                         │
│   ✅ All caught up!                                        │
│   You don't have any pending meeting requests              │
│   New requests from other delegates will appear here       │
└────────────────────────────────────────────────────────────┘

Accept/Decline Actions:
┌────────────────────────────────────────────────────────────┐
│ const handleRequestResponse = async (requestId, response) │
│   try {                                                     │
│     // 1. Get full request details                         │
│     const request = await MeetingRequest.get(requestId);   │
│                                                             │
│     // 2. Update request status                            │
│     await MeetingRequest.update(requestId, {               │
│       status: response  // 'accepted' or 'declined'        │
│     });                                                     │
│                                                             │
│     // 3. Create notification for requester                │
│     if (request && request.requester_id) {                 │
│       const requester =                                    │
│         users[request.requester_id] ||                     │
│         await User.get(request.requester_id);              │
│                                                             │
│       // Check notification preferences                     │
│       if (requester.notification_preferences               │
│           ?.request_status_update !== false) {             │
│                                                             │
│         await Notification.create({                        │
│           user_id: request.requester_id,                   │
│           type: response === 'accepted' ?                  │
│                 'request_accepted' :                       │
│                 'request_declined',                        │
│           title: `Meeting Request ${                       │
│             response === 'accepted' ?                      │
│             'Accepted' : 'Declined'                        │
│           }`,                                              │
│           body: `${currentUser.full_name} has ${response}`+│
│                 ` your meeting request regarding "`+       │
│                 `${request.proposed_topic}".`,             │
│           link: createPageUrl("Meetings"),                 │
│           related_entity_id: requestId,                    │
│           is_read: false                                   │
│         });                                                 │
│       }                                                     │
│     }                                                       │
│                                                             │
│     // 4. Reload data to update UI                         │
│     await loadData();                                      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error updating request:", error);       │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

TAB 2: Request History
┌────────────────────────────────────────────────────────────┐
│ Shows all meeting requests that are NOT:                   │
│   - Pending incoming requests (shown in Pending tab)       │
│   - Accepted requests (shown in Accepted tab)              │
│                                                             │
│ Includes:                                                   │
│   ✅ Sent requests (pending response)                      │
│   ✅ Declined requests (incoming or outgoing)              │
│   ✅ Cancelled meetings                                    │
│                                                             │
│ Card Layout:                                                │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌──┐                                                  │  │
│ │ │MA│  To: Maria Anderson                             │  │
│ │ └──┘  Climate Policy Director at UN                  │  │
│ │                                                      │  │
│ │ 📋 Bilateral trade agreement discussion              │  │
│ │ ⏱️ 45 minutes • Sent Jan 15, 2025                   │  │
│ │                                                      │  │
│ │                            [Status: Pending] 🟠      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Status Badge Colors:                                       │
│   - pending: 🟠 Orange                                     │
│   - declined: 🔴 Red                                       │
│   - cancelled: ⚫ Gray                                     │
│                                                             │
│ Empty State:                                                │
│   📅 No request history                                    │
│   Sent, declined, and cancelled requests will appear here  │
└────────────────────────────────────────────────────────────┘

TAB 3: Accepted Meetings
┌────────────────────────────────────────────────────────────┐
│ Shows all accepted meeting requests                        │
│                                                             │
│ Card Layout:                                                │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ┌──┐                                                  │  │
│ │ │JD│  Meeting with John Doe                          │  │
│ │ └──┘  Senior Advisor at World Bank                   │  │
│ │                                                      │  │
│ │ 📋 Climate Finance Strategy                          │  │
│ │ ⏱️ 45 minutes • Code: X7K9M2N4                      │  │
│ │ ✅ Confirmed Jan 15, 2025                            │  │
│ │                                                      │  │
│ │ 📍 Booked: Conference Room A at 10:00 AM            │  │
│ │    (if venue booked)                                 │  │
│ │                                                      │  │
│ │ [✏️ Modify] [💬 Chat] [📅 Book Venue] [🗑️ Cancel]   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Action Buttons:                                             │
│                                                             │
│ 1. Modify Button:                                          │
│    - Opens dialog to edit meeting details                  │
│    - Can change: topic, duration, personal message         │
│    - Notifies other participants of changes                │
│    - If duration changes, clears venue booking             │
│                                                             │
│ 2. Chat Button:                                            │
│    - Only for single-user meetings                         │
│    - Links to: /chat?request={meeting_id}                 │
│    - Opens chat interface                                  │
│                                                             │
│ 3. Book Venue Button:                                      │
│    - Opens booking dialog                                  │
│    - Shows available rooms and time slots                  │
│    - Creates venue booking                                 │
│    - Changes to "View Booking" if already booked           │
│                                                             │
│ 4. Cancel Button:                                          │
│    - Opens confirmation dialog                             │
│    - Explains consequences (venue cancellation)            │
│    - Updates meeting status to 'cancelled'                 │
│    - Cancels any associated venue booking                  │
│    - Notifies all participants                             │
│                                                             │
│ Empty State:                                                │
│   ✓ No accepted meetings                                   │
│   Accepted meeting requests will appear here               │
└────────────────────────────────────────────────────────────┘

Modify Meeting Dialog:
┌────────────────────────────────────────────────────────────┐
│ Trigger: Click "Modify" on accepted meeting card           │
│                                                             │
│ Dialog Content:                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │  Modify Meeting Details                             │   │
│ ├─────────────────────────────────────────────────────┤   │
│ │                                                      │   │
│ │  Meeting Code: X7K9M2N4                             │   │
│ │  (blue info box, read-only)                         │   │
│ │                                                      │   │
│ │  ⚠️ Alert:                                           │   │
│ │  Changing the duration will cancel any existing     │   │
│ │  venue booking for this meeting.                    │   │
│ │                                                      │   │
│ │  Meeting Topic *                                    │   │
│ │  ┌────────────────────────────────────────────────┐ │   │
│ │  │ Climate Finance Strategy                       │ │   │
│ │  └────────────────────────────────────────────────┘ │   │
│ │                                                      │   │
│ │  Duration (minutes)                                 │   │
│ │  [45 minutes ▼]                                     │   │
│ │                                                      │   │
│ │  Personal Message (Optional)                        │   │
│ │  ┌────────────────────────────────────────────────┐ │   │
│ │  │ Additional notes about the meeting...          │ │   │
│ │  └────────────────────────────────────────────────┘ │   │
│ │                                                      │   │
│ │              [Cancel]  [Save Changes]               │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ State:                                                      │
│   const [editingMeeting, setEditingMeeting] =              │
│     useState(null);                                        │
│   const [modifyForm, setModifyForm] = useState({           │
│     proposed_topic: '',                                    │
│     proposed_duration: 45,                                 │
│     personal_message: ''                                   │
│   });                                                       │
│   const [saving, setSaving] = useState(false);             │
└────────────────────────────────────────────────────────────┘

Save Modification Process:
┌────────────────────────────────────────────────────────────┐
│ const handleSaveModification = async () => {               │
│   if (!editingMeeting || !modifyForm.proposed_topic) {     │
│     return;                                                │
│   }                                                         │
│                                                             │
│   setSaving(true);                                         │
│   try {                                                     │
│     const originalDuration =                               │
│       editingMeeting.proposed_duration;                    │
│     const newDuration = modifyForm.proposed_duration;      │
│     const durationChanged = originalDuration !== newDuration;│
│                                                             │
│     let venueCleared = false;                              │
│     let associatedBooking = null;                          │
│                                                             │
│     // If duration changing, find and cancel venue booking │
│     if (durationChanged) {                                 │
│       associatedBooking = bookings.find(booking =>         │
│         booking.meeting_request_id === editingMeeting.id &&│
│         booking.status === 'active'                        │
│       );                                                    │
│     }                                                       │
│                                                             │
│     // Update meeting request                              │
│     await MeetingRequest.update(editingMeeting.id, {       │
│       proposed_topic: modifyForm.proposed_topic,           │
│       proposed_duration: newDuration,                      │
│       personal_message: modifyForm.personal_message,       │
│       ...(durationChanged && {                             │
│         venue_booking_id: null  // Clear if duration changed│
│       })                                                    │
│     });                                                     │
│                                                             │
│     // Cancel associated booking if duration changed        │
│     if (associatedBooking) {                               │
│       await VenueBooking.update(associatedBooking.id, {    │
│         status: 'cancelled'                                │
│       });                                                   │
│       venueCleared = true;                                 │
│     }                                                       │
│                                                             │
│     // Notify participants                                 │
│     const participantsToNotify = [                         │
│       editingMeeting.requester_id,                         │
│       ...(editingMeeting.recipient_ids || [])              │
│     ].filter(id => id !== currentUser.id);                 │
│                                                             │
│     for (const participantId of participantsToNotify) {    │
│       const otherUser =                                    │
│         users[participantId] ||                            │
│         await User.get(participantId);                     │
│                                                             │
│       if (otherUser?.notification_preferences              │
│           ?.request_status_update !== false) {             │
│                                                             │
│         await Notification.create({                        │
│           user_id: participantId,                          │
│           type: 'meeting_updated',                         │
│           title: 'Meeting Details Updated',                │
│           body: `${currentUser.full_name} has updated `+   │
│                 `the details for your meeting "`+          │
│                 `${modifyForm.proposed_topic}". `+         │
│                 (venueCleared ?                            │
│                   'The venue has been cleared and needs '+ │
│                   'to be re-booked.' : ''),                │
│           link: createPageUrl("Meetings"),                 │
│           related_entity_id: editingMeeting.id             │
│         });                                                 │
│       }                                                     │
│     }                                                       │
│                                                             │
│     // Close dialog and reload data                        │
│     setEditingMeeting(null);                               │
│     await loadData();                                      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error updating meeting:", error);       │
│   }                                                         │
│   setSaving(false);                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Cancel Meeting Dialog:
┌────────────────────────────────────────────────────────────┐
│ Trigger: Click "Cancel" button on accepted meeting         │
│                                                             │
│ Confirmation Dialog:                                       │
│ ┌─────────────────────────────────────────────────────┐   │
│ │  🗑️ Cancel Meeting                                   │   │
│ ├─────────────────────────────────────────────────────┤   │
│ │                                                      │   │
│ │  Are you sure you want to cancel this meeting?      │   │
│ │  This action cannot be undone.                      │   │
│ │                                                      │   │
│ │  Meeting Details:                                   │   │
│ │  ┌────────────────────────────────────────────────┐ │   │
│ │  │ Meeting: Climate Finance Strategy             │ │   │
│ │  │ With: John Doe                                 │ │   │
│ │  │ Code: X7K9M2N4                                 │ │   │
│ │  └────────────────────────────────────────────────┘ │   │
│ │                                                      │   │
│ │  ⚠️ Warning (if venue booked):                      │   │
│ │  This will also cancel the venue booking for       │   │
│ │  Conference Room A.                                │   │
│ │                                                      │   │
│ │  ℹ️ Note:                                            │   │
│ │  All participants will be notified about the       │   │
│ │  cancellation.                                      │   │
│ │                                                      │   │
│ │        [Keep Meeting]  [🗑️ Cancel Meeting]         │   │
│ └─────────────────────────────────────────────────────┘   │
│                                                             │
│ State:                                                      │
│   const [cancellingMeeting, setCancellingMeeting] =        │
│     useState(null);                                        │
│   const [cancelling, setCancelling] = useState(false);     │
└────────────────────────────────────────────────────────────┘

Cancel Meeting Process:
┌────────────────────────────────────────────────────────────┐
│ const handleCancelMeeting = async (meeting) => {           │
│   setCancelling(true);                                     │
│   try {                                                     │
│     // 1. Update meeting status to cancelled               │
│     await MeetingRequest.update(meeting.id, {              │
│       status: 'cancelled'                                  │
│     });                                                     │
│                                                             │
│     // 2. Cancel any associated venue booking              │
│     const associatedBooking = bookings.find(booking =>     │
│       booking.meeting_request_id === meeting.id &&         │
│       booking.status === 'active'                          │
│     );                                                      │
│                                                             │
│     if (associatedBooking) {                               │
│       await VenueBooking.update(associatedBooking.id, {    │
│         status: 'cancelled'                                │
│       });                                                   │
│     }                                                       │
│                                                             │
│     // 3. Notify all participants                          │
│     const participantsToNotify = [                         │
│       meeting.requester_id,                                │
│       ...(meeting.recipient_ids || [])                     │
│     ].filter(id => id !== currentUser.id);                 │
│                                                             │
│     for (const participantId of participantsToNotify) {    │
│       const otherUser =                                    │
│         users[participantId] ||                            │
│         await User.get(participantId);                     │
│                                                             │
│       if (otherUser?.notification_preferences              │
│           ?.request_status_update !== false) {             │
│                                                             │
│         await Notification.create({                        │
│           user_id: participantId,                          │
│           type: 'request_status_update',                   │
│           title: 'Meeting Cancelled',                      │
│           body: `${currentUser.full_name} has cancelled `+ │
│                 `your meeting "${meeting.proposed_topic}"`+│
│                 ` (Code: ${meeting.meeting_code}).`,       │
│           link: createPageUrl("Meetings"),                 │
│           related_entity_id: meeting.id                    │
│         });                                                 │
│       }                                                     │
│     }                                                       │
│                                                             │
│     // 4. Close dialog and reload data                     │
│     setCancellingMeeting(null);                            │
│     await loadData();                                      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error cancelling meeting:", error);     │
│   }                                                         │
│   setCancelling(false);                                    │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Request Meeting Dialog (from Meetings page):
┌────────────────────────────────────────────────────────────┐
│ Component: RequestMeetingDialog                            │
│ Location: components/meetings/RequestMeetingDialog.jsx     │
│                                                             │
│ Trigger: "Request Meeting" button in page header           │
│                                                             │
│ Features:                                                   │
│   - Choose meeting type (single or multi)                  │
│   - Select one or multiple participants                    │
│   - Enter topic and duration                               │
│   - Add personal message                                   │
│   - Send to all recipients at once                         │
│                                                             │
│ See detailed component specification in Section 7.4        │
└────────────────────────────────────────────────────────────┘
Due to length constraints, shall I continue with:

Section 7.4: Venue Booking System (complete workflow)
Section 7.5: Chat/Messaging System
Section 7.6: Notification System
Section 7.7: Schedule Management
Or would you like me to jump to a specific section like Admin Functionalities, UI/UX Specifications, or User Flows?

37 minutes ago
please complete the description

35 minutes ago
•
see context
Revert this
Base44 AI
Base44

Thought for 3s
UNIConnect - Complete Project Documentation (Continued Part 2)
7.4 Venue Booking System (Complete)
┌─────────────────────────────────────────────────────────────┐
│              VENUE BOOKING SYSTEM COMPLETE FLOW              │
└─────────────────────────────────────────────────────────────┘

Overview:
┌────────────────────────────────────────────────────────────┐
│ The venue booking system allows users to:                  │
│   1. View all available meeting rooms                      │
│   2. See real-time availability in time-slot grid          │
│   3. Book rooms for accepted meetings                      │
│   4. View their schedule of bookings                       │
│                                                             │
│ Admin-specific features:                                    │
│   - Manage rooms (create, edit, delete)                    │
│   - Create private bookings (non-meeting related)          │
│   - View all bookings across all users                     │
│   - Generate usage analytics                               │
└────────────────────────────────────────────────────────────┘

DATABASE ENTITIES:

VenueRoom Entity:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "name": "string",              // e.g., "Conference Room A"│
│   "type": "small" | "large",     // Room size category    │
│   "capacity": number,            // Max occupancy          │
│   "floor": number,               // Floor level            │
│   "location": "string",          // Optional: Wing/Section │
│   "contact": "string",           // Optional: Contact info │
│   "description": "string",       // Optional: Details      │
│   "equipment": ["string"],       // ["Wifi", "Projector"]  │
│   "is_active": boolean           // Available for booking? │
│ }                                                           │
│                                                             │
│ Built-in fields (automatic):                               │
│   - id                                                      │
│   - created_date                                            │
│   - updated_date                                            │
│   - created_by                                              │
│                                                             │
│ RLS Rules: Anyone can read, only admins can write          │
└────────────────────────────────────────────────────────────┘

VenueBooking Entity:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "room_id": "string",           // ID of VenueRoom        │
│   "room_name": "string",         // Snapshot of room name  │
│   "room_type": "small"|"large",  // Snapshot of room type  │
│   "capacity": number,            // Snapshot of capacity   │
│   "floor_level": number,         // Snapshot of floor      │
│   "equipment": ["string"],       // Snapshot of equipment  │
│   "booked_by": "string",         // User ID who booked     │
│   "booking_type": "meeting"|"private", // Type of booking  │
│   "meeting_request_id": "string",// Associated meeting ID  │
│   "private_meeting_topic": "string", // Topic (if private) │
│   "start_time": "datetime",      // Booking start          │
│   "end_time": "datetime",        // Booking end            │
│   "status": "active"|"completed"|"cancelled" // Status     │
│ }                                                           │
│                                                             │
│ RLS Rules:                                                  │
│   - Users can read their own bookings                      │
│   - Users can read bookings for their meetings             │
│   - Admins can read all bookings                           │
│   - Only booker or admin can cancel                        │
└────────────────────────────────────────────────────────────┘

PAGE 1: VENUES SCHEDULE (Public View)
┌────────────────────────────────────────────────────────────┐
│ File: pages/Venues.js                                       │
│ Route: /venues                                              │
│ Access: All authenticated users                            │
│                                                             │
│ Purpose:                                                    │
│   - View all venue bookings in calendar format             │
│   - See room availability                                  │
│   - Quick access to book venues for meetings               │
│   - Filter by date                                         │
└────────────────────────────────────────────────────────────┘

Venues Page Layout:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header                                                │  │
│ │ 📅 Venue Schedule                                     │  │
│ │                                                        │  │
│ │ [◀ Previous Day] January 15, 2025 [Next Day ▶]      │  │
│ │                                        [🔄 Refresh]   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ ScheduleView Component (Time-slot Grid)              │  │
│ │                                                        │  │
│ │ Time →  08:00  08:30  09:00  09:30  10:00  10:30    │  │
│ │ ↓ Room                                                │  │
│ │                                                        │  │
│ │ Conf A  [Available][████ Booked ████][Available]     │  │
│ │         John Doe - Climate Policy                     │  │
│ │         09:00 - 10:30                                 │  │
│ │                                                        │  │
│ │ Conf B  [████████ Booked ████████][Available]        │  │
│ │         Maria Silva - Trade Discussion                │  │
│ │         08:00 - 10:00                                 │  │
│ │                                                        │  │
│ │ Meet C  [Available][Available][Available]            │  │
│ │                                                        │  │
│ │ ...     (More rooms)                                  │  │
│ │                                                        │  │
│ │ Legend:                                               │  │
│ │ [     ] Available  [████] Booked  [////] Your Booking│  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Data Loading (Venues Page):
┌────────────────────────────────────────────────────────────┐
│ const loadData = async () => {                             │
│   setLoading(true);                                        │
│   try {                                                     │
│     const user = await User.me();                          │
│     setCurrentUser(user);                                  │
│                                                             │
│     // Fetch all necessary data                            │
│     const [allUsers, allRooms, allBookings, allMeetings] = │
│       await Promise.all([                                  │
│         User.list(),                                       │
│         VenueRoom.list(),                                  │
│         VenueBooking.list('-created_date'),                │
│         MeetingRequest.filter({status: 'accepted'})        │
│       ]);                                                   │
│                                                             │
│     // Create user lookup                                  │
│     const userLookup = {};                                 │
│     allUsers.forEach(u => userLookup[u.id] = u);           │
│     setUsers(userLookup);                                  │
│                                                             │
│     // Filter active rooms only                            │
│     const activeRooms = allRooms.filter(r => r.is_active); │
│     setRooms(activeRooms);                                 │
│                                                             │
│     setBookings(allBookings);                              │
│     setAcceptedMeetings(allMeetings);                      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading venues:", error);         │
│   }                                                         │
│   setLoading(false);                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

ScheduleView Component (Detailed):
┌────────────────────────────────────────────────────────────┐
│ File: components/venues/ScheduleView.jsx                    │
│                                                             │
│ Props:                                                      │
│   - rooms: VenueRoom[]                                     │
│   - bookings: VenueBooking[]                               │
│   - selectedDate: string (YYYY-MM-DD)                      │
│   - users: Record<string, User>                            │
│   - currentUser: User                                      │
│   - acceptedMeetings?: MeetingRequest[]                    │
│   - onTimeSlotClick?: (room, time) => void                 │
│   - isRoomAvailable?: (room, time) => boolean              │
│   - mode?: 'view' | 'book'                                 │
│                                                             │
│ Configuration:                                              │
│   START_HOUR = 8   // 8:00 AM                              │
│   END_HOUR = 20    // 8:00 PM                              │
│   SLOT_DURATION = 30  // minutes                           │
│   TOTAL_SLOTS = 24 // (12 hours × 2)                       │
└────────────────────────────────────────────────────────────┘

Generate Time Slots:
┌────────────────────────────────────────────────────────────┐
│ const generateTimeSlots = () => {                          │
│   const slots = [];                                        │
│   for (let hour = START_HOUR; hour < END_HOUR; hour++) {   │
│     for (let minute of [0, 30]) {                          │
│       const timeString = `${hour.toString()                │
│         .padStart(2, '0')}:${minute.toString()             │
│         .padStart(2, '0')}`;                               │
│       slots.push({                                         │
│         time: timeString,                                  │
│         display: format(                                   │
│           new Date(`2000-01-01T${timeString}`),            │
│           'h:mm a'                                         │
│         )                                                   │
│       });                                                   │
│     }                                                       │
│   }                                                         │
│   return slots;                                            │
│ };                                                          │
│                                                             │
│ Result: [                                                   │
│   {time: '08:00', display: '8:00 AM'},                     │
│   {time: '08:30', display: '8:30 AM'},                     │
│   {time: '09:00', display: '9:00 AM'},                     │
│   ...                                                       │
│   {time: '19:30', display: '7:30 PM'}                      │
│ ]                                                           │
└────────────────────────────────────────────────────────────┘

Check Slot Availability:
┌────────────────────────────────────────────────────────────┐
│ const isSlotBooked = (room, slotTime) => {                 │
│   // Convert slot time to datetime                         │
│   const slotStart = new Date(                              │
│     `${selectedDate}T${slotTime}:00`                       │
│   );                                                        │
│   const slotEnd = new Date(                                │
│     slotStart.getTime() + SLOT_DURATION * 60 * 1000        │
│   );                                                        │
│                                                             │
│   // Check if any booking overlaps this slot               │
│   return bookings.some(booking => {                        │
│     // Filter by room and active status                    │
│     if (booking.room_id !== room.id) return false;         │
│     if (booking.status !== 'active') return false;         │
│                                                             │
│     const bookingStart = new Date(booking.start_time);     │
│     const bookingEnd = new Date(booking.end_time);         │
│                                                             │
│     // Check for time overlap                              │
│     const startsInSlot =                                   │
│       bookingStart >= slotStart && bookingStart < slotEnd; │
│     const endsInSlot =                                     │
│       bookingEnd > slotStart && bookingEnd <= slotEnd;     │
│     const spansSlot =                                      │
│       bookingStart <= slotStart && bookingEnd >= slotEnd;  │
│                                                             │
│     return startsInSlot || endsInSlot || spansSlot;        │
│   });                                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Get Booking for Slot:
┌────────────────────────────────────────────────────────────┐
│ const getBookingForSlot = (room, slotTime) => {            │
│   const slotStart = new Date(                              │
│     `${selectedDate}T${slotTime}:00`                       │
│   );                                                        │
│   const slotEnd = new Date(                                │
│     slotStart.getTime() + SLOT_DURATION * 60 * 1000        │
│   );                                                        │
│                                                             │
│   return bookings.find(booking => {                        │
│     if (booking.room_id !== room.id) return false;         │
│     if (booking.status !== 'active') return false;         │
│                                                             │
│     const bookingStart = new Date(booking.start_time);     │
│     const bookingEnd = new Date(booking.end_time);         │
│                                                             │
│     // Return booking if slot falls within its timerange   │
│     return slotStart >= bookingStart &&                    │
│            slotStart < bookingEnd;                         │
│   });                                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Calculate Booking Span:
┌────────────────────────────────────────────────────────────┐
│ const calculateBookingSpan = (booking) => {                │
│   const start = new Date(booking.start_time);              │
│   const end = new Date(booking.end_time);                  │
│                                                             │
│   // Calculate duration in minutes                         │
│   const durationMinutes = (end - start) / (1000 * 60);     │
│                                                             │
│   // Convert to number of slots                            │
│   const numSlots = Math.ceil(durationMinutes / SLOT_DURATION);│
│                                                             │
│   return numSlots;                                         │
│ };                                                          │
│                                                             │
│ Example:                                                    │
│   Booking: 09:00 - 10:30 (90 minutes)                      │
│   Result: Math.ceil(90 / 30) = 3 slots                     │
└────────────────────────────────────────────────────────────┘

Grid Rendering Logic:
┌────────────────────────────────────────────────────────────┐
│ <div className="schedule-grid">                            │
│   {/* Header Row - Time Labels */}                         │
│   <div className="time-header">                            │
│     <div className="room-label-cell">Rooms</div>           │
│     {timeSlots.map(slot => (                               │
│       <div key={slot.time} className="time-cell">          │
│         {slot.display}                                     │
│       </div>                                               │
│     ))}                                                     │
│   </div>                                                    │
│                                                             │
│   {/* Room Rows */}                                        │
│   {rooms.map(room => {                                     │
│     // Track which slots are already rendered              │
│     const renderedSlots = new Set();                       │
│                                                             │
│     return (                                               │
│       <div key={room.id} className="room-row">            │
│         {/* Room Label */}                                 │
│         <div className="room-label">                       │
│           <div className="room-name">{room.name}</div>     │
│           <div className="room-info">                      │
│             Floor {room.floor} • {room.capacity} seats     │
│           </div>                                           │
│         </div>                                             │
│                                                             │
│         {/* Time Slots */}                                 │
│         <div className="slots-container">                  │
│           {timeSlots.map(slot => {                         │
│             // Skip if already rendered as part of span    │
│             if (renderedSlots.has(slot.time)) {            │
│               return null;                                 │
│             }                                               │
│                                                             │
│             const booking = getBookingForSlot(             │
│               room,                                        │
│               slot.time                                    │
│             );                                              │
│                                                             │
│             if (booking) {                                 │
│               // Check if this is the start of booking     │
│               const bookingStart = format(                 │
│                 new Date(booking.start_time),              │
│                 'HH:mm'                                    │
│               );                                            │
│                                                             │
│               if (bookingStart === slot.time) {            │
│                 // Render booking block                    │
│                 const span = calculateBookingSpan(booking);│
│                                                             │
│                 // Mark slots as rendered                  │
│                 for (let i = 0; i < span; i++) {           │
│                   const slotIndex =                        │
│                     timeSlots.findIndex(                   │
│                       s => s.time === slot.time            │
│                     ) + i;                                 │
│                   if (slotIndex < timeSlots.length) {      │
│                     renderedSlots.add(                     │
│                       timeSlots[slotIndex].time            │
│                     );                                      │
│                   }                                         │
│                 }                                           │
│                                                             │
│                 return (                                   │
│                   <BookingBlock                            │
│                     key={`${room.id}-${slot.time}`}        │
│                     booking={booking}                      │
│                     span={span}                            │
│                     user={users[booking.booked_by]}        │
│                     isOwnBooking={                         │
│                       booking.booked_by === currentUser?.id│
│                     }                                       │
│                     onClick={() =>                         │
│                       handleBookingClick(booking)          │
│                     }                                       │
│                   />                                        │
│                 );                                          │
│               } else {                                     │
│                 // Part of existing booking, don't render  │
│                 return null;                               │
│               }                                             │
│             } else {                                       │
│               // Available slot                            │
│               return (                                     │
│                 <div                                       │
│                   key={`${room.id}-${slot.time}`}          │
│                   className="available-slot"               │
│                   onClick={() =>                           │
│                     onTimeSlotClick?.(room, slot.time)     │
│                   }                                         │
│                 >                                           │
│                   {/* Empty/clickable for booking */}      │
│                 </div>                                      │
│               );                                            │
│             }                                               │
│           })}                                               │
│         </div>                                              │
│       </div>                                                │
│     );                                                      │
│   })}                                                       │
│ </div>                                                      │
└────────────────────────────────────────────────────────────┘

BookingBlock Component:
┌────────────────────────────────────────────────────────────┐
│ const BookingBlock = ({                                    │
│   booking,                                                  │
│   span,                                                     │
│   user,                                                     │
│   isOwnBooking,                                            │
│   onClick                                                   │
│ }) => {                                                     │
│   // Get meeting details if exists                         │
│   const meeting = booking.meeting_request_id ?             │
│     acceptedMeetings.find(                                 │
│       m => m.id === booking.meeting_request_id             │
│     ) : null;                                               │
│                                                             │
│   const displayTopic =                                     │
│     booking.booking_type === 'private' ?                   │
│       booking.private_meeting_topic :                      │
│       meeting?.proposed_topic || 'Meeting';                │
│                                                             │
│   return (                                                  │
│     <div                                                    │
│       className={`booking-block ${                         │
│         isOwnBooking ? 'own-booking' : ''                  │
│       }`}                                                   │
│       style={{                                             │
│         gridColumn: `span ${span}`,                        │
│         background: isOwnBooking ?                         │
│           'linear-gradient(135deg, #667eea, #764ba2)' :    │
│           'linear-gradient(135deg, #f093fb, #f5576c)'      │
│       }}                                                    │
│       onClick={onClick}                                    │
│     >                                                       │
│       <div className="booking-content">                    │
│         {booking.booking_type === 'private' && (           │
│           <Badge className="private-badge">Private</Badge> │
│         )}                                                  │
│         <div className="booking-topic">{displayTopic}</div>│
│         <div className="booking-user">                     │
│           {user?.full_name || 'Unknown User'}              │
│         </div>                                              │
│         <div className="booking-time">                     │
│           {format(new Date(booking.start_time), 'HH:mm')} -│
│           {format(new Date(booking.end_time), 'HH:mm')}    │
│         </div>                                              │
│       </div>                                                │
│     </div>                                                  │
│   );                                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Booking Details Popover:
┌────────────────────────────────────────────────────────────┐
│ When user clicks a booking block:                          │
│                                                             │
│ ┌─────────────────────────────────────────────────────┐   │
│ │  📅 Booking Details                                  │   │
│ ├─────────────────────────────────────────────────────┤   │
│ │                                                      │   │
│ │  Room: Conference Room A                            │   │
│ │  Floor: 2 • Capacity: 15                            │   │
│ │                                                      │   │
│ │  Topic: Bilateral Trade Agreement Discussion        │   │
│ │  Type: Meeting Booking                              │   │
│ │  Code: X7K9M2N4                                     │   │
│ │                                                      │   │
│ │  Booked by: John Doe                                │   │
│ │  Organization: Department of State                  │   │
│ │                                                      │   │
│ │  Time: January 15, 2025                             │   │
│ │  From: 10:00 AM                                     │   │
│ │  To: 11:30 AM (90 minutes)                          │   │
│ │                                                      │   │
│ │  Equipment:                                         │   │
│ │  [Wifi] [Projector] [Whiteboard]                    │   │
│ │                                                      │   │
│ │  {if isOwnBooking}                                  │   │
│ │    [View Meeting Details] [Cancel Booking]          │   │
│ │  {else}                                             │   │
│ │    [Close]                                          │   │
│ └─────────────────────────────────────────────────────┘   │
└────────────────────────────────────────────────────────────┘

USER BOOKING FLOW:
┌────────────────────────────────────────────────────────────┐
│ Component: components/meetings/BookingDialog.jsx            │
│                                                             │
│ Trigger: "Book Venue" button on accepted meeting card      │
│                                                             │
│ Purpose: Book a room for an accepted meeting               │
└────────────────────────────────────────────────────────────┘

BookingDialog Structure:
┌────────────────────────────────────────────────────────────┐
│ Props:                                                      │
│   - meeting: MeetingRequest (accepted meeting)             │
│   - currentUser: User                                      │
│   - onBookingSuccess: () => void                           │
│                                                             │
│ State:                                                      │
│   const [selectedDate, setSelectedDate] =                  │
│     useState(new Date().toISOString().split('T')[0]);      │
│   const [selectedTime, setSelectedTime] = useState('');    │
│   const [selectedRoom, setSelectedRoom] = useState(null);  │
│   const [availableRooms, setAvailableRooms] = useState([]); │
│   const [booking, setBooking] = useState(false);           │
│   const [rooms, setRooms] = useState([]);                  │
│   const [bookings, setBookings] = useState([]);            │
└────────────────────────────────────────────────────────────┘

Dialog Content:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  📅 Book Venue for Meeting                            │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │                                                        │  │
│ │  Meeting Information:                                 │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Topic: Bilateral Trade Agreement Discussion   │  │  │
│ │  │ Duration: 45 minutes                           │  │  │
│ │  │ Code: X7K9M2N4                                 │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Select Date                                          │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [<] January 15, 2025 [>]                       │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Select Start Time                                    │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [Dropdown ▼]                                   │  │  │
│ │  │   08:00 AM                                     │  │  │
│ │  │   08:30 AM                                     │  │  │
│ │  │   09:00 AM                                     │  │  │
│ │  │   ... (all 30-min slots from 8 AM to 7:30 PM) │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Available Rooms                                      │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ (•) Conference Room A                          │  │  │
│ │  │     Floor 2 • Capacity: 15                     │  │  │
│ │  │     Equipment: Wifi, Projector, Whiteboard     │  │  │
│ │  ├────────────────────────────────────────────────┤  │  │
│ │  │ ( ) Conference Room B                          │  │  │
│ │  │     Floor 3 • Capacity: 20                     │  │  │
│ │  │     ⚠️ Already booked at this time             │  │  │
│ │  ├────────────────────────────────────────────────┤  │  │
│ │  │ (•) Meeting Room C                             │  │  │
│ │  │     Floor 2 • Capacity: 8                      │  │  │
│ │  │     Equipment: Wifi                            │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Booking Summary:                                     │  │
│ │  Conference Room A on Jan 15, 2025                    │  │
│ │  From 10:00 AM to 10:45 AM                            │  │
│ │                                                        │  │
│ │                  [Cancel]  [Confirm Booking]          │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Load Rooms and Check Availability:
┌────────────────────────────────────────────────────────────┐
│ useEffect(() => {                                          │
│   loadRoomsAndBookings();                                  │
│ }, []);                                                     │
│                                                             │
│ useEffect(() => {                                          │
│   if (selectedDate && selectedTime) {                      │
│     filterAvailableRooms();                                │
│   }                                                         │
│ }, [selectedDate, selectedTime, rooms, bookings]);         │
│                                                             │
│ const loadRoomsAndBookings = async () => {                 │
│   try {                                                     │
│     const [allRooms, allBookings] = await Promise.all([    │
│       VenueRoom.list(),                                    │
│       VenueBooking.list()                                  │
│     ]);                                                     │
│                                                             │
│     // Only active rooms                                   │
│     const activeRooms = allRooms.filter(r => r.is_active); │
│     setRooms(activeRooms);                                 │
│     setBookings(allBookings);                              │
│   } catch (error) {                                        │
│     console.error("Error loading rooms:", error);          │
│   }                                                         │
│ };                                                          │
│                                                             │
│ const filterAvailableRooms = () => {                       │
│   const available = rooms.map(room => {                    │
│     const isAvailable = checkRoomAvailability(             │
│       room,                                                │
│       selectedDate,                                        │
│       selectedTime,                                        │
│       meeting.proposed_duration                            │
│     );                                                      │
│                                                             │
│     return {                                               │
│       ...room,                                             │
│       available: isAvailable                               │
│     };                                                      │
│   });                                                       │
│                                                             │
│   setAvailableRooms(available);                            │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Check Room Availability Function:
┌────────────────────────────────────────────────────────────┐
│ const checkRoomAvailability = (                            │
│   room,                                                     │
│   date,                                                     │
│   startTime,                                               │
│   durationMinutes                                          │
│ ) => {                                                      │
│   // Calculate booking time range                          │
│   const bookingStart = new Date(`${date}T${startTime}:00`);│
│   const bookingEnd = new Date(                             │
│     bookingStart.getTime() + durationMinutes * 60 * 1000   │
│   );                                                        │
│                                                             │
│   // Check for conflicts with existing bookings            │
│   const hasConflict = bookings.some(booking => {           │
│     if (booking.room_id !== room.id) return false;         │
│     if (booking.status !== 'active') return false;         │
│                                                             │
│     const existingStart = new Date(booking.start_time);    │
│     const existingEnd = new Date(booking.end_time);        │
│                                                             │
│     // Check all overlap scenarios                         │
│     const newStartsInExisting =                            │
│       bookingStart >= existingStart &&                     │
│       bookingStart < existingEnd;                          │
│                                                             │
│     const newEndsInExisting =                              │
│       bookingEnd > existingStart &&                        │
│       bookingEnd <= existingEnd;                           │
│                                                             │
│     const newSpansExisting =                               │
│       bookingStart <= existingStart &&                     │
│       bookingEnd >= existingEnd;                           │
│                                                             │
│     return newStartsInExisting ||                          │
│            newEndsInExisting ||                            │
│            newSpansExisting;                               │
│   });                                                       │
│                                                             │
│   return !hasConflict;                                     │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Create Booking Process:
┌────────────────────────────────────────────────────────────┐
│ const handleConfirmBooking = async () => {                 │
│   if (!selectedRoom || !selectedDate || !selectedTime) {   │
│     return;                                                │
│   }                                                         │
│                                                             │
│   setBooking(true);                                        │
│   try {                                                     │
│     // Double-check availability (race condition protection)│
│     const stillAvailable = checkRoomAvailability(          │
│       selectedRoom,                                        │
│       selectedDate,                                        │
│       selectedTime,                                        │
│       meeting.proposed_duration                            │
│     );                                                      │
│                                                             │
│     if (!stillAvailable) {                                 │
│       alert("This room is no longer available");           │
│       await loadRoomsAndBookings(); // Refresh             │
│       return;                                              │
│     }                                                       │
│                                                             │
│     // Calculate exact start and end times                 │
│     const startDateTime = new Date(                        │
│       `${selectedDate}T${selectedTime}:00`                 │
│     );                                                      │
│     const endDateTime = new Date(                          │
│       startDateTime.getTime() +                            │
│       meeting.proposed_duration * 60 * 1000                │
│     );                                                      │
│                                                             │
│     // Create booking                                      │
│     const newBooking = await VenueBooking.create({         │
│       room_id: selectedRoom.id,                            │
│       room_name: selectedRoom.name,                        │
│       room_type: selectedRoom.type,                        │
│       capacity: selectedRoom.capacity,                     │
│       floor_level: selectedRoom.floor,                     │
│       equipment: selectedRoom.equipment || [],             │
│       booked_by: currentUser.id,                           │
│       booking_type: 'meeting',                             │
│       meeting_request_id: meeting.id,                      │
│       start_time: startDateTime.toISOString(),             │
│       end_time: endDateTime.toISOString(),                 │
│       status: 'active'                                     │
│     });                                                     │
│                                                             │
│     // Update meeting with booking reference                │
│     await MeetingRequest.update(meeting.id, {              │
│       venue_booking_id: newBooking.id                      │
│     });                                                     │
│                                                             │
│     // Notify all meeting participants                     │
│     const participants = [                                 │
│       meeting.requester_id,                                │
│       ...(meeting.recipient_ids || [])                     │
│     ].filter(id => id !== currentUser.id);                 │
│                                                             │
│     for (const participantId of participants) {            │
│       const participant = await User.get(participantId);   │
│                                                             │
│       if (participant.notification_preferences             │
│           ?.booking_confirmed !== false) {                 │
│                                                             │
│         await Notification.create({                        │
│           user_id: participantId,                          │
│           type: 'booking_confirmed',                       │
│           title: 'Venue Confirmed',                        │
│           body: `${selectedRoom.name} has been booked for`+│
│                 ` your meeting "${meeting.proposed_topic}"`+│
│                 ` at ${format(startDateTime,               │
│                   'MMM d, h:mm a')}`,                      │
│           link: createPageUrl("Schedule"),                 │
│           related_entity_id: newBooking.id,                │
│           is_read: false                                   │
│         });                                                 │
│       }                                                     │
│     }                                                       │
│                                                             │
│     // Success callback                                    │
│     onBookingSuccess?.();                                  │
│                                                             │
│     // Close dialog                                        │
│     // Show success message                                │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error creating booking:", error);       │
│     alert("Failed to create booking. Please try again.");  │
│   }                                                         │
│   setBooking(false);                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

ADMIN ROOM MANAGEMENT:
┌────────────────────────────────────────────────────────────┐
│ Page: pages/Rooms.js                                        │
│ Route: /rooms                                               │
│ Access: Admin users only                                   │
│                                                             │
│ Features:                                                   │
│   - View all rooms (grid view)                             │
│   - Create new rooms                                       │
│   - Edit room details                                      │
│   - Delete rooms                                           │
│   - Toggle room active status                              │
│   - Create private bookings                                │
│   - View general schedule                                  │
└────────────────────────────────────────────────────────────┘

Rooms Page Layout:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header                                                │  │
│ │ 🏢 Room Management                                    │  │
│ │                         [🔄 Refresh]  [+ Add Room]   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Tabs                                                  │  │
│ │ [Manage Rooms (5)] [General Schedule]                │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ TAB 1: Manage Rooms                                        │
│ ┌────────┬────────┬────────┐                              │
│ │ Room 1 │ Room 2 │ Room 3 │  (3-column grid)             │
│ │ Card   │ Card   │ Card   │                              │
│ ├────────┼────────┼────────┤                              │
│ │ Room 4 │ Room 5 │        │                              │
│ └────────┴────────┴────────┘                              │
│                                                             │
│ TAB 2: General Schedule                                    │
│   (Shows ScheduleView component)                           │
└────────────────────────────────────────────────────────────┘

Room Card Structure:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Conference Room A                  [Active] [⋮ Menu] │  │
│ │ Large Conference Room                                 │  │
│ │                                                        │  │
│ │ 👥 15 seats    📍 Floor 2    🏢 North Wing           │  │
│ │                                                        │  │
│ │ Description:                                          │  │
│ │ Modern conference room with floor-to-ceiling          │  │
│ │ windows and natural lighting...                       │  │
│ │                                                        │  │
│ │ Contact:                                              │  │
│ │ facilities@example.com | Ext. 2234                    │  │
│ │                                                        │  │
│ │ Equipment:                                            │  │
│ │ [📡 Wifi] [📽️ Projector] [🖥️ Monitor] [☕ Coffee]    │  │
│ │                                                        │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ Room Active               [Toggle Switch ON]   │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Menu (⋮) Options:                                          │
│   - Edit Details                                           │
│   - Private Reserve                                        │
│   - Delete Room                                            │
└────────────────────────────────────────────────────────────┘

Room Form Dialog (Create/Edit):
┌────────────────────────────────────────────────────────────┐
│ Component: components/venues/RoomFormDialog.jsx             │
│                                                             │
│ Props:                                                      │
│   - room?: VenueRoom (for editing, null for creating)      │
│   - onSave: (roomData) => Promise<void>                    │
│                                                             │
│ State:                                                      │
│   const [formData, setFormData] = useState({               │
│     name: '',                                              │
│     type: 'small',                                         │
│     capacity: 0,                                           │
│     floor: 1,                                              │
│     location: '',                                          │
│     contact: '',                                           │
│     description: '',                                       │
│     equipment: [],                                         │
│     is_active: true                                        │
│   });                                                       │
│   const [saving, setSaving] = useState(false);             │
└────────────────────────────────────────────────────────────┘

Room Form Content:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  {room ? 'Edit Room' : 'Create New Room'}            │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │                                                        │  │
│ │  Room Name *                                          │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Conference Room A                              │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Room Type *              Capacity *                  │  │
│ │  ┌──────────────┐  ┌──────────────┐                  │  │
│ │  │ [v] Small    │  │ 15           │                  │  │
│ │  │     Large    │  └──────────────┘                  │  │
│ │  └──────────────┘                                     │  │
│ │                                                        │  │
│ │  Floor Level *            Location                    │  │
│ │  ┌──────────────┐  ┌──────────────┐                  │  │
│ │  │ 2            │  │ North Wing   │                  │  │
│ │  └──────────────┘  └──────────────┘                  │  │
│ │                                                        │  │
│ │  Contact Information                                  │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ facilities@example.com | Ext. 2234             │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Description                                          │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ Modern conference room with...                 │  │  │
│ │  │                                                 │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Equipment                                            │  │
│ │  [x] Wifi        [x] Projector                        │  │
│ │  [x] Monitor     [ ] Whiteboard                       │  │
│ │  [ ] Coffee      [ ] Video Conference                 │  │
│ │                                                        │  │
│ │  Active Status                                        │  │
│ │  [x] Room is available for booking                    │  │
│ │                                                        │  │
│ │              [Cancel]  [Save Room]                    │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Save Room Function:
┌────────────────────────────────────────────────────────────┐
│ const handleSaveRoom = async () => {                       │
│   // Validation                                            │
│   if (!formData.name || !formData.capacity || !formData.floor) {│
│     alert("Please fill required fields");                  │
│     return;                                                │
│   }                                                         │
│                                                             │
│   setSaving(true);                                         │
│   try {                                                     │
│     if (room) {                                            │
│       // Update existing room                              │
│       await VenueRoom.update(room.id, formData);           │
│     } else {                                               │
│       // Create new room                                   │
│       await VenueRoom.create(formData);                    │
│     }                                                       │
│                                                             │
│     onSave?.();  // Callback to parent                     │
│     // Close dialog                                        │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error saving room:", error);            │
│     alert("Failed to save room");                          │
│   }                                                         │
│   setSaving(false);                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Delete Room Function:
┌────────────────────────────────────────────────────────────┐
│ const handleDeleteRoom = async (roomId) => {               │
│   // Confirmation                                          │
│   if (!window.confirm(                                     │
│     "Are you sure you want to delete this room? " +        │
│     "This action cannot be undone."                        │
│   )) {                                                      │
│     return;                                                │
│   }                                                         │
│                                                             │
│   try {                                                     │
│     await VenueRoom.delete(roomId);                        │
│     await loadData(); // Refresh list                      │
│   } catch (error) {                                        │
│     console.error("Error deleting room:", error);          │
│     alert("Failed to delete room");                        │
│   }                                                         │
│ };                                                          │
│                                                             │
│ Note: Delete should check for active bookings first        │
│       and warn admin if bookings exist                     │
└────────────────────────────────────────────────────────────┘

Toggle Room Active Status:
┌────────────────────────────────────────────────────────────┐
│ const handleToggleRoomActive = async (room) => {           │
│   try {                                                     │
│     await VenueRoom.update(room.id, {                      │
│       is_active: !room.is_active                           │
│     });                                                     │
│     await loadData(); // Refresh                           │
│   } catch (error) {                                        │
│     console.error("Error toggling room status:", error);   │
│   }                                                         │
│ };                                                          │
│                                                             │
│ Effect:                                                     │
│   - When is_active = false:                                │
│     * Room disappears from user booking options            │
│     * Existing bookings remain valid                       │
│     * Admin can still see room in management               │
│     * Room shown with "Inactive" badge                     │
│   - When is_active = true:                                 │
│     * Room appears in booking options                      │
│     * Normal functionality                                 │
└────────────────────────────────────────────────────────────┘

Private Booking Dialog:
┌────────────────────────────────────────────────────────────┐
│ Component: components/venues/PrivateBookingDialog.jsx       │
│                                                             │
│ Props:                                                      │
│   - room: VenueRoom                                        │
│   - onSave: (room, start, end, topic) => Promise<void>     │
│                                                             │
│ Purpose: Allow admin to book room for non-meeting purposes │
└────────────────────────────────────────────────────────────┘

Private Booking Form:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │  🔒 Create Private Booking (Admin)                    │  │
│ ├──────────────────────────────────────────────────────┤  │
│ │                                                        │  │
│ │  Room: Conference Room A                              │  │
│ │  (Read-only, pre-filled)                              │  │
│ │                                                        │  │
│ │  Meeting Topic *                                      │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ VIP Bilateral Summit                           │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Date *                                               │  │
│ │  ┌────────────────────────────────────────────────┐  │  │
│ │  │ [📅] 2025-01-15                                │  │  │
│ │  └────────────────────────────────────────────────┘  │  │
│ │                                                        │  │
│ │  Start Time *        End Time *                       │  │
│ │  ┌──────────────┐  ┌──────────────┐                  │  │
│ │  │ [v] 10:00 AM │  │ [v] 11:30 AM │                  │  │
│ │  └──────────────┘  └──────────────┘                  │  │
│ │                                                        │  │
│ │  Duration: 90 minutes (auto-calculated)               │  │
│ │                                                        │  │
│ │  ℹ️ Note: This booking will not be linked to any      │  │
│ │  meeting request and will appear as "Private" in      │  │
│ │  the schedule.                                        │  │
│ │                                                        │  │
│ │              [Cancel]  [Create Booking]               │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Create Private Booking:
┌────────────────────────────────────────────────────────────┐
│ const handlePrivateBooking = async (                       │
│   room,                                                     │
│   startTime,                                               │
│   endTime,                                                  │
│   topic                                                     │
│ ) => {                                                      │
│   try {                                                     │
│     // Validate times                                      │
│     if (endTime <= startTime) {                            │
│       alert("End time must be after start time");          │
│       return;                                              │
│     }                                                       │
│                                                             │
│     // Check availability                                  │
│     const duration =                                       │
│       (endTime - startTime) / (1000 * 60); // minutes      │
│                                                             │
│     const isAvailable = checkRoomAvailability(             │
│       room,                                                │
│       format(startTime, 'yyyy-MM-dd'),                     │
│       format(startTime, 'HH:mm'),                          │
│       duration                                             │
│     );                                                      │
│                                                             │
│     if (!isAvailable) {                                    │
│       alert("Room not available at selected time");        │
│       return;                                              │
│     }                                                       │
│                                                             │
│     // Create booking                                      │
│     await VenueBooking.create({                            │
│       room_id: room.id,                                    │
│       room_name: room.name,                                │
│       room_type: room.type,                                │
│       capacity: room.capacity,                             │
│       booked_by: currentUser.id,                           │
│       start_time: startTime.toISOString(),                 │
│       end_time: endTime.toISOString(),                     │
│       floor_level: room.floor,                             │
│       equipment: room.equipment || [],                     │
│       booking_type: 'private',                             │
│       private_meeting_topic: topic,                        │
│       status: 'active',                                    │
│       meeting_request_id: null  // No meeting link         │
│     });                                                     │
│                                                             │
│     await loadData(); // Refresh                           │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error creating private booking:", error);│
│     alert("Failed to create booking");                     │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Booking Display Rules:
┌────────────────────────────────────────────────────────────┐
│ In Schedule Grid:                                          │
│                                                             │
│ Meeting Booking (booking_type = 'meeting'):                │
│   Display:                                                 │
│     - Meeting topic from MeetingRequest                    │
│     - Booked by user's name                                │
│     - Time range                                           │
│     - Blue/purple gradient background                      │
│   Click: Show meeting details popover                      │
│                                                             │
│ Private Booking (booking_type = 'private'):                │
│   Display:                                                 │
│     - Custom topic from private_meeting_topic              │
│     - [Private] badge                                      │
│     - Booked by admin name                                 │
│     - Time range                                           │
│     - Red/pink gradient background                         │
│   Click: Show booking details (admin can cancel)           │
│                                                             │
│ User's Own Booking:                                        │
│   - Brighter color scheme                                  │
│   - Special highlight/glow effect                          │
│   - Show action buttons on hover                           │
└────────────────────────────────────────────────────────────┘

MY SCHEDULE PAGE:
┌────────────────────────────────────────────────────────────┐
│ Page: pages/Schedule.js                                     │
│ Route: /schedule                                            │
│ Access: All authenticated users                            │
│                                                             │
│ Purpose: Show user's personal schedule of bookings         │
└────────────────────────────────────────────────────────────┘

Schedule Page Features:
┌────────────────────────────────────────────────────────────┐
│ - Calendar view of user's bookings only                    │
│ - Filter by date range                                     │
│ - List view and grid view options                          │
│ - Quick links to meeting details                           │
│ - Export to calendar (future feature)                      │
└────────────────────────────────────────────────────────────┘

Schedule Page Layout:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header                                                │  │
│ │ 📅 My Schedule                                        │  │
│ │                                                        │  │
│ │ [Week View] [Month View]           [Today] [🔄]      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Week View:                                                 │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Mon 15   Tue 16   Wed 17   Thu 18   Fri 19          │  │
│ │                                                        │  │
│ │ 08:00                                                  │  │
│ │ 09:00    [████]                                        │  │
│ │ 10:00    Meeting                 [████]               │  │
│ │ 11:00    with John              Meeting               │  │
│ │ 12:00                            Room B               │  │
│ │ 13:00                                                  │  │
│ │ ...                                                    │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ Upcoming Bookings List:                                    │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Today, Jan 15                                         │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ 10:00 AM - 11:30 AM                            │   │  │
│ │ │ Conference Room A (Floor 2)                    │   │  │
│ │ │ Meeting: Bilateral Trade Discussion            │   │  │
│ │ │ With: John Doe                                 │   │  │
│ │ │ [View Details] [Cancel]                        │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ │                                                        │  │
│ │ Tomorrow, Jan 16                                      │  │
│ │ ┌────────────────────────────────────────────────┐   │  │
│ │ │ 02:00 PM - 03:00 PM                            │   │  │
│ │ │ Meeting Room C (Floor 3)                       │   │  │
│ │ │ Meeting: Climate Finance Strategy              │   │  │
│ │ │ With: Maria Silva                              │   │  │
│ │ │ [View Details] [Cancel]                        │   │  │
│ │ └────────────────────────────────────────────────┘   │  │
│ └──────────────────────────────────────────────────────┘  │
└────────────────────────────────────────────────────────────┘

Load User Schedule:
┌────────────────────────────────────────────────────────────┐
│ const loadUserSchedule = async () => {                     │
│   try {                                                     │
│     const user = await User.me();                          │
│     setCurrentUser(user);                                  │
│                                                             │
│     // Get user's accepted meetings                        │
│     const allMeetings = await MeetingRequest.filter(       │
│       { status: 'accepted' }                               │
│     );                                                      │
│     const userMeetings = allMeetings.filter(m =>           │
│       m.requester_id === user.id ||                        │
│       (m.recipient_ids || []).includes(user.id)            │
│     );                                                      │
│     setAcceptedMeetings(userMeetings);                     │
│                                                             │
│     // Get user's bookings                                 │
│     const allBookings = await VenueBooking.list();         │
│     const meetingIds = new Set(                            │
│       userMeetings.map(m => m.id)                          │
│     );                                                      │
│                                                             │
│     const userBookings = allBookings.filter(booking =>     │
│       booking.booked_by === user.id ||                     │
│       (booking.meeting_request_id &&                       │
│        meetingIds.has(booking.meeting_request_id))         │
│     );                                                      │
│                                                             │
│     // Filter future bookings only                         │
│     const now = new Date();                                │
│     const upcomingBookings = userBookings.filter(b =>      │
│       new Date(b.start_time) > now &&                      │
│       b.status === 'active'                                │
│     );                                                      │
│                                                             │
│     // Sort by start time                                  │
│     upcomingBookings.sort((a, b) =>                        │
│       new Date(a.start_time) - new Date(b.start_time)      │
│     );                                                      │
│                                                             │
│     setBookings(upcomingBookings);                         │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading schedule:", error);       │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Cancel Booking from Schedule:
┌────────────────────────────────────────────────────────────┐
│ const handleCancelBooking = async (booking) => {           │
│   if (!window.confirm(                                     │
│     "Cancel this booking? The room will be available again."│
│   )) {                                                      │
│     return;                                                │
│   }                                                         │
│                                                             │
│   try {                                                     │
│     // Update booking status                               │
│     await VenueBooking.update(booking.id, {                │
│       status: 'cancelled'                                  │
│     });                                                     │
│                                                             │
│     // Clear booking reference from meeting                │
│     if (booking.meeting_request_id) {                      │
│       await MeetingRequest.update(                         │
│         booking.meeting_request_id,                        │
│         { venue_booking_id: null }                         │
│       );                                                    │
│                                                             │
│       // Notify meeting participants                       │
│       const meeting = acceptedMeetings.find(               │
│         m => m.id === booking.meeting_request_id           │
│       );                                                    │
│       if (meeting) {                                       │
│         const participants = [                             │
│           meeting.requester_id,                            │
│           ...(meeting.recipient_ids || [])                 │
│         ].filter(id => id !== currentUser.id);             │
│                                                             │
│         for (const participantId of participants) {        │
│           await Notification.create({                      │
│             user_id: participantId,                        │
│             type: 'booking_cancelled',                     │
│             title: 'Booking Cancelled',                    │
│             body: `The venue booking for your meeting "`+  │
│                   `${meeting.proposed_topic}" has been `+  │
│                   `cancelled.`,                            │
│             link: createPageUrl("Meetings")                │
│           });                                               │
│         }                                                   │
│       }                                                     │
│     }                                                       │
│                                                             │
│     await loadUserSchedule(); // Refresh                   │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error cancelling booking:", error);     │
│     alert("Failed to cancel booking");                     │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘
7.5 Chat & Messaging System (Complete)
┌─────────────────────────────────────────────────────────────┐
│            CHAT SYSTEM COMPLETE IMPLEMENTATION               │
└─────────────────────────────────────────────────────────────┘

System Overview:
┌────────────────────────────────────────────────────────────┐
│ Features:                                                   │
│   ✅ 1-on-1 messaging for accepted meetings                │
│   ✅ Real-time message delivery (polling)                  │
│   ✅ Read status tracking                                  │
│   ✅ Auto-scroll to latest message                         │
│   ✅ Direct link support via URL parameter                 │
│   ✅ Unread message counter                                │
│                                                             │
│ Limitations:                                                │
│   ❌ Only for single-user meetings (not multi-delegate)    │
│   ❌ No group chat                                         │
│   ❌ No file attachments (text only)                       │
│   ❌ No message editing or deletion                        │
│   ❌ No message search                                     │
│                                                             │
│ Security:                                                   │
│   - RLS enforces sender/recipient access only              │
│   - Messages encrypted in transit (HTTPS)                  │
│   - No third-party access                                  │
└────────────────────────────────────────────────────────────┘

Page Structure:
┌────────────────────────────────────────────────────────────┐
│ File: pages/Chat.js                                         │
│ Route: /chat                                                │
│ Route with param: /chat?request={meeting_request_id}       │
│                                                             │
│ Layout: Split-view (sidebar + main chat)                   │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header                                                │  │
│ │ [← Back] Secure Messaging             💬             │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌─────────┬──────────────────────────────────────────┐    │
│ │         │ Chat Header                              │    │
│ │         │ ┌──┐ John Doe                            │    │
│ │         │ │JD│ Trade Policy Director                │    │
│ │         │ └──┘                                     │    │
│ │Conver-  ├──────────────────────────────────────────┤    │
│ │sations  │                                          │    │
│ │List     │          Message Thread                  │    │
│ │         │                                          │    │
│ │[Active] │                                          │    │
│ │[Active] │                                          │    │
│ │         │                                          │    │
│ │         ├──────────────────────────────────────────┤    │
│ │         │ Message Input                            │    │
│ │         │ [Type message...] [Send]                 │    │
│ └─────────┴──────────────────────────────────────────┘    │
└────────────────────────────────────────────────────────────┘

Data Loading:
┌────────────────────────────────────────────────────────────┐
│ useEffect(() => {                                          │
│   loadData();                                              │
│                                                             │
│   // Check for direct link                                 │
│   const urlParams = new URLSearchParams(                   │
│     window.location.search                                 │
│   );                                                        │
│   const requestId = urlParams.get('request');              │
│   if (requestId) {                                         │
│     setSelectedMeetingId(requestId);                       │
│   }                                                         │
│ }, []);                                                     │
│                                                             │
│ const loadData = async () => {                             │
│   try {                                                     │
│     const user = await User.me();                          │
│     setCurrentUser(user);                                  │
│                                                             │
│     // Load all users for lookup                           │
│     const allUsers = await User.list();                    │
│     const userLookup = {};                                 │
│     allUsers.forEach(u => {                                │
│       userLookup[u.id] = u;                                │
│     });                                                     │
│     setUsers(userLookup);                                  │
│                                                             │
│     // Load accepted single meetings                       │
│     const allRequests = await MeetingRequest.list(         │
│       '-updated_date'                                      │
│     );                                                      │
│     const accepted = allRequests.filter(req =>             │
│       ((req.recipient_ids || []).includes(user.id) ||      │
│        req.requester_id === user.id) &&                    │
│       req.status === 'accepted' &&                         │
│       req.meeting_type === 'single'  // ← Only single     │
│     );                                                      │
│     setAcceptedMeetings(accepted);                         │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading chat data:", error);      │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Conversation List (Sidebar):
┌────────────────────────────────────────────────────────────┐
│ const ConversationList = () => {                           │
│   if (acceptedMeetings.length === 0) {                     │
│     return (                                               │
│       <div className="empty-state">                        │
│         <MessageSquare className="icon-lg" />              │
│         <p>No active conversations</p>                     │
│         <p className="text-sm">                            │
│           Accept 1-on-1 meeting requests to start chatting │
│         </p>                                               │
│       </div>                                               │
│     );                                                      │
│   }                                                         │
│                                                             │
│   return (                                                  │
│     <div className="conversation-list">                    │
│       {acceptedMeetings.map((meeting) => {                 │
│         const otherParty = meeting.requester_id ===        │
│           currentUser?.id ?                                │
│           users[(meeting.recipient_ids || [])[0]] :        │
│           users[meeting.requester_id];                     │
│                                                             │
│         const isSelected = selectedMeetingId === meeting.id;│
│                                                             │
│         return (                                           │
│           <div                                             │
│             key={meeting.id}                               │
│             className={`conversation-item ${               │
│               isSelected ? 'selected' : ''                 │
│             }`}                                            │
│             onClick={() => setSelectedMeetingId(meeting.id)}│
│           >                                                │
│             <div className="avatar">                       │
│               {otherParty?.full_name?.charAt(0)}           │
│             </div>                                         │
│             <div className="conversation-info">            │
│               <div className="name">                       │
│                 {otherParty?.full_name}                    │
│               </div>                                       │
│               <div className="topic truncate">             │
│                 {meeting.proposed_topic}                   │
│               </div>                                       │
│             </div>                                         │
│             {/* Unread indicator - future feature */}      │
│           </div>                                           │
│         );                                                  │
│       })}                                                   │
│     </div>                                                  │
│   );                                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Message Loading & Real-time Updates:
┌────────────────────────────────────────────────────────────┐
│ const loadMessages = useCallback(async () => {             │
│   if (!selectedMeetingId || !currentUser) return;          │
│                                                             │
│   try {                                                     │
│     // Fetch messages for selected meeting                 │
│     const chatMessages = await ChatMessage.filter(         │
│       { meeting_request_id: selectedMeetingId },           │
│       'created_date'  // Oldest first                      │
│     );                                                      │
│     setMessages(chatMessages);                             │
│                                                             │
│     // Mark unread messages as read                        │
│     const unreadMessages = chatMessages.filter(            │
│       msg => msg.recipient_id === currentUser.id &&        │
│                !msg.read_status                            │
│     );                                                      │
│                                                             │
│     // Update read status (don't await - background task)  │
│     for (const msg of unreadMessages) {                    │
│       ChatMessage.update(msg.id, {                         │
│         read_status: true                                  │
│       }).catch(err =>                                      │
│         console.error("Error marking message read:", err)  │
│       );                                                    │
│     }                                                       │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading messages:", error);       │
│   }                                                         │
│ }, [selectedMeetingId, currentUser]);                      │
│                                                             │
│ // Initial load                                            │
│ useEffect(() => {                                          │
│   if (selectedMeetingId) {                                 │
│     loadMessages();                                        │
│   }                                                         │
│ }, [selectedMeetingId, loadMessages]);                     │
│                                                             │
│ // Poll for new messages every 3 seconds                   │
│ useEffect(() => {                                          │
│   if (selectedMeetingId) {                                 │
│     const interval = setInterval(loadMessages, 3000);      │
│     return () => clearInterval(interval);                  │
│   }                                                         │
│ }, [selectedMeetingId, loadMessages]);                     │
└────────────────────────────────────────────────────────────┘

Message Thread Display:
┌────────────────────────────────────────────────────────────┐
│ const MessageThread = () => {                              │
│   const messagesEndRef = useRef(null);                     │
│                                                             │
│   // Auto-scroll to bottom when messages change            │
│   useEffect(() => {                                        │
│     messagesEndRef.current?.scrollIntoView({               │
│       behavior: "smooth"                                   │
│     });                                                     │
│   }, [messages]);                                          │
│                                                             │
│   if (!selectedMeetingId) {                                │
│     return (                                               │
│       <div className="empty-state">                        │
│         <MessageSquare className="icon-lg" />              │
│         <p>Select a conversation</p>                       │
│         <p className="text-sm">                            │
│           Choose a meeting from the sidebar to start       │
│           chatting                                         │
│         </p>                                               │
│       </div>                                               │
│     );                                                      │
│   }                                                         │
│                                                             │
│   if (messages.length === 0) {                             │
│     return (                                               │
│       <div className="empty-state">                        │
│         <MessageSquare className="icon-lg" />              │
│         <p>Start your conversation</p>                     │
│         <p className="text-sm">                            │
│           Send a message to begin chatting with            │
│           {chatPartner?.full_name}                         │
│         </p>                                               │
│       </div>                                               │
│     );                                                      │
│   }                                                         │
│                                                             │
│   return (                                                  │
│     <div className="message-thread">                       │
│       {messages.map((message) => {                         │
│         const isCurrentUser =                              │
│           message.sender_id === currentUser?.id;           │
│                                                             │
│         return (                                           │
│           <div                                             │
│             key={message.id}                               │
│             className={`message-wrapper ${                 │
│               isCurrentUser ? 'sent' : 'received'          │
│             }`}                                            │
│           >                                                │
│             <div className={`message-bubble ${             │
│               isCurrentUser ? 'sent-bubble' : 'received-bubble'│
│             }`}>                                           │
│               <p className="message-text">                 │
│                 {message.message}                          │
│               </p>                                         │
│               <div className="message-time">               │
│                 {format(                                   │
│                   new Date(message.created_date),          │
│                   'HH:mm'                                  │
│                 )}                                         │
│               </div>                                       │
│             </div>                                         │
│           </div>                                           │
│         );                                                  │
│       })}                                                   │
│       <div ref__={messagesEndRef} />                         │
│     </div>                                                  │
│   );                                                        │
│ };                                                          │
│                                                             │
│ Message Styling:                                            │
│   - Sent messages: Right-aligned, blue background          │
│   - Received messages: Left-aligned, gray background       │
│   - Max width: 60% of container                            │
│   - Rounded corners (bubble style)                         │
│   - Timestamp below message                                │
└────────────────────────────────────────────────────────────┘

Sending Messages:
┌────────────────────────────────────────────────────────────┐
│ const [newMessage, setNewMessage] = useState('');          │
│ const [sending, setSending] = useState(false);             │
│                                                             │
│ const sendMessage = async () => {                          │
│   // Validation                                            │
│   if (!newMessage.trim() || !selectedMeetingId) {          │
│     return;                                                │
│   }                                                         │
│                                                             │
│   setSending(true);                                        │
│   try {                                                     │
│     // Find recipient                                      │
│     const selectedMeeting = acceptedMeetings.find(         │
│       m => m.id === selectedMeetingId                      │
│     );                                                      │
│     const recipientId =                                    │
│       selectedMeeting.requester_id === currentUser.id      │
│         ? (selectedMeeting.recipient_ids || [])[0]         │
│         : selectedMeeting.requester_id;                    │
│                                                             │
│     // Create message                                      │
│     const newMsg = await ChatMessage.create({              │
│       meeting_request_id: selectedMeetingId,               │
│       sender_id: currentUser.id,                           │
│       recipient_id: recipientId,                           │
│       message: newMessage.trim(),                          │
│       message_type: 'text',                                │
│       read_status: false                                   │
│     });                                                     │
│                                                             │
│     // Create notification for recipient                   │
│     const recipient = await User.get(recipientId);         │
│                                                             │
│     // Check notification preferences                       │
│     if (recipient.notification_preferences                 │
│         ?.new_message !== false) {                         │
│                                                             │
│       await Notification.create({                          │
│         user_id: recipientId,                              │
│         type: 'new_message',                               │
│         title: 'New Message',                              │
│         body: `You have a new message from `+              │
│               `${currentUser.full_name}.`,                 │
│         link: createPageUrl(                               │
│           `Chat?request=${selectedMeetingId}`              │
│         ),                                                  │
│         related_entity_id: newMsg.id,                      │
│         is_read: false                                     │
│       });                                                   │
│     }                                                       │
│                                                             │
│     // Clear input                                         │
│     setNewMessage('');                                     │
│                                                             │
│     // Reload messages                                     │
│     await loadMessages();                                  │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error sending message:", error);        │
│     alert("Failed to send message. Please try again.");    │
│   }                                                         │
│   setSending(false);                                       │
│ };                                                          │
│                                                             │
│ const handleKeyPress = (e) => {                            │
│   if (e.key === 'Enter' && !e.shiftKey) {                  │
│     e.preventDefault();                                    │
│     sendMessage();                                         │
│   }                                                         │
│   // Shift+Enter for new line                              │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Message Input Component:
┌────────────────────────────────────────────────────────────┐
│ <div className="message-input-container">                  │
│   <Textarea                                                │
│     value={newMessage}                                     │
│     onChange={(e) => setNewMessage(e.target.value)}        │
│     onKeyPress={handleKeyPress}                            │
│     placeholder="Type your message..."                     │
│     className="message-input"                              │
│     rows={1}                                               │
│     maxLength={2000}                                       │
│     disabled={sending}                                     │
│   />                                                        │
│   <Button                                                  │
│     onClick={sendMessage}                                  │
│     disabled={sending || !newMessage.trim()}               │
│     className="send-button"                                │
│   >                                                         │
│     {sending ? (                                           │
│       <div className="spinner" />                          │
│     ) : (                                                   │
│       <Send className="w-4 h-4" />                         │
│     )}                                                      │
│   </Button>                                                │
│ </div>                                                      │
│                                                             │
│ Features:                                                   │
│   - Auto-resize textarea as user types                     │
│   - Character limit: 2000 characters                       │
│   - Enter key sends (Shift+Enter for new line)            │
│   - Send button disabled when empty or sending            │
│   - Shows loading state while sending                      │
│   - Clear input after successful send                      │
└────────────────────────────────────────────────────────────┘

Chat Header:
┌────────────────────────────────────────────────────────────┐
│ const ChatHeader = () => {                                 │
│   if (!selectedMeetingId) return null;                     │
│                                                             │
│   const selectedMeeting = acceptedMeetings.find(           │
│     m => m.id === selectedMeetingId                        │
│   );                                                        │
│   const otherParty = selectedMeeting?.requester_id ===     │
│     currentUser?.id ?                                      │
│     users[(selectedMeeting.recipient_ids || [])[0]] :      │
│     users[selectedMeeting.requester_id];                   │
│                                                             │
│   return (                                                  │
│     <div className="chat-header">                          │
│       <div className="avatar-lg">                          │
│         {otherParty?.full_name?.charAt(0)}                 │
│       </div>                                               │
│       <div className="header-info">                        │
│         <div className="name">                             │
│           {otherParty?.full_name}                          │
│         </div>                                             │
│         <div className="subtitle">                         │
│           {otherParty?.job_title} •                        │
│           {selectedMeeting?.proposed_topic}                │
│         </div>                                             │
│       </div>                                               │
│     </div>                                                  │
│   );                                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Access Control:
┌────────────────────────────────────────────────────────────┐
│ Chat access requirements:                                  │
│   ✅ User must be authenticated                            │
│   ✅ Meeting must be accepted                              │
│   ✅ Meeting must be single-user type                      │
│   ✅ User must be participant (requester or recipient)     │
│                                                             │
│ RLS (Row Level Security) enforces:                         │
│   - Users can only read messages where they are            │
│     sender OR recipient                                    │
│   - Users can only create messages where they are          │
│     the sender                                             │
│   - Admins can read all messages (for moderation)          │
│                                                             │
│ If user tries to access chat for:                          │
│   ❌ Multi-delegate meeting → Show error message           │
│   ❌ Non-participant → RLS blocks data access              │
│   ❌ Non-accepted meeting → No messages exist              │
└────────────────────────────────────────────────────────────┘

Security Alert Banner:
┌────────────────────────────────────────────────────────────┐
│ <Alert className="info-alert">                             │
│   <AlertCircle className="h-4 w-4" />                      │
│   <AlertDescription>                                       │
│     <strong>Secure Messaging:</strong> All conversations   │
│     are encrypted and only visible to meeting participants.│
│     Chat is available for single-user meetings once they   │
│     are accepted.                                          │
│   </AlertDescription>                                      │
│ </Alert>                                                    │
└────────────────────────────────────────────────────────────┘

Direct Link Support:
┌────────────────────────────────────────────────────────────┐
│ URL Format: /chat?request={meeting_request_id}            │
│                                                             │
│ Usage Examples:                                             │
│   1. From meeting card "Chat" button:                      │
│      <Link to={createPageUrl(`Chat?request=${meeting.id}`)}>│
│        <Button>Chat</Button>                               │
│      </Link>                                               │
│                                                             │
│   2. From notification (new message):                      │
│      Notification.link = /chat?request=abc123             │
│                                                             │
│   3. From schedule view:                                   │
│      Click booking → "Open Chat" button                    │
│                                                             │
│ Behavior on load:                                          │
│   1. Parse URL parameter                                   │
│   2. Set selectedMeetingId to that meeting                 │
│   3. Auto-load messages for that meeting                   │
│   4. Mark messages as read                                 │
│   5. Scroll to bottom                                      │
│   6. Focus message input                                   │
└────────────────────────────────────────────────────────────┘

Future Enhancements (Not Implemented):
┌────────────────────────────────────────────────────────────┐
│ - File/image attachments                                   │
│ - Voice messages                                           │
│ - Message reactions (emoji)                                │
│ - Message search/filtering                                 │
│ - Typing indicators                                        │
│ - Online/offline status                                    │
│ - Message delivery receipts                                │
│ - Push notifications (mobile)                              │
│ - Group chat for multi-delegate meetings                   │
│ - Message threading/replies                                │
│ - Rich text formatting                                     │
│ - Code/link previews                                       │
└────────────────────────────────────────────────────────────┘
Due to character limit, I'll continue with Section 7.6 (Notification System) and beyond in the next response. Would you like me to continue?

30 minutes ago
continue

5 minutes ago
•
see context
Revert this
Base44 AI
Base44

Thought for 4s
UNIConnect - Complete Project Documentation (Continued Part 3)
7.6 Notification System (Complete)
┌─────────────────────────────────────────────────────────────┐
│          NOTIFICATION SYSTEM COMPLETE IMPLEMENTATION         │
└─────────────────────────────────────────────────────────────┘

System Architecture:
┌────────────────────────────────────────────────────────────┐
│ Notification Flow:                                         │
│                                                             │
│ User Action → Creates Notification Record                  │
│      ↓                                                      │
│ Check recipient's notification preferences                 │
│      ↓                                                      │
│ If enabled → Create notification in database               │
│      ↓                                                      │
│ NotificationBell component polls for updates               │
│      ↓                                                      │
│ Display unread count badge                                 │
│      ↓                                                      │
│ User clicks notification → Navigate to relevant page       │
│      ↓                                                      │
│ Mark as read                                               │
└────────────────────────────────────────────────────────────┘

DATABASE ENTITY:

Notification Entity:
┌────────────────────────────────────────────────────────────┐
│ {                                                           │
│   "user_id": "string",        // Recipient user ID         │
│   "type": "string",           // Notification type         │
│   "title": "string",          // Notification title        │
│   "body": "string",           // Message content           │
│   "link": "string",           // URL to navigate to        │
│   "is_read": boolean,         // Read status (default: false)│
│   "related_entity_id": "string" // Related record ID       │
│ }                                                           │
│                                                             │
│ Notification Types:                                         │
│   - new_meeting_request                                    │
│   - request_accepted                                       │
│   - request_declined                                       │
│   - request_status_update                                  │
│   - meeting_updated                                        │
│   - new_message                                            │
│   - booking_confirmed                                      │
│   - booking_cancelled                                      │
│                                                             │
│ RLS Rules:                                                  │
│   - Users can only read their own notifications            │
│   - Users can only mark their own notifications as read    │
│   - Admins can read all notifications                      │
└────────────────────────────────────────────────────────────┘

NOTIFICATION BELL COMPONENT:
┌────────────────────────────────────────────────────────────┐
│ File: components/notifications/NotificationBell.jsx         │
│                                                             │
│ Location: Layout header (top-right corner)                 │
│                                                             │
│ Visual Representation:                                     │
│   🔔 (with red badge if unread count > 0)                  │
│   Badge shows: "3" (number of unread notifications)        │
└────────────────────────────────────────────────────────────┘

Component Structure:
┌────────────────────────────────────────────────────────────┐
│ import React, { useState, useEffect } from "react";        │
│ import { Notification } from "@/entities/Notification";     │
│ import { User } from "@/entities/User";                    │
│ import { Bell, Check, X } from "lucide-react";             │
│ import {                                                    │
│   Popover,                                                  │
│   PopoverContent,                                          │
│   PopoverTrigger,                                          │
│ } from "@/components/ui/popover";                          │
│ import { Button } from "@/components/ui/button";           │
│ import { Badge } from "@/components/ui/badge";             │
│ import { useNavigate } from "react-router-dom";            │
│ import { format } from "date-fns";                         │
│                                                             │
│ export default function NotificationBell() {               │
│   const navigate = useNavigate();                          │
│   const [notifications, setNotifications] = useState([]);  │
│   const [unreadCount, setUnreadCount] = useState(0);       │
│   const [open, setOpen] = useState(false);                 │
│   const [currentUser, setCurrentUser] = useState(null);    │
│                                                             │
│   // Load notifications on mount                           │
│   useEffect(() => {                                        │
│     loadNotifications();                                   │
│   }, []);                                                   │
│                                                             │
│   // Poll for new notifications every 10 seconds           │
│   useEffect(() => {                                        │
│     const interval = setInterval(loadNotifications, 10000);│
│     return () => clearInterval(interval);                  │
│   }, []);                                                   │
│                                                             │
│   const loadNotifications = async () => {                  │
│     try {                                                   │
│       const user = await User.me();                        │
│       setCurrentUser(user);                                │
│                                                             │
│       // Fetch user's notifications (last 50, newest first)│
│       const allNotifications = await Notification.filter(  │
│         { user_id: user.id },                              │
│         '-created_date',                                   │
│         50                                                  │
│       );                                                    │
│                                                             │
│       setNotifications(allNotifications);                  │
│                                                             │
│       // Count unread                                      │
│       const unread = allNotifications.filter(              │
│         n => !n.is_read                                    │
│       ).length;                                            │
│       setUnreadCount(unread);                              │
│                                                             │
│     } catch (error) {                                      │
│       console.error("Error loading notifications:", error);│
│     }                                                       │
│   };                                                        │
│                                                             │
│   // ... (continued below)                                 │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Handle Notification Click:
┌────────────────────────────────────────────────────────────┐
│   const handleNotificationClick = async (notification) => {│
│     try {                                                   │
│       // Mark as read                                      │
│       if (!notification.is_read) {                         │
│         await Notification.update(notification.id, {       │
│           is_read: true                                    │
│         });                                                 │
│       }                                                     │
│                                                             │
│       // Navigate to link                                  │
│       if (notification.link) {                             │
│         // Remove domain if full URL                       │
│         const path = notification.link.replace(            │
│           window.location.origin, ''                       │
│         );                                                  │
│         navigate(path);                                    │
│       }                                                     │
│                                                             │
│       // Close popover                                     │
│       setOpen(false);                                      │
│                                                             │
│       // Reload notifications                              │
│       await loadNotifications();                           │
│                                                             │
│     } catch (error) {                                      │
│       console.error("Error handling notification:", error);│
│     }                                                       │
│   };                                                        │
└────────────────────────────────────────────────────────────┘

Mark All as Read:
┌────────────────────────────────────────────────────────────┐
│   const handleMarkAllRead = async () => {                  │
│     try {                                                   │
│       const unreadNotifications = notifications.filter(    │
│         n => !n.is_read                                    │
│       );                                                    │
│                                                             │
│       // Update all unread notifications                   │
│       for (const notification of unreadNotifications) {    │
│         await Notification.update(notification.id, {       │
│           is_read: true                                    │
│         });                                                 │
│       }                                                     │
│                                                             │
│       // Reload                                            │
│       await loadNotifications();                           │
│                                                             │
│     } catch (error) {                                      │
│       console.error("Error marking all read:", error);     │
│     }                                                       │
│   };                                                        │
└────────────────────────────────────────────────────────────┘

Clear All Notifications:
┌────────────────────────────────────────────────────────────┐
│   const handleClearAll = async () => {                     │
│     if (!window.confirm(                                   │
│       "Delete all notifications? This cannot be undone."   │
│     )) {                                                    │
│       return;                                              │
│     }                                                       │
│                                                             │
│     try {                                                   │
│       // Delete all user's notifications                   │
│       for (const notification of notifications) {          │
│         await Notification.delete(notification.id);        │
│       }                                                     │
│                                                             │
│       // Reload                                            │
│       await loadNotifications();                           │
│                                                             │
│     } catch (error) {                                      │
│       console.error("Error clearing notifications:", error);│
│     }                                                       │
│   };                                                        │
└────────────────────────────────────────────────────────────┘

Notification Icon Display:
┌────────────────────────────────────────────────────────────┐
│ const getNotificationIcon = (type) => {                    │
│   switch (type) {                                          │
│     case 'new_meeting_request':                            │
│       return <Calendar className="text-blue-500" />;       │
│     case 'request_accepted':                               │
│       return <CheckCircle2 className="text-green-500" />;  │
│     case 'request_declined':                               │
│       return <XCircle className="text-red-500" />;         │
│     case 'new_message':                                    │
│       return <MessageSquare className="text-blue-500" />;  │
│     case 'booking_confirmed':                              │
│       return <MapPin className="text-purple-500" />;       │
│     case 'booking_cancelled':                              │
│       return <AlertCircle className="text-orange-500" />;  │
│     default:                                               │
│       return <Bell className="text-gray-500" />;           │
│   }                                                         │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Render Component:
┌────────────────────────────────────────────────────────────┐
│   return (                                                  │
│     <Popover open={open} onOpenChange={setOpen}>           │
│       <PopoverTrigger asChild>                             │
│         <Button variant="ghost" size="icon" className="relative">│
│           <Bell className="h-5 w-5" />                     │
│           {unreadCount > 0 && (                            │
│             <span className="absolute -top-1 -right-1      │
│               bg-red-500 text-white text-xs rounded-full   │
│               w-5 h-5 flex items-center justify-center">   │
│               {unreadCount > 9 ? '9+' : unreadCount}       │
│             </span>                                         │
│           )}                                                │
│         </Button>                                          │
│       </PopoverTrigger>                                    │
│                                                             │
│       <PopoverContent                                      │
│         className="w-96 p-0"                               │
│         align="end"                                        │
│       >                                                     │
│         {/* Header */}                                     │
│         <div className="flex items-center justify-between  │
│           p-4 border-b">                                   │
│           <h3 className="font-semibold">Notifications</h3> │
│           <div className="flex gap-2">                     │
│             {unreadCount > 0 && (                          │
│               <Button                                      │
│                 variant="ghost"                            │
│                 size="sm"                                  │
│                 onClick={handleMarkAllRead}                │
│               >                                             │
│                 <Check className="w-4 h-4 mr-1" />         │
│                 Mark all read                              │
│               </Button>                                    │
│             )}                                              │
│             <Button                                        │
│               variant="ghost"                              │
│               size="sm"                                    │
│               onClick={handleClearAll}                     │
│             >                                               │
│               <X className="w-4 h-4 mr-1" />               │
│               Clear all                                    │
│             </Button>                                      │
│           </div>                                            │
│         </div>                                              │
│                                                             │
│         {/* Notifications List */}                         │
│         <div className="max-h-96 overflow-y-auto">         │
│           {notifications.length > 0 ? (                    │
│             notifications.map((notification) => (          │
│               <div                                         │
│                 key={notification.id}                      │
│                 className={`p-4 border-b cursor-pointer    │
│                   hover:bg-gray-50 transition ${           │
│                   !notification.is_read ? 'bg-blue-50' : ''│
│                 }`}                                         │
│                 onClick={() =>                             │
│                   handleNotificationClick(notification)    │
│                 }                                           │
│               >                                             │
│                 <div className="flex gap-3">               │
│                   <div className="flex-shrink-0 mt-1">     │
│                     {getNotificationIcon(notification.type)}│
│                   </div>                                    │
│                   <div className="flex-1 min-w-0">         │
│                     <div className="flex items-center      │
│                       justify-between">                    │
│                       <p className="font-medium text-sm    │
│                         text-gray-900 truncate">           │
│                         {notification.title}               │
│                       </p>                                  │
│                       {!notification.is_read && (          │
│                         <span className="w-2 h-2           │
│                           bg-blue-500 rounded-full         │
│                           flex-shrink-0 ml-2" />           │
│                       )}                                    │
│                     </div>                                  │
│                     <p className="text-sm text-gray-600    │
│                       mt-1 line-clamp-2">                  │
│                       {notification.body}                  │
│                     </p>                                    │
│                     <p className="text-xs text-gray-400 mt-1">│
│                       {format(                             │
│                         new Date(notification.created_date),│
│                         'MMM d, h:mm a'                    │
│                       )}                                    │
│                     </p>                                    │
│                   </div>                                    │
│                 </div>                                      │
│               </div>                                        │
│             ))                                              │
│           ) : (                                             │
│             <div className="p-8 text-center text-gray-500">│
│               <Bell className="w-12 h-12 mx-auto mb-3      │
│                 opacity-40" />                             │
│               <p>No notifications yet</p>                  │
│             </div>                                          │
│           )}                                                │
│         </div>                                              │
│       </PopoverContent>                                    │
│     </Popover>                                             │
│   );                                                        │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

NOTIFICATION CREATION PATTERNS:

Pattern 1: New Meeting Request
┌────────────────────────────────────────────────────────────┐
│ Location: pages/Delegates.js (after creating meeting request)│
│                                                             │
│ Code:                                                       │
│ const recipient = await User.get(selectedUser.id);         │
│                                                             │
│ if (recipient.notification_preferences                     │
│     ?.new_meeting_request !== false) {                     │
│                                                             │
│   await Notification.create({                              │
│     user_id: selectedUser.id,                              │
│     type: 'new_meeting_request',                           │
│     title: 'New Meeting Request',                          │
│     body: `You have received a new meeting request from `+ │
│           `${currentUser.full_name}. Meeting Code: `+      │
│           `${meetingCode}`,                                │
│     link: createPageUrl("Meetings"),                       │
│     related_entity_id: newRequest.id,                      │
│     is_read: false                                         │
│   });                                                       │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Pattern 2: Request Accepted
┌────────────────────────────────────────────────────────────┐
│ Location: pages/Meetings.js (after accepting request)      │
│                                                             │
│ Code:                                                       │
│ const requester = await User.get(request.requester_id);    │
│                                                             │
│ if (requester.notification_preferences                     │
│     ?.request_status_update !== false) {                   │
│                                                             │
│   await Notification.create({                              │
│     user_id: request.requester_id,                         │
│     type: 'request_accepted',                              │
│     title: 'Meeting Request Accepted',                     │
│     body: `${currentUser.full_name} has accepted your `+   │
│           `meeting request regarding "`+                   │
│           `${request.proposed_topic}".`,                   │
│     link: createPageUrl("Meetings"),                       │
│     related_entity_id: requestId,                          │
│     is_read: false                                         │
│   });                                                       │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Pattern 3: Request Declined
┌────────────────────────────────────────────────────────────┐
│ // Similar to accepted, but with type: 'request_declined'  │
│ // and appropriate title/body                              │
└────────────────────────────────────────────────────────────┘

Pattern 4: New Message
┌────────────────────────────────────────────────────────────┐
│ Location: pages/Chat.js (after sending message)            │
│                                                             │
│ Code:                                                       │
│ const recipient = await User.get(recipientId);             │
│                                                             │
│ if (recipient.notification_preferences                     │
│     ?.new_message !== false) {                             │
│                                                             │
│   await Notification.create({                              │
│     user_id: recipientId,                                  │
│     type: 'new_message',                                   │
│     title: 'New Message',                                  │
│     body: `You have a new message from `+                  │
│           `${currentUser.full_name}.`,                     │
│     link: createPageUrl(`Chat?request=${selectedMeetingId}`),│
│     related_entity_id: newMsg.id,                          │
│     is_read: false                                         │
│   });                                                       │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Pattern 5: Booking Confirmed
┌────────────────────────────────────────────────────────────┐
│ Location: components/meetings/BookingDialog.jsx            │
│                                                             │
│ Code (loop through participants):                          │
│ for (const participantId of participants) {                │
│   const participant = await User.get(participantId);       │
│                                                             │
│   if (participant.notification_preferences                 │
│       ?.booking_confirmed !== false) {                     │
│                                                             │
│     await Notification.create({                            │
│       user_id: participantId,                              │
│       type: 'booking_confirmed',                           │
│       title: 'Venue Confirmed',                            │
│       body: `${selectedRoom.name} has been booked for `+   │
│             `your meeting "${meeting.proposed_topic}" at `+│
│             `${format(startDateTime, 'MMM d, h:mm a')}`,   │
│       link: createPageUrl("Schedule"),                     │
│       related_entity_id: newBooking.id,                    │
│       is_read: false                                       │
│     });                                                     │
│   }                                                         │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

Pattern 6: Meeting Updated
┌────────────────────────────────────────────────────────────┐
│ Location: pages/Dashboard.js or pages/Meetings.js          │
│          (after modifying meeting details)                 │
│                                                             │
│ Code:                                                       │
│ for (const participantId of participantsToNotify) {        │
│   const otherUser = await User.get(participantId);         │
│                                                             │
│   if (otherUser.notification_preferences                   │
│       ?.request_status_update !== false) {                 │
│                                                             │
│     await Notification.create({                            │
│       user_id: participantId,                              │
│       type: 'meeting_updated',                             │
│       title: 'Meeting Details Updated',                    │
│       body: `${currentUser.full_name} has updated the `+   │
│             `details for your meeting "`+                  │
│             `${modifyForm.proposed_topic}". `+             │
│             `${venueCleared ? 'The venue has been '+       │
│             'cleared and needs to be re-booked.' : ''}`,   │
│       link: createPageUrl("Meetings"),                     │
│       related_entity_id: editingMeeting.id,                │
│       is_read: false                                       │
│     });                                                     │
│   }                                                         │
│ }                                                           │
└────────────────────────────────────────────────────────────┘

NOTIFICATION PREFERENCES:

User Preference Storage:
┌────────────────────────────────────────────────────────────┐
│ Location: User entity, notification_preferences field      │
│                                                             │
│ Structure:                                                  │
│ {                                                           │
│   "notification_preferences": {                            │
│     "new_meeting_request": true,    // Default: enabled    │
│     "request_status_update": true,  // Default: enabled    │
│     "new_message": true,            // Default: enabled    │
│     "booking_confirmed": true       // Default: enabled    │
│   }                                                         │
│ }                                                           │
│                                                             │
│ Checking preferences:                                      │
│ if (user.notification_preferences?.new_meeting_request     │
│     !== false) {                                           │
│   // Send notification                                     │
│ }                                                           │
│                                                             │
│ Note: Uses !== false to handle:                            │
│   - undefined (not set) → default true → send notification │
│   - true → send notification                               │
│   - false → don't send notification                        │
└────────────────────────────────────────────────────────────┘

Preference Management UI:
┌────────────────────────────────────────────────────────────┐
│ Location: pages/Profile.js                                 │
│          "Notification Preferences" section                │
│                                                             │
│ UI:                                                         │
│ ┌────────────────────────────────────────────────────┐    │
│ │ Notification Preferences                           │    │
│ ├────────────────────────────────────────────────────┤    │
│ │ [✓] New Meeting Request                            │    │
│ │     Notify me when a user sends me a meeting request│    │
│ │                                                     │    │
│ │ [✓] Request Status Update                          │    │
│ │     Notify me when a user accepts or declines      │    │
│ │     my request                                     │    │
│ │                                                     │    │
│ │ [✓] New Chat Message                               │    │
│ │     Notify me when I receive a new chat message    │    │
│ │                                                     │    │
│ │ [✓] Booking Confirmation                           │    │
│ │     Notify me when a venue is booked for my meeting│    │
│ └────────────────────────────────────────────────────┘    │
│                                                             │
│ Updates are saved when user clicks "Save Profile" button   │
└────────────────────────────────────────────────────────────┘

NOTIFICATION DELIVERY FLOW:

Complete Flow Diagram:
┌────────────────────────────────────────────────────────────┐
│ 1. User Action (e.g., send meeting request)               │
│         ↓                                                   │
│ 2. System checks recipient's notification preferences      │
│         ↓                                                   │
│ 3. If enabled: Create Notification record in database      │
│         ↓                                                   │
│ 4. Notification saved with:                                │
│    - user_id: recipient                                    │
│    - type: notification_type                               │
│    - title: short title                                    │
│    - body: detailed message                                │
│    - link: page URL to navigate                            │
│    - is_read: false                                        │
│    - related_entity_id: meeting/message/booking ID         │
│         ↓                                                   │
│ 5. NotificationBell component polls every 10 seconds       │
│         ↓                                                   │
│ 6. Fetches notifications for current user                  │
│         ↓                                                   │
│ 7. Counts unread (is_read = false)                         │
│         ↓                                                   │
│ 8. Updates badge count on bell icon                        │
│         ↓                                                   │
│ 9. User clicks bell → Popover opens                        │
│         ↓                                                   │
│ 10. User clicks notification:                              │
│         ↓                                                   │
│ 11. Mark notification as read (is_read = true)             │
│         ↓                                                   │
│ 12. Navigate to notification.link                          │
│         ↓                                                   │
│ 13. User sees relevant page/content                        │
└────────────────────────────────────────────────────────────┘

Error Handling:
┌────────────────────────────────────────────────────────────┐
│ Notification creation errors are logged but NOT blocking:  │
│                                                             │
│ try {                                                       │
│   await Notification.create({...});                        │
│ } catch (error) {                                          │
│   console.error("Failed to create notification:", error);  │
│   // Continue execution - notification failure shouldn't   │
│   // block main action (e.g., meeting request creation)    │
│ }                                                           │
│                                                             │
│ This ensures:                                              │
│   - Meeting requests still work if notification fails      │
│   - Messages still send if notification fails              │
│   - Bookings still complete if notification fails          │
└────────────────────────────────────────────────────────────┘

Performance Considerations:
┌────────────────────────────────────────────────────────────┐
│ Polling Strategy:                                          │
│   - 10-second intervals (not 1 second)                     │
│   - Only fetch last 50 notifications                       │
│   - Use RLS to filter by user_id at database level         │
│   - Sorting done at database level                         │
│                                                             │
│ Optimizations:                                             │
│   - Don't fetch all notifications on every poll            │
│   - Only update UI if count changed                        │
│   - Use React.memo for notification items                  │
│   - Debounce mark-as-read operations                       │
│                                                             │
│ Future Improvements:                                       │
│   - WebSocket real-time push (instead of polling)          │
│   - Pagination for notification list                       │
│   - Background service worker for push notifications       │
│   - Email digests for important notifications              │
└────────────────────────────────────────────────────────────┘
7.7 Dashboard Page (Complete)
┌─────────────────────────────────────────────────────────────┐
│              DASHBOARD PAGE COMPLETE IMPLEMENTATION          │
└─────────────────────────────────────────────────────────────┘

Overview:
┌────────────────────────────────────────────────────────────┐
│ File: pages/Dashboard.js                                    │
│ Route: /dashboard (default landing page after login)       │
│ Access: All authenticated users                            │
│                                                             │
│ Purpose:                                                    │
│   - Central hub for user activity                          │
│   - Show key statistics                                    │
│   - Display recent activity                                │
│   - Quick actions to main features                         │
│   - Show upcoming meetings/bookings                        │
│   - Alert users of incomplete profile/consent              │
└────────────────────────────────────────────────────────────┘

Dashboard Layout Structure:
┌────────────────────────────────────────────────────────────┐
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Header Row                                            │  │
│ │ Welcome, John Doe                                     │  │
│ │ Manage your professional connections and meetings     │  │
│ │                                                        │  │
│ │ [1 request needs approval] [✓ Profile Complete]      │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Status Alerts (conditional)                           │  │
│ │ ⚠️ Consent Required...                                │  │
│ │ ⚠️ Profile Incomplete...                              │  │
│ │ ℹ️ You are in Hidden Mode...                          │  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌──────────────────────────────────────────────────────┐  │
│ │ Quick Actions                                         │  │
│ │ [Browse Users] [View Meetings] [Messages] [Book Venue]│  │
│ └──────────────────────────────────────────────────────┘  │
│                                                             │
│ ┌────────┬────────┬────────┬────────┐                     │
│ │ Stat 1 │ Stat 2 │ Stat 3 │ Stat 4 │  (4-column grid)   │
│ └────────┴────────┴────────┴────────┘                     │
│                                                             │
│ ┌────────────────────┬──────────────────────────┐         │
│ │ Recent Activity    │ Upcoming Schedule        │         │
│ │ (2/3 width)        │ (1/3 width)              │         │
│ │                    │                          │         │
│ │                    │                          │         │
│ │                    ├──────────────────────────┤         │
│ │                    │ Popular Venues           │         │
│ │                    │                          │         │
│ └────────────────────┴──────────────────────────┘         │
└────────────────────────────────────────────────────────────┘

Data Loading:
┌────────────────────────────────────────────────────────────┐
│ const loadDashboardData = async () => {                    │
│   try {                                                     │
│     const user = await User.me();                          │
│     setCurrentUser(user);                                  │
│                                                             │
│     // Load all data in parallel                           │
│     const [allUsers, allMeetingRequests,                   │
│            allMessages, allBookings] = await Promise.all([ │
│       User.list(),                                         │
│       MeetingRequest.list('-created_date'),                │
│       ChatMessage.list('-created_date'),                   │
│       VenueBooking.list('-created_date')                   │
│     ]);                                                     │
│                                                             │
│     // Create user lookup map                              │
│     const userLookup = {};                                 │
│     allUsers.forEach(u => {                                │
│       userLookup[u.id] = u;                                │
│     });                                                     │
│     setUsers(userLookup);                                  │
│                                                             │
│     // Filter data for current user                        │
│     const userMeetingRequests = allMeetingRequests.filter(│
│       req => req.requester_id === user.id ||               │
│              (req.recipient_ids || []).includes(user.id)   │
│     );                                                      │
│     setMeetingRequests(userMeetingRequests);               │
│                                                             │
│     const userMessages = allMessages.filter(msg =>         │
│       msg.sender_id === user.id ||                         │
│       msg.recipient_id === user.id                         │
│     );                                                      │
│                                                             │
│     // Calculate statistics                                │
│     calculateStatistics(user, userMeetingRequests,         │
│                        userMessages, allBookings);         │
│                                                             │
│     // Build activity feed                                 │
│     buildActivityFeed(user, userLookup,                    │
│       userMeetingRequests, userMessages, allBookings);     │
│                                                             │
│     // Get upcoming bookings                               │
│     getUpcomingBookings(user, userMeetingRequests,         │
│                        allBookings);                       │
│                                                             │
│     // Calculate venue statistics                          │
│     calculateVenueStats(allBookings);                      │
│                                                             │
│   } catch (error) {                                        │
│     console.error("Error loading dashboard data:", error); │
│   }                                                         │
│   setLoading(false);                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Calculate Statistics:
┌────────────────────────────────────────────────────────────┐
│ const calculateStatistics = (user, meetings,               │
│                              messages, allBookings) => {   │
│   // 1. Pending Requests (incoming only)                   │
│   const pendingRequests = meetings.filter(req =>           │
│     (req.recipient_ids || []).includes(user.id) &&         │
│     req.status === 'pending'                               │
│   ).length;                                                │
│                                                             │
│   // 2. Accepted Meetings                                  │
│   const acceptedMeetings = meetings.filter(req =>          │
│     req.status === 'accepted'                              │
│   ).length;                                                │
│                                                             │
│   // 3. Unread Messages                                    │
│   const unreadMessages = messages.filter(msg =>            │
│     msg.recipient_id === user.id &&                        │
│     !msg.read_status                                       │
│   ).length;                                                │
│                                                             │
│   // 4. Upcoming Bookings (future, active, user's meetings)│
│   const now = new Date();                                  │
│   const acceptedMeetingIds = new Set(                      │
│     meetings                                               │
│       .filter(req => req.status === 'accepted')            │
│       .map(req => req.id)                                  │
│   );                                                        │
│                                                             │
│   const userUpcomingBookings = allBookings.filter(booking =>│
│     const bookingStart = new Date(booking.start_time);     │
│     return (                                               │
│       booking.status === 'active' &&                       │
│       bookingStart > now &&                                │
│       (booking.booked_by === user.id ||                    │
│        acceptedMeetingIds.has(booking.meeting_request_id)) │
│     );                                                      │
│   }).length;                                               │
│                                                             │
│   setStats({                                               │
│     pendingRequests,                                       │
│     acceptedMeetings,                                      │
│     unreadMessages,                                        │
│     activeBookings: userUpcomingBookings                   │
│   });                                                       │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Statistics Display:
┌────────────────────────────────────────────────────────────┐
│ <div className="grid grid-cols-1 md:grid-cols-2            │
│                 lg:grid-cols-4 gap-6">                     │
│                                                             │
│   {/* Stat Card 1: Pending Requests */}                    │
│   <Card className="stat-card orange">                      │
│     <CardHeader>                                           │
│       <div className="flex justify-between">               │
│         <span>Pending Requests</span>                      │
│         <Clock className="text-orange-500" />              │
│       </div>                                               │
│     </CardHeader>                                          │
│     <CardContent>                                          │
│       <div className="stat-number">                        │
│         {stats.pendingRequests}                            │
│       </div>                                               │
│       <p className="stat-label">Awaiting your response</p> │
│     </CardContent>                                         │
│   </Card>                                                   │
│                                                             │
│   {/* Stat Card 2: Accepted Meetings */}                   │
│   <Card className="stat-card green">                       │
│     <CardHeader>                                           │
│       <div className="flex justify-between">               │
│         <span>Accepted Meetings</span>                     │
│         <Calendar className="text-green-500" />            │
│       </div>                                               │
│     </CardHeader>                                          │
│     <CardContent>                                          │
│       <div className="stat-number">                        │
│         {stats.acceptedMeetings}                           │
│       </div>                                               │
│       <p className="stat-label">Confirmed connections</p>  │
│     </CardContent>                                         │
│   </Card>                                                   │
│                                                             │
│   {/* Stat Card 3: Unread Messages */}                     │
│   <Card className="stat-card blue">                        │
│     <CardHeader>                                           │
│       <div className="flex justify-between">               │
│         <span>Unread Messages</span>                       │
│         <MessageSquare className="text-blue-500" />        │
│       </div>                                               │
│     </CardHeader>                                          │
│     <CardContent>                                          │
│       <div className="stat-number">                        │
│         {stats.unreadMessages}                             │
│       </div>                                               │
│       <p className="stat-label">New communications</p>     │
│     </CardContent>                                         │
│   </Card>                                                   │
│                                                             │
│   {/* Stat Card 4: Upcoming Bookings */}                   │
│   <Card className="stat-card purple">                      │
│     <CardHeader>                                           │
│       <div className="flex justify-between">               │
│         <span>Upcoming Bookings</span>                     │
│         <MapPin className="text-purple-500" />             │
│       </div>                                               │
│     </CardHeader>                                          │
│     <CardContent>                                          │
│       <div className="stat-number">                        │
│         {stats.activeBookings}                             │
│       </div>                                               │
│       <p className="stat-label">Venue reservations</p>     │
│     </CardContent>                                         │
│   </Card>                                                   │
│ </div>                                                      │
└────────────────────────────────────────────────────────────┘

Build Activity Feed:
┌────────────────────────────────────────────────────────────┐
│ const buildActivityFeed = (user, userLookup, meetings,     │
│                            messages, bookings) => {        │
│   const activities = [];                                   │
│   const now = new Date();                                  │
│                                                             │
│   // Add recent meeting requests (last 7 days)             │
│   const recentMeetings = meetings                          │
│     .filter(req => {                                       │
│       const daysSinceUpdate =                              │
│         (now - new Date(req.updated_date || req.created_date))│
│         / (1000 * 60 * 60 * 24);                          │
│       return daysSinceUpdate <= 7;                         │
│     })                                                      │
│     .sort((a, b) =>                                        │
│       new Date(b.updated_date || b.created_date) -         │
│       new Date(a.updated_date || a.created_date)           │
│     )                                                       │
│     .slice(0, 5);                                          │
│                                                             │
│   recentMeetings.forEach(meeting => {                      │
│     const isRequester = meeting.requester_id === user.id;  │
│     const otherParties = (meeting.recipient_ids || [])     │
│       .map(id => userLookup[id])                           │
│       .filter(Boolean);                                    │
│                                                             │
│     activities.push({                                      │
│       id: `meeting-${meeting.id}`,                         │
│       type: 'meeting_request',                             │
│       timestamp: meeting.updated_date || meeting.created_date,│
│       title: meeting.proposed_topic || 'Meeting Request',  │
│       description: isRequester                             │
│         ? `Request sent to ${otherParties.length > 1 ?     │
│            `${otherParties.length} users` :                │
│            otherParties[0]?.full_name}`                    │
│         : `Request from ${userLookup[meeting.requester_id] │
│            ?.full_name || 'user'}`,                        │
│       status: meeting.status,                              │
│       data: meeting                                        │
│     });                                                     │
│   });                                                       │
│                                                             │
│   // Add recent messages (last 5)                          │
│   const recentMessages = messages                          │
│     .sort((a, b) =>                                        │
│       new Date(b.created_date) - new Date(a.created_date)  │
│     )                                                       │
│     .slice(0, 5);                                          │
│                                                             │
│   recentMessages.forEach(message => {                      │
│     const isSender = message.sender_id === user.id;        │
│     const otherParty = userLookup[                         │
│       isSender ? message.recipient_id : message.sender_id  │
│     ];                                                      │
│                                                             │
│     activities.push({                                      │
│       id: `message-${message.id}`,                         │
│       type: 'message',                                     │
│       timestamp: message.created_date,                     │
│       title: isSender ? 'Message sent' : 'Message received',│
│       description: `${isSender ? 'To' : 'From'} `+         │
│                    `${otherParty?.full_name || 'user'}`,   │
│       status: message.read_status ? 'read' : 'unread',     │
│       data: message                                        │
│     });                                                     │
│   });                                                       │
│                                                             │
│   // Add recent bookings (top 3)                           │
│   const upcomingBookings = getUpcomingBookingsForFeed(     │
│     user, meetings, bookings                               │
│   ).slice(0, 3);                                           │
│                                                             │
│   upcomingBookings.forEach(booking => {                    │
│     const relatedMeeting = meetings.find(                  │
│       m => m.id === booking.meeting_request_id             │
│     );                                                      │
│     const bookedBy = userLookup[booking.booked_by];        │
│                                                             │
│     activities.push({                                      │
│       id: `booking-${booking.id}`,                         │
│       type: 'booking',                                     │
│       timestamp: booking.created_date,                     │
│       title: `${booking.room_name} booked`,                │
│       description: `By ${bookedBy?.full_name || 'user'} `+ │
│         `for ${format(new Date(booking.start_time), 'MMM d')}`,│
│       status: booking.status,                              │
│       data: booking,                                       │
│       relatedMeeting                                       │
│     });                                                     │
│   });                                                       │
│                                                             │
│   // Sort all activities by timestamp (newest first)       │
│   activities.sort((a, b) =>                                │
│     new Date(b.timestamp) - new Date(a.timestamp)          │
│   );                                                        │
│                                                             │
│   // Take top 10                                           │
│   setRecentActivity(activities.slice(0, 10));              │
│ };                                                          │
└────────────────────────────────────────────────────────────┘

Activity Feed Display:
┌────────────────────────────────────────────────────────────┐
│ const getActivityIcon = (activity) => {                    │
│   switch (activity.type) {                                 │
│     case 'meeting_request':                                │
│       return activity.status === 'accepted' ?              │
│         <CheckCircle2 className="text-green-500" /> :      │
│         activity.status === 'pending' ?                    │
│         <Clock className="text-orange-500" /> :            │
│         <Calendar />;                                      │
│     case 'booking':                                        │
│       return <MapPin className="text-purple-500" />;       │
│     case 'message':                                        │
│       return activity.status === 'unread' ?                │
│         <MessageSquare className="text-blue-500" /> :      │
│         <MessageSquare className="text-gray-400" />;       │
│     default:                                               │
│       return <Calendar />;                                 │
│   }                                                         │
│ };                                                          │
│                                                             │
│ <div className="recent-activity-list">                     │
│   {recentActivity.length > 0 ? (                           │
│     recentActivity.map((activity) => (                     │
│       <div key={activity.id} className="activity-item">   │
│         <div className="activity-icon">                    │
│           {getActivityIcon(activity)}                      │
│         </div>                                             │
│         <div className="activity-content">                 │
│           <div className="activity-header">                │
│             <span className="activity-title">             │
│               {activity.title}                             │
│             </span>                                         │
│             {activity.status && (                          │
│               <Badge className={getStatusColor(            │
│                 activity.status                            │
│               )}>                                          │
│                 {activity.status}                          │
│               </Badge>                                     │
│             )}                                              │
│             <span className="activity-time">               │
│               {format(                                     │
│                 new Date(activity.timestamp),              │
│                 'MMM d, HH:mm'                             │
│               )}                                            │
│             </span>                                         │
│           </div>                                            │
│           <p className="activity-description">             │
│             {activity.description}                         │
│           </p>                                              │
│         </div>                                              │
│       </div>                                                │
│     ))                                                      │
│   ) : (                                                     │
│     <div className="empty-state">                          │
│       <Calendar className="icon-lg opacity-40" />          │
│       <p>No recent activity</p>                            │
│     </div>                                                  │
│   )}                                                        │
│ </div>                                                      │
└────────────────────────────────────────────────────────────┘

Upcoming Schedule:
┌────────────────────────────────────────────────────────────┐
│ const getUpcomingBookings = (user, meetings, allBookings) =>│
│   const now = new Date();                                  │
│   const acceptedMeetingIds = new Set(                      │
│     meetings                                               │
│       .filter(req => req.status === 'accepted')            │
│       .map(req => req.id)                                  │
│   );                                                        │
│                                                             │
│   const userUpcomingBookings = allBookings.filter(booking =>│
│     const bookingStart = new Date(booking.start_time);     │
│     return (                                               │
│       booking.status === 'active' &&                       │
│       bookingStart > now &&                                │
│       (booking.booked_by === user.id ||                    │
│        acceptedMeetingIds.has(booking.meeting_request_id)) │
│     );                                                      │
│   }).sort((a, b) =>                                        │
│     new Date(a.start_time) - new Date(b.start_time)        │
│   );                                                        │
│                                                             │
│   setUpcomingBookings(userUpcomingBookings);               │
│ };                                                          │
│                                                             │
│ <Card className="upcoming-schedule-card">                  │
│   <CardHeader>                                             │
│     <CardTitle>My Upcoming Schedule</CardTitle>            │
│     <p className="text-sm">                                │
│       Your next meetings and bookings                      │
│       ({upcomingBookings.length})                          │
│     </p>                                                    │
│   </CardHeader>                                            │
│   <CardContent>                                            │
│     {upcomingBookings.length > 0 ? (                       │
│       <div className="schedule-list">                      │
│         {upcomingBookings.map((booking) => {               │
│           const relatedMeeting = meetingRequests.find(     │
│             m => m.id === booking.meeting_request_id       │
│           );                                               │
│           const durationMinutes =                          │
│             (new Date(booking.end_time) -                  │
│              new Date(booking.start_time)) / (1000 * 60);  │
│                                                             │
│           return (                                          │
│             <div key={booking.id} className="schedule-item">│
│               <div className="schedule-date">              │
│                 <span className="day">                     │
│                   {format(new Date(booking.start_time), 'd')}│
│                 </span>                                     │
│                 <span className="month">                   │
│                   {format(new Date(booking.start_time), 'MMM')}│
│                 </span>                                     │
│               </div>                                        │
│               <div className="schedule-details">           │
│                 <h4>{booking.room_name}</h4>               │
│                 <p className="time">                        │
│                   {format(new Date(booking.start_time), 'HH:mm')}│
│                   {' - '}                                   │
│                   {format(new Date(booking.end_time), 'HH:mm')}│
│                 </p>                                        │
│                 <p className="meta">                        │
│                   Floor {booking.floor_level} •            │
│                   {durationMinutes}min                     │
│                 </p>                                        │
│               </div>                                        │
│             </div>                                          │
│           );                                                │
│         })}                                                 │
│       </div>                                                │
│     ) : (                                                   │
│       <div className="empty-state">                        │
│         <Calendar className="icon-lg opacity-40" />        │
│         <p>No upcoming bookings</p>                        │
│         <p className="text-sm">                            │
│           Book a venue for an accepted meeting             │
│         </p>                                                │
│       </div>                                                │
│     )}                                                      │
│   </CardContent>                                           │
│ </Card>                                                     │
└────────────────────────────────────────────────────────────┘

Most Reserved Rooms:
┌────────────────────────────────────────────────────────────┐
│ const calculateVenueStats = (allBookings) => {             │
│   const roomCounts = allBookings                           │
│     .filter(b => b.status === 'active')                    │
│     .reduce((acc, booking) => {                            │
│       acc[booking.room_name] =                             │
│         (acc[booking.room_name] || 0) + 1;                 │
│       return acc;                                          │
│     }, {});                                                 │
│                                                             │
│   const sortedRooms = Object.entries(roomCounts)           │
│     .sort(([, a], [, b]) => b - a)                         │
│     .slice(0, 3);                                          │
│                                                             │
│   setMostReservedRooms(sortedRooms);                       │
│ };                                                          │
│                                                             │
│ <Card className="popular-venues-card">                     │
│   <CardHeader>                                             │
│     <CardTitle className="flex items-center gap-2">       │
│       <BarChart2 className="text-indigo-600" />            │
│       Popular Venues                                       │
│     </CardTitle>                                           │
│     <p className="text-sm">                                │
│       Most reserved rooms during the event                 │
│     </p>                                                    │
│   </CardHeader>                                            │
│   <CardContent>                                            │
│     {mostReservedRooms.length > 0 ? (                      │
│       <div className="venue-stats-list">                   │
│         {mostReservedRooms.map(([roomName, count], index) =>│
│           <div key={roomName} className="venue-stat-item">│
│             <div className="rank">{index + 1}</div>        │
│             <div className="venue-info">                   │
│               <p className="venue-name">{roomName}</p>     │
│               <div className="progress-bar">               │
│                 <div                                       │
│                   className="progress-fill"                │
│                   style={{                                 │
│                     width: `${(count /                     │
│                       (mostReservedRooms[0][1] || 1)) *    │
│                       100}%`                               │
│                   }}                                        │
│                 />                                          │
│               </div>                                        │
│             </div>                                          │
│             <div className="count">{count}</div>           │
│           </div>                                            │
│         )}                                                  │
│       </div>                                                │
│     ) : (                                                   │
│       <div className="empty-state">                        │
│         <MapPin className="icon-lg opacity-40" />          │
│         <p>No booking data yet</p>                         │
│       </div>                                                │
│     )}                                                      │
│   </CardContent>                                           │
│ </Card>                                                     │
└────────────────────────────────────────────────────────────┘

Quick Actions:
┌────────────────────────────────────────────────────────────┐
│ <Card className="quick-actions-card">                      │
│   <CardHeader>                                             │
│     <CardTitle>Quick Actions</CardTitle>                   │
│     <p className="text-sm">                                │
│       Access key platform features quickly                 │
│     </p>                                                    │
│   </CardHeader>                                            │
│   <CardContent>                                            │
│     <div className="grid grid-cols-1 md:grid-cols-2       │
│                     lg:grid-cols-4 gap-4">                │
│                                                             │
│       <Link to={createPageUrl("Delegates")}>               │
│         <Button className="action-button">                 │
│           <Users className="icon" />                       │
│           <span>Browse Users</span>                        │
│         </Button>                                          │
│       </Link>                                              │
│                                                             │
│       <Link to={createPageUrl("Meetings")}>                │
│         <Button className="action-button relative">       │
│           <Calendar className="icon" />                    │
│           <span>View Meetings</span>                       │
│           {stats.pendingRequests > 0 && (                  │
│             <div className="notification-badge">           │
│               {stats.pendingRequests}                      │
│             </div>                                          │
│           )}                                                │
│         </Button>                                          │
│       </Link>                                              │
│                                                             │
│       <Link to={createPageUrl("Chat")}>                    │
│         <Button className="action-button relative">       │
│           <MessageSquare className="icon" />               │
│           <span>Messages</span>                            │
│           {stats.unreadMessages > 0 && (                   │
│             <div className="notification-badge">           │
│               {stats.unreadMessages}                       │
│             </div>                                          │
│           )}                                                │
│         </Button>                                          │
│       </Link>                                              │
│                                                             │
│       <Link to={createPageUrl("Venues")}>                  │
│         <Button className="action-button">                 │
│           <MapPin className="icon" />                      │
│           <span>Book Venue</span>                          │
│         </Button>                                          │
│       </Link>                                              │
│     </div>                                                  │
│   </CardContent>                                           │
│ </Card>                                                     │
└────────────────────────────────────────────────────────────┘

Status Alerts:
┌────────────────────────────────────────────────────────────┐
│ {/* Hidden Profile Alert */}                               │
│ {currentUser?.is_profile_hidden && (                       │
│   <Alert className="border-blue-200 bg-blue-50">          │
│     <EyeOff className="h-4 w-4 text-blue-600" />          │
│     <AlertDescription className="text-blue-800">          │
│       <strong>You are in Hidden Mode.</strong>             │
│       Your profile is not visible in the user directory.   │
│       You can change this in your profile settings.        │
│       <Link to={createPageUrl("Profile")}                  │
│         className="ml-2 underline font-semibold">          │
│         Update Privacy                                     │
│       </Link>                                              │
│     </AlertDescription>                                    │
│   </Alert>                                                  │
│ )}                                                          │
│                                                             │
│ {/* Consent Required Alert */}                             │
│ {!currentUser?.consent_given && (                          │
│   <Alert className="border-red-200 bg-red-50">            │
│     <AlertCircle className="h-4 w-4 text-red-600" />      │
│     <AlertDescription className="text-red-800">           │
│       <strong>Consent Required:</strong>                   │
│       Please complete the data protection consent          │
│       process to access platform features.                 │
│       <Link to={createPageUrl("Profile")}                  │
│         className="ml-2 underline">                        │
│         Complete Now →                                     │
│       </Link>                                              │
│     </AlertDescription>                                    │
│   </Alert>                                                  │
│ )}                                                          │
│                                                             │
│ {/* Profile Incomplete Alert */}                           │
│ {!currentUser?.profile_completed &&                        │
│  currentUser?.consent_given && (                           │
│   <Alert className="border-orange-200 bg-orange-50">      │
│     <AlertCircle className="h-4 w-4 text-orange-600" />   │
│     <AlertDescription className="text-orange-800">        │
│       <strong>Profile Incomplete:</strong>                 │
│       Complete your profile to access matchmaking features.│
│       <Link to={createPageUrl("Profile")}                  │
│         className="ml-2 underline">                        │
│         Complete Profile →                                 │
│       </Link>                                              │
│     </AlertDescription>                                    │
│   </Alert>                                                  │
│ )}                                                          │
└────────────────────────────────────────────────────────────┘